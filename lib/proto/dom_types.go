// This file is generated by "./lib/proto/cmd/gen"

package proto

// DOMNodeID Unique DOM node identifier.
type DOMNodeID int64

// DOMBackendNodeID Unique DOM node identifier used to reference a node that may not have been pushed to the
// front-end.
type DOMBackendNodeID int64

// DOMBackendNode Backend node with a friendly name.
type DOMBackendNode struct {
	// NodeType `Node`'s nodeType.
	NodeType int64 `json:"nodeType"`

	// NodeName `Node`'s nodeName.
	NodeName string `json:"nodeName"`

	// BackendNodeID ...
	BackendNodeID *DOMBackendNodeID `json:"backendNodeId"`
}

// DOMPseudoType Pseudo element type.
type DOMPseudoType string

const (
	// DOMPseudoTypeFirstLine enum value
	DOMPseudoTypeFirstLine DOMPseudoType = "first-line"

	// DOMPseudoTypeFirstLetter enum value
	DOMPseudoTypeFirstLetter DOMPseudoType = "first-letter"

	// DOMPseudoTypeBefore enum value
	DOMPseudoTypeBefore DOMPseudoType = "before"

	// DOMPseudoTypeAfter enum value
	DOMPseudoTypeAfter DOMPseudoType = "after"

	// DOMPseudoTypeMarker enum value
	DOMPseudoTypeMarker DOMPseudoType = "marker"

	// DOMPseudoTypeBackdrop enum value
	DOMPseudoTypeBackdrop DOMPseudoType = "backdrop"

	// DOMPseudoTypeSelection enum value
	DOMPseudoTypeSelection DOMPseudoType = "selection"

	// DOMPseudoTypeFirstLineInherited enum value
	DOMPseudoTypeFirstLineInherited DOMPseudoType = "first-line-inherited"

	// DOMPseudoTypeScrollbar enum value
	DOMPseudoTypeScrollbar DOMPseudoType = "scrollbar"

	// DOMPseudoTypeScrollbarThumb enum value
	DOMPseudoTypeScrollbarThumb DOMPseudoType = "scrollbar-thumb"

	// DOMPseudoTypeScrollbarButton enum value
	DOMPseudoTypeScrollbarButton DOMPseudoType = "scrollbar-button"

	// DOMPseudoTypeScrollbarTrack enum value
	DOMPseudoTypeScrollbarTrack DOMPseudoType = "scrollbar-track"

	// DOMPseudoTypeScrollbarTrackPiece enum value
	DOMPseudoTypeScrollbarTrackPiece DOMPseudoType = "scrollbar-track-piece"

	// DOMPseudoTypeScrollbarCorner enum value
	DOMPseudoTypeScrollbarCorner DOMPseudoType = "scrollbar-corner"

	// DOMPseudoTypeResizer enum value
	DOMPseudoTypeResizer DOMPseudoType = "resizer"

	// DOMPseudoTypeInputListButton enum value
	DOMPseudoTypeInputListButton DOMPseudoType = "input-list-button"
)

// DOMShadowRootType Shadow root type.
type DOMShadowRootType string

const (
	// DOMShadowRootTypeUserAgent enum value
	DOMShadowRootTypeUserAgent DOMShadowRootType = "user-agent"

	// DOMShadowRootTypeOpen enum value
	DOMShadowRootTypeOpen DOMShadowRootType = "open"

	// DOMShadowRootTypeClosed enum value
	DOMShadowRootTypeClosed DOMShadowRootType = "closed"
)

// DOMNode DOM interaction is implemented in terms of mirror objects that represent the actual DOM nodes.
// DOMNode is a base node mirror type.
type DOMNode struct {
	// NodeID Node identifier that is passed into the rest of the DOM messages as the `nodeId`. Backend
	// will only push node with given `id` once. It is aware of all requested nodes and will only
	// fire DOM events for nodes known to the client.
	NodeID *DOMNodeID `json:"nodeId"`

	// ParentID The id of the parent node if any.
	ParentID *DOMNodeID `json:"parentId,omitempty"`

	// BackendNodeID The BackendNodeId for this node.
	BackendNodeID *DOMBackendNodeID `json:"backendNodeId"`

	// NodeType `Node`'s nodeType.
	NodeType int64 `json:"nodeType"`

	// NodeName `Node`'s nodeName.
	NodeName string `json:"nodeName"`

	// LocalName `Node`'s localName.
	LocalName string `json:"localName"`

	// NodeValue `Node`'s nodeValue.
	NodeValue string `json:"nodeValue"`

	// ChildNodeCount Child count for `Container` nodes.
	ChildNodeCount int64 `json:"childNodeCount,omitempty"`

	// Children Child nodes of this node when requested with children.
	Children []*DOMNode `json:"children,omitempty"`

	// Attributes Attributes of the `Element` node in the form of flat array `[name1, value1, name2, value2]`.
	Attributes []string `json:"attributes,omitempty"`

	// DocumentURL Document URL that `Document` or `FrameOwner` node points to.
	DocumentURL string `json:"documentURL,omitempty"`

	// BaseURL Base URL that `Document` or `FrameOwner` node uses for URL completion.
	BaseURL string `json:"baseURL,omitempty"`

	// PublicID `DocumentType`'s publicId.
	PublicID string `json:"publicId,omitempty"`

	// SystemID `DocumentType`'s systemId.
	SystemID string `json:"systemId,omitempty"`

	// InternalSubset `DocumentType`'s internalSubset.
	InternalSubset string `json:"internalSubset,omitempty"`

	// XMLVersion `Document`'s XML version in case of XML documents.
	XMLVersion string `json:"xmlVersion,omitempty"`

	// Name `Attr`'s name.
	Name string `json:"name,omitempty"`

	// Value `Attr`'s value.
	Value string `json:"value,omitempty"`

	// PseudoType Pseudo element type for this node.
	PseudoType *DOMPseudoType `json:"pseudoType,omitempty"`

	// ShadowRootType Shadow root type.
	ShadowRootType *DOMShadowRootType `json:"shadowRootType,omitempty"`

	// FrameID Frame ID for frame owner elements.
	FrameID *PageFrameID `json:"frameId,omitempty"`

	// ContentDocument Content document for frame owner elements.
	ContentDocument *DOMNode `json:"contentDocument,omitempty"`

	// ShadowRoots Shadow root list for given element host.
	ShadowRoots []*DOMNode `json:"shadowRoots,omitempty"`

	// TemplateContent Content document fragment for template elements.
	TemplateContent *DOMNode `json:"templateContent,omitempty"`

	// PseudoElements Pseudo elements associated with this node.
	PseudoElements []*DOMNode `json:"pseudoElements,omitempty"`

	// ImportedDocument Import document for the HTMLImport links.
	ImportedDocument *DOMNode `json:"importedDocument,omitempty"`

	// DistributedNodes Distributed nodes for given insertion point.
	DistributedNodes []*DOMBackendNode `json:"distributedNodes,omitempty"`

	// IsSVG Whether the node is SVG.
	IsSVG bool `json:"isSVG,omitempty"`
}

// DOMRGBA A structure holding an RGBA color.
type DOMRGBA struct {
	// R The red component, in the [0-255] range.
	R int64 `json:"r"`

	// G The green component, in the [0-255] range.
	G int64 `json:"g"`

	// B The blue component, in the [0-255] range.
	B int64 `json:"b"`

	// A The alpha component, in the [0-1] range (default: 1).
	A float64 `json:"a,omitempty"`
}

// DOMQuad An array of quad vertices, x immediately followed by y for each point, points clock-wise.
type DOMQuad []float64

// DOMBoxModel Box model.
type DOMBoxModel struct {
	// Content Content box
	Content *DOMQuad `json:"content"`

	// Padding Padding box
	Padding *DOMQuad `json:"padding"`

	// Border Border box
	Border *DOMQuad `json:"border"`

	// Margin Margin box
	Margin *DOMQuad `json:"margin"`

	// Width Node width
	Width int64 `json:"width"`

	// Height Node height
	Height int64 `json:"height"`

	// ShapeOutside Shape outside coordinates
	ShapeOutside *DOMShapeOutsideInfo `json:"shapeOutside,omitempty"`
}

// DOMShapeOutsideInfo CSS Shape Outside details.
type DOMShapeOutsideInfo struct {
	// Bounds Shape bounds
	Bounds *DOMQuad `json:"bounds"`

	// Shape Shape coordinate details
	Shape []interface{} `json:"shape"`

	// MarginShape Margin shape bounds
	MarginShape []interface{} `json:"marginShape"`
}

// DOMRect Rectangle.
type DOMRect struct {
	// X X coordinate
	X float64 `json:"x"`

	// Y Y coordinate
	Y float64 `json:"y"`

	// Width Rectangle width
	Width float64 `json:"width"`

	// Height Rectangle height
	Height float64 `json:"height"`
}
