// This file is generated by "./lib/proto/cmd/gen"

package proto

import (
	"encoding/json"
)

// ApplicationCacheEnable Enables application cache domain notifications.
type ApplicationCacheEnable struct {
}

// ApplicationCacheEnableResult type
type ApplicationCacheEnableResult struct {
}

// Call of the command, sessionID is optional.
func (m ApplicationCacheEnable) Call(c *Call) (*ApplicationCacheEnableResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "ApplicationCacheEnable", m)
	if err != nil {
		return nil, err
	}

	var res ApplicationCacheEnableResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// ApplicationCacheGetApplicationCacheForFrame Returns relevant application cache data for the document in given frame.
type ApplicationCacheGetApplicationCacheForFrame struct {
	// FrameID Identifier of the frame containing document whose application cache is retrieved.
	FrameID *PageFrameID `json:"frameId"`
}

// ApplicationCacheGetApplicationCacheForFrameResult type
type ApplicationCacheGetApplicationCacheForFrameResult struct {
	// ApplicationCache Relevant application cache data for the document in given frame.
	ApplicationCache *ApplicationCacheApplicationCache `json:"applicationCache"`
}

// Call of the command, sessionID is optional.
func (m ApplicationCacheGetApplicationCacheForFrame) Call(c *Call) (*ApplicationCacheGetApplicationCacheForFrameResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "ApplicationCacheGetApplicationCacheForFrame", m)
	if err != nil {
		return nil, err
	}

	var res ApplicationCacheGetApplicationCacheForFrameResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// ApplicationCacheGetFramesWithManifests Returns array of frame identifiers with manifest urls for each frame containing a document
// associated with some application cache.
type ApplicationCacheGetFramesWithManifests struct {
}

// ApplicationCacheGetFramesWithManifestsResult type
type ApplicationCacheGetFramesWithManifestsResult struct {
	// FrameIds Array of frame identifiers with manifest urls for each frame containing a document
	// associated with some application cache.
	FrameIds []*ApplicationCacheFrameWithManifest `json:"frameIds"`
}

// Call of the command, sessionID is optional.
func (m ApplicationCacheGetFramesWithManifests) Call(c *Call) (*ApplicationCacheGetFramesWithManifestsResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "ApplicationCacheGetFramesWithManifests", m)
	if err != nil {
		return nil, err
	}

	var res ApplicationCacheGetFramesWithManifestsResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// ApplicationCacheGetManifestForFrame Returns manifest URL for document in the given frame.
type ApplicationCacheGetManifestForFrame struct {
	// FrameID Identifier of the frame containing document whose manifest is retrieved.
	FrameID *PageFrameID `json:"frameId"`
}

// ApplicationCacheGetManifestForFrameResult type
type ApplicationCacheGetManifestForFrameResult struct {
	// ManifestURL Manifest URL for document in the given frame.
	ManifestURL string `json:"manifestURL"`
}

// Call of the command, sessionID is optional.
func (m ApplicationCacheGetManifestForFrame) Call(c *Call) (*ApplicationCacheGetManifestForFrameResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "ApplicationCacheGetManifestForFrame", m)
	if err != nil {
		return nil, err
	}

	var res ApplicationCacheGetManifestForFrameResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}
