// This file is generated by "./lib/proto/cmd/gen"

package proto

import (
	"encoding/json"
)

// AnimationDisable Disables animation domain notifications.
type AnimationDisable struct {
}

// AnimationDisableResult type
type AnimationDisableResult struct {
}

// Call of the command, sessionID is optional.
func (m AnimationDisable) Call(c *Call) (*AnimationDisableResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "AnimationDisable", m)
	if err != nil {
		return nil, err
	}

	var res AnimationDisableResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// AnimationEnable Enables animation domain notifications.
type AnimationEnable struct {
}

// AnimationEnableResult type
type AnimationEnableResult struct {
}

// Call of the command, sessionID is optional.
func (m AnimationEnable) Call(c *Call) (*AnimationEnableResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "AnimationEnable", m)
	if err != nil {
		return nil, err
	}

	var res AnimationEnableResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// AnimationGetCurrentTime Returns the current time of the an animation.
type AnimationGetCurrentTime struct {
	// ID Id of animation.
	ID string `json:"id"`
}

// AnimationGetCurrentTimeResult type
type AnimationGetCurrentTimeResult struct {
	// CurrentTime Current time of the page.
	CurrentTime float64 `json:"currentTime"`
}

// Call of the command, sessionID is optional.
func (m AnimationGetCurrentTime) Call(c *Call) (*AnimationGetCurrentTimeResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "AnimationGetCurrentTime", m)
	if err != nil {
		return nil, err
	}

	var res AnimationGetCurrentTimeResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// AnimationGetPlaybackRate Gets the playback rate of the document timeline.
type AnimationGetPlaybackRate struct {
}

// AnimationGetPlaybackRateResult type
type AnimationGetPlaybackRateResult struct {
	// PlaybackRate Playback rate for animations on page.
	PlaybackRate float64 `json:"playbackRate"`
}

// Call of the command, sessionID is optional.
func (m AnimationGetPlaybackRate) Call(c *Call) (*AnimationGetPlaybackRateResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "AnimationGetPlaybackRate", m)
	if err != nil {
		return nil, err
	}

	var res AnimationGetPlaybackRateResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// AnimationReleaseAnimations Releases a set of animations to no longer be manipulated.
type AnimationReleaseAnimations struct {
	// Animations List of animation ids to seek.
	Animations []string `json:"animations"`
}

// AnimationReleaseAnimationsResult type
type AnimationReleaseAnimationsResult struct {
}

// Call of the command, sessionID is optional.
func (m AnimationReleaseAnimations) Call(c *Call) (*AnimationReleaseAnimationsResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "AnimationReleaseAnimations", m)
	if err != nil {
		return nil, err
	}

	var res AnimationReleaseAnimationsResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// AnimationResolveAnimation Gets the remote object of the Animation.
type AnimationResolveAnimation struct {
	// AnimationID Animation id.
	AnimationID string `json:"animationId"`
}

// AnimationResolveAnimationResult type
type AnimationResolveAnimationResult struct {
	// RemoteObject Corresponding remote object.
	RemoteObject *RuntimeRemoteObject `json:"remoteObject"`
}

// Call of the command, sessionID is optional.
func (m AnimationResolveAnimation) Call(c *Call) (*AnimationResolveAnimationResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "AnimationResolveAnimation", m)
	if err != nil {
		return nil, err
	}

	var res AnimationResolveAnimationResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// AnimationSeekAnimations Seek a set of animations to a particular time within each animation.
type AnimationSeekAnimations struct {
	// Animations List of animation ids to seek.
	Animations []string `json:"animations"`

	// CurrentTime Set the current time of each animation.
	CurrentTime float64 `json:"currentTime"`
}

// AnimationSeekAnimationsResult type
type AnimationSeekAnimationsResult struct {
}

// Call of the command, sessionID is optional.
func (m AnimationSeekAnimations) Call(c *Call) (*AnimationSeekAnimationsResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "AnimationSeekAnimations", m)
	if err != nil {
		return nil, err
	}

	var res AnimationSeekAnimationsResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// AnimationSetPaused Sets the paused state of a set of animations.
type AnimationSetPaused struct {
	// Animations Animations to set the pause state of.
	Animations []string `json:"animations"`

	// Paused Paused state to set to.
	Paused bool `json:"paused"`
}

// AnimationSetPausedResult type
type AnimationSetPausedResult struct {
}

// Call of the command, sessionID is optional.
func (m AnimationSetPaused) Call(c *Call) (*AnimationSetPausedResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "AnimationSetPaused", m)
	if err != nil {
		return nil, err
	}

	var res AnimationSetPausedResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// AnimationSetPlaybackRate Sets the playback rate of the document timeline.
type AnimationSetPlaybackRate struct {
	// PlaybackRate Playback rate for animations on page
	PlaybackRate float64 `json:"playbackRate"`
}

// AnimationSetPlaybackRateResult type
type AnimationSetPlaybackRateResult struct {
}

// Call of the command, sessionID is optional.
func (m AnimationSetPlaybackRate) Call(c *Call) (*AnimationSetPlaybackRateResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "AnimationSetPlaybackRate", m)
	if err != nil {
		return nil, err
	}

	var res AnimationSetPlaybackRateResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// AnimationSetTiming Sets the timing of an animation node.
type AnimationSetTiming struct {
	// AnimationID Animation id.
	AnimationID string `json:"animationId"`

	// Duration Duration of the animation.
	Duration float64 `json:"duration"`

	// Delay Delay of the animation.
	Delay float64 `json:"delay"`
}

// AnimationSetTimingResult type
type AnimationSetTimingResult struct {
}

// Call of the command, sessionID is optional.
func (m AnimationSetTiming) Call(c *Call) (*AnimationSetTimingResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "AnimationSetTiming", m)
	if err != nil {
		return nil, err
	}

	var res AnimationSetTimingResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}
