// This file is generated by "./lib/proto/cmd/gen"

package proto

// DebuggerBreakpointID Breakpoint identifier.
type DebuggerBreakpointID string

// DebuggerCallFrameID Call frame identifier.
type DebuggerCallFrameID string

// DebuggerLocation Location in the source code.
type DebuggerLocation struct {
	// ScriptID Script identifier as reported in the `Debugger.scriptParsed`.
	ScriptID *RuntimeScriptID `json:"scriptId"`

	// LineNumber Line number in the script (0-based).
	LineNumber int64 `json:"lineNumber"`

	// ColumnNumber Column number in the script (0-based).
	ColumnNumber int64 `json:"columnNumber,omitempty"`
}

// DebuggerScriptPosition (experimental) Location in the source code.
type DebuggerScriptPosition struct {
	// LineNumber ...
	LineNumber int64 `json:"lineNumber"`

	// ColumnNumber ...
	ColumnNumber int64 `json:"columnNumber"`
}

// DebuggerCallFrame JavaScript call frame. Array of call frames form the call stack.
type DebuggerCallFrame struct {
	// CallFrameID Call frame identifier. This identifier is only valid while the virtual machine is paused.
	CallFrameID *DebuggerCallFrameID `json:"callFrameId"`

	// FunctionName Name of the JavaScript function called on this call frame.
	FunctionName string `json:"functionName"`

	// FunctionLocation Location in the source code.
	FunctionLocation *DebuggerLocation `json:"functionLocation,omitempty"`

	// Location Location in the source code.
	Location *DebuggerLocation `json:"location"`

	// URL JavaScript script name or url.
	URL string `json:"url"`

	// ScopeChain Scope chain for this call frame.
	ScopeChain []*DebuggerScope `json:"scopeChain"`

	// This `this` object for this call frame.
	This *RuntimeRemoteObject `json:"this"`

	// ReturnValue The value being returned, if the function is at return point.
	ReturnValue *RuntimeRemoteObject `json:"returnValue,omitempty"`
}

// DebuggerScope Scope description.
type DebuggerScope struct {
	// Type Scope type.
	Type string `json:"type"`

	// Object Object representing the scope. For `global` and `with` scopes it represents the actual
	// object; for the rest of the scopes, it is artificial transient object enumerating scope
	// variables as its properties.
	Object *RuntimeRemoteObject `json:"object"`

	// Name ...
	Name string `json:"name,omitempty"`

	// StartLocation Location in the source code where scope starts
	StartLocation *DebuggerLocation `json:"startLocation,omitempty"`

	// EndLocation Location in the source code where scope ends
	EndLocation *DebuggerLocation `json:"endLocation,omitempty"`
}

// DebuggerSearchMatch Search match for resource.
type DebuggerSearchMatch struct {
	// LineNumber Line number in resource content.
	LineNumber float64 `json:"lineNumber"`

	// LineContent Line with match content.
	LineContent string `json:"lineContent"`
}

// DebuggerBreakLocation ...
type DebuggerBreakLocation struct {
	// ScriptID Script identifier as reported in the `Debugger.scriptParsed`.
	ScriptID *RuntimeScriptID `json:"scriptId"`

	// LineNumber Line number in the script (0-based).
	LineNumber int64 `json:"lineNumber"`

	// ColumnNumber Column number in the script (0-based).
	ColumnNumber int64 `json:"columnNumber,omitempty"`

	// Type ...
	Type string `json:"type,omitempty"`
}
