// This file is generated by "./lib/proto/cmd/gen"

package proto

import (
	"encoding/json"
)

// ServiceWorkerDeliverPushMessage ...
type ServiceWorkerDeliverPushMessage struct {
	// Origin ...
	Origin string `json:"origin"`

	// RegistrationID ...
	RegistrationID *ServiceWorkerRegistrationID `json:"registrationId"`

	// Data ...
	Data string `json:"data"`
}

// ServiceWorkerDeliverPushMessageResult type
type ServiceWorkerDeliverPushMessageResult struct {
}

// Call of the command, sessionID is optional.
func (m ServiceWorkerDeliverPushMessage) Call(c *Call) (*ServiceWorkerDeliverPushMessageResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "ServiceWorkerDeliverPushMessage", m)
	if err != nil {
		return nil, err
	}

	var res ServiceWorkerDeliverPushMessageResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// ServiceWorkerDisable ...
type ServiceWorkerDisable struct {
}

// ServiceWorkerDisableResult type
type ServiceWorkerDisableResult struct {
}

// Call of the command, sessionID is optional.
func (m ServiceWorkerDisable) Call(c *Call) (*ServiceWorkerDisableResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "ServiceWorkerDisable", m)
	if err != nil {
		return nil, err
	}

	var res ServiceWorkerDisableResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// ServiceWorkerDispatchSyncEvent ...
type ServiceWorkerDispatchSyncEvent struct {
	// Origin ...
	Origin string `json:"origin"`

	// RegistrationID ...
	RegistrationID *ServiceWorkerRegistrationID `json:"registrationId"`

	// Tag ...
	Tag string `json:"tag"`

	// LastChance ...
	LastChance bool `json:"lastChance"`
}

// ServiceWorkerDispatchSyncEventResult type
type ServiceWorkerDispatchSyncEventResult struct {
}

// Call of the command, sessionID is optional.
func (m ServiceWorkerDispatchSyncEvent) Call(c *Call) (*ServiceWorkerDispatchSyncEventResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "ServiceWorkerDispatchSyncEvent", m)
	if err != nil {
		return nil, err
	}

	var res ServiceWorkerDispatchSyncEventResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// ServiceWorkerDispatchPeriodicSyncEvent ...
type ServiceWorkerDispatchPeriodicSyncEvent struct {
	// Origin ...
	Origin string `json:"origin"`

	// RegistrationID ...
	RegistrationID *ServiceWorkerRegistrationID `json:"registrationId"`

	// Tag ...
	Tag string `json:"tag"`
}

// ServiceWorkerDispatchPeriodicSyncEventResult type
type ServiceWorkerDispatchPeriodicSyncEventResult struct {
}

// Call of the command, sessionID is optional.
func (m ServiceWorkerDispatchPeriodicSyncEvent) Call(c *Call) (*ServiceWorkerDispatchPeriodicSyncEventResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "ServiceWorkerDispatchPeriodicSyncEvent", m)
	if err != nil {
		return nil, err
	}

	var res ServiceWorkerDispatchPeriodicSyncEventResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// ServiceWorkerEnable ...
type ServiceWorkerEnable struct {
}

// ServiceWorkerEnableResult type
type ServiceWorkerEnableResult struct {
}

// Call of the command, sessionID is optional.
func (m ServiceWorkerEnable) Call(c *Call) (*ServiceWorkerEnableResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "ServiceWorkerEnable", m)
	if err != nil {
		return nil, err
	}

	var res ServiceWorkerEnableResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// ServiceWorkerInspectWorker ...
type ServiceWorkerInspectWorker struct {
	// VersionID ...
	VersionID string `json:"versionId"`
}

// ServiceWorkerInspectWorkerResult type
type ServiceWorkerInspectWorkerResult struct {
}

// Call of the command, sessionID is optional.
func (m ServiceWorkerInspectWorker) Call(c *Call) (*ServiceWorkerInspectWorkerResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "ServiceWorkerInspectWorker", m)
	if err != nil {
		return nil, err
	}

	var res ServiceWorkerInspectWorkerResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// ServiceWorkerSetForceUpdateOnPageLoad ...
type ServiceWorkerSetForceUpdateOnPageLoad struct {
	// ForceUpdateOnPageLoad ...
	ForceUpdateOnPageLoad bool `json:"forceUpdateOnPageLoad"`
}

// ServiceWorkerSetForceUpdateOnPageLoadResult type
type ServiceWorkerSetForceUpdateOnPageLoadResult struct {
}

// Call of the command, sessionID is optional.
func (m ServiceWorkerSetForceUpdateOnPageLoad) Call(c *Call) (*ServiceWorkerSetForceUpdateOnPageLoadResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "ServiceWorkerSetForceUpdateOnPageLoad", m)
	if err != nil {
		return nil, err
	}

	var res ServiceWorkerSetForceUpdateOnPageLoadResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// ServiceWorkerSkipWaiting ...
type ServiceWorkerSkipWaiting struct {
	// ScopeURL ...
	ScopeURL string `json:"scopeURL"`
}

// ServiceWorkerSkipWaitingResult type
type ServiceWorkerSkipWaitingResult struct {
}

// Call of the command, sessionID is optional.
func (m ServiceWorkerSkipWaiting) Call(c *Call) (*ServiceWorkerSkipWaitingResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "ServiceWorkerSkipWaiting", m)
	if err != nil {
		return nil, err
	}

	var res ServiceWorkerSkipWaitingResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// ServiceWorkerStartWorker ...
type ServiceWorkerStartWorker struct {
	// ScopeURL ...
	ScopeURL string `json:"scopeURL"`
}

// ServiceWorkerStartWorkerResult type
type ServiceWorkerStartWorkerResult struct {
}

// Call of the command, sessionID is optional.
func (m ServiceWorkerStartWorker) Call(c *Call) (*ServiceWorkerStartWorkerResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "ServiceWorkerStartWorker", m)
	if err != nil {
		return nil, err
	}

	var res ServiceWorkerStartWorkerResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// ServiceWorkerStopAllWorkers ...
type ServiceWorkerStopAllWorkers struct {
}

// ServiceWorkerStopAllWorkersResult type
type ServiceWorkerStopAllWorkersResult struct {
}

// Call of the command, sessionID is optional.
func (m ServiceWorkerStopAllWorkers) Call(c *Call) (*ServiceWorkerStopAllWorkersResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "ServiceWorkerStopAllWorkers", m)
	if err != nil {
		return nil, err
	}

	var res ServiceWorkerStopAllWorkersResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// ServiceWorkerStopWorker ...
type ServiceWorkerStopWorker struct {
	// VersionID ...
	VersionID string `json:"versionId"`
}

// ServiceWorkerStopWorkerResult type
type ServiceWorkerStopWorkerResult struct {
}

// Call of the command, sessionID is optional.
func (m ServiceWorkerStopWorker) Call(c *Call) (*ServiceWorkerStopWorkerResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "ServiceWorkerStopWorker", m)
	if err != nil {
		return nil, err
	}

	var res ServiceWorkerStopWorkerResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// ServiceWorkerUnregister ...
type ServiceWorkerUnregister struct {
	// ScopeURL ...
	ScopeURL string `json:"scopeURL"`
}

// ServiceWorkerUnregisterResult type
type ServiceWorkerUnregisterResult struct {
}

// Call of the command, sessionID is optional.
func (m ServiceWorkerUnregister) Call(c *Call) (*ServiceWorkerUnregisterResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "ServiceWorkerUnregister", m)
	if err != nil {
		return nil, err
	}

	var res ServiceWorkerUnregisterResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// ServiceWorkerUpdateRegistration ...
type ServiceWorkerUpdateRegistration struct {
	// ScopeURL ...
	ScopeURL string `json:"scopeURL"`
}

// ServiceWorkerUpdateRegistrationResult type
type ServiceWorkerUpdateRegistrationResult struct {
}

// Call of the command, sessionID is optional.
func (m ServiceWorkerUpdateRegistration) Call(c *Call) (*ServiceWorkerUpdateRegistrationResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "ServiceWorkerUpdateRegistration", m)
	if err != nil {
		return nil, err
	}

	var res ServiceWorkerUpdateRegistrationResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}
