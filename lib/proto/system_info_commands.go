// This file is generated by "./lib/proto/cmd/gen"

package proto

import (
	"encoding/json"
)

// SystemInfoGetInfo Returns information about the system.
type SystemInfoGetInfo struct {
}

// SystemInfoGetInfoResult type
type SystemInfoGetInfoResult struct {
	// Gpu Information about the GPUs on the system.
	Gpu *SystemInfoGPUInfo `json:"gpu"`

	// ModelName A platform-dependent description of the model of the machine. On Mac OS, this is, for
	// example, 'MacBookPro'. Will be the empty string if not supported.
	ModelName string `json:"modelName"`

	// ModelVersion A platform-dependent description of the version of the machine. On Mac OS, this is, for
	// example, '10.1'. Will be the empty string if not supported.
	ModelVersion string `json:"modelVersion"`

	// CommandLine The command line string used to launch the browser. Will be the empty string if not
	// supported.
	CommandLine string `json:"commandLine"`
}

// Call of the command, sessionID is optional.
func (m SystemInfoGetInfo) Call(c *Call) (*SystemInfoGetInfoResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "SystemInfoGetInfo", m)
	if err != nil {
		return nil, err
	}

	var res SystemInfoGetInfoResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// SystemInfoGetProcessInfo Returns information about all running processes.
type SystemInfoGetProcessInfo struct {
}

// SystemInfoGetProcessInfoResult type
type SystemInfoGetProcessInfoResult struct {
	// ProcessInfo An array of process info blocks.
	ProcessInfo []*SystemInfoProcessInfo `json:"processInfo"`
}

// Call of the command, sessionID is optional.
func (m SystemInfoGetProcessInfo) Call(c *Call) (*SystemInfoGetProcessInfoResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "SystemInfoGetProcessInfo", m)
	if err != nil {
		return nil, err
	}

	var res SystemInfoGetProcessInfoResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}
