// This file is generated by "./lib/proto/cmd/gen"

package proto

import (
	"encoding/json"
)

// RuntimeAwaitPromise Add handler to promise with given promise object id.
type RuntimeAwaitPromise struct {
	// PromiseObjectID Identifier of the promise.
	PromiseObjectID *RuntimeRemoteObjectID `json:"promiseObjectId"`

	// ReturnByValue Whether the result is expected to be a JSON object that should be sent by value.
	ReturnByValue bool `json:"returnByValue,omitempty"`

	// GeneratePreview Whether preview should be generated for the result.
	GeneratePreview bool `json:"generatePreview,omitempty"`
}

// RuntimeAwaitPromiseResult type
type RuntimeAwaitPromiseResult struct {
	// Result Promise result. Will contain rejected value if promise was rejected.
	Result *RuntimeRemoteObject `json:"result"`

	// ExceptionDetails Exception details if stack strace is available.
	ExceptionDetails *RuntimeExceptionDetails `json:"exceptionDetails,omitempty"`
}

// Call of the command, sessionID is optional.
func (m RuntimeAwaitPromise) Call(c *Call) (*RuntimeAwaitPromiseResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "RuntimeAwaitPromise", m)
	if err != nil {
		return nil, err
	}

	var res RuntimeAwaitPromiseResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// RuntimeCallFunctionOn Calls function with given declaration on the given object. Object group of the result is
// inherited from the target object.
type RuntimeCallFunctionOn struct {
	// FunctionDeclaration Declaration of the function to call.
	FunctionDeclaration string `json:"functionDeclaration"`

	// ObjectID Identifier of the object to call function on. Either objectId or executionContextId should
	// be specified.
	ObjectID *RuntimeRemoteObjectID `json:"objectId,omitempty"`

	// Arguments Call arguments. All call arguments must belong to the same JavaScript world as the target
	// object.
	Arguments []*RuntimeCallArgument `json:"arguments,omitempty"`

	// Silent In silent mode exceptions thrown during evaluation are not reported and do not pause
	// execution. Overrides `setPauseOnException` state.
	Silent bool `json:"silent,omitempty"`

	// ReturnByValue Whether the result is expected to be a JSON object which should be sent by value.
	ReturnByValue bool `json:"returnByValue,omitempty"`

	// GeneratePreview (experimental) Whether preview should be generated for the result.
	GeneratePreview bool `json:"generatePreview,omitempty"`

	// UserGesture Whether execution should be treated as initiated by user in the UI.
	UserGesture bool `json:"userGesture,omitempty"`

	// AwaitPromise Whether execution should `await` for resulting value and return once awaited promise is
	// resolved.
	AwaitPromise bool `json:"awaitPromise,omitempty"`

	// ExecutionContextID Specifies execution context which global object will be used to call function on. Either
	// executionContextId or objectId should be specified.
	ExecutionContextID *RuntimeExecutionContextID `json:"executionContextId,omitempty"`

	// ObjectGroup Symbolic group name that can be used to release multiple objects. If objectGroup is not
	// specified and objectId is, objectGroup will be inherited from object.
	ObjectGroup string `json:"objectGroup,omitempty"`
}

// RuntimeCallFunctionOnResult type
type RuntimeCallFunctionOnResult struct {
	// Result Call result.
	Result *RuntimeRemoteObject `json:"result"`

	// ExceptionDetails Exception details.
	ExceptionDetails *RuntimeExceptionDetails `json:"exceptionDetails,omitempty"`
}

// Call of the command, sessionID is optional.
func (m RuntimeCallFunctionOn) Call(c *Call) (*RuntimeCallFunctionOnResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "RuntimeCallFunctionOn", m)
	if err != nil {
		return nil, err
	}

	var res RuntimeCallFunctionOnResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// RuntimeCompileScript Compiles expression.
type RuntimeCompileScript struct {
	// Expression Expression to compile.
	Expression string `json:"expression"`

	// SourceURL Source url to be set for the script.
	SourceURL string `json:"sourceURL"`

	// PersistScript Specifies whether the compiled script should be persisted.
	PersistScript bool `json:"persistScript"`

	// ExecutionContextID Specifies in which execution context to perform script run. If the parameter is omitted the
	// evaluation will be performed in the context of the inspected page.
	ExecutionContextID *RuntimeExecutionContextID `json:"executionContextId,omitempty"`
}

// RuntimeCompileScriptResult type
type RuntimeCompileScriptResult struct {
	// ScriptID Id of the script.
	ScriptID *RuntimeScriptID `json:"scriptId,omitempty"`

	// ExceptionDetails Exception details.
	ExceptionDetails *RuntimeExceptionDetails `json:"exceptionDetails,omitempty"`
}

// Call of the command, sessionID is optional.
func (m RuntimeCompileScript) Call(c *Call) (*RuntimeCompileScriptResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "RuntimeCompileScript", m)
	if err != nil {
		return nil, err
	}

	var res RuntimeCompileScriptResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// RuntimeDisable Disables reporting of execution contexts creation.
type RuntimeDisable struct {
}

// RuntimeDisableResult type
type RuntimeDisableResult struct {
}

// Call of the command, sessionID is optional.
func (m RuntimeDisable) Call(c *Call) (*RuntimeDisableResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "RuntimeDisable", m)
	if err != nil {
		return nil, err
	}

	var res RuntimeDisableResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// RuntimeDiscardConsoleEntries Discards collected exceptions and console API calls.
type RuntimeDiscardConsoleEntries struct {
}

// RuntimeDiscardConsoleEntriesResult type
type RuntimeDiscardConsoleEntriesResult struct {
}

// Call of the command, sessionID is optional.
func (m RuntimeDiscardConsoleEntries) Call(c *Call) (*RuntimeDiscardConsoleEntriesResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "RuntimeDiscardConsoleEntries", m)
	if err != nil {
		return nil, err
	}

	var res RuntimeDiscardConsoleEntriesResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// RuntimeEnable Enables reporting of execution contexts creation by means of `executionContextCreated` event.
// When the reporting gets enabled the event will be sent immediately for each existing execution
// context.
type RuntimeEnable struct {
}

// RuntimeEnableResult type
type RuntimeEnableResult struct {
}

// Call of the command, sessionID is optional.
func (m RuntimeEnable) Call(c *Call) (*RuntimeEnableResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "RuntimeEnable", m)
	if err != nil {
		return nil, err
	}

	var res RuntimeEnableResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// RuntimeEvaluate Evaluates expression on global object.
type RuntimeEvaluate struct {
	// Expression Expression to evaluate.
	Expression string `json:"expression"`

	// ObjectGroup Symbolic group name that can be used to release multiple objects.
	ObjectGroup string `json:"objectGroup,omitempty"`

	// IncludeCommandLineAPI Determines whether Command Line API should be available during the evaluation.
	IncludeCommandLineAPI bool `json:"includeCommandLineAPI,omitempty"`

	// Silent In silent mode exceptions thrown during evaluation are not reported and do not pause
	// execution. Overrides `setPauseOnException` state.
	Silent bool `json:"silent,omitempty"`

	// ContextID Specifies in which execution context to perform evaluation. If the parameter is omitted the
	// evaluation will be performed in the context of the inspected page.
	ContextID *RuntimeExecutionContextID `json:"contextId,omitempty"`

	// ReturnByValue Whether the result is expected to be a JSON object that should be sent by value.
	ReturnByValue bool `json:"returnByValue,omitempty"`

	// GeneratePreview (experimental) Whether preview should be generated for the result.
	GeneratePreview bool `json:"generatePreview,omitempty"`

	// UserGesture Whether execution should be treated as initiated by user in the UI.
	UserGesture bool `json:"userGesture,omitempty"`

	// AwaitPromise Whether execution should `await` for resulting value and return once awaited promise is
	// resolved.
	AwaitPromise bool `json:"awaitPromise,omitempty"`

	// ThrowOnSideEffect (experimental) Whether to throw an exception if side effect cannot be ruled out during evaluation.
	// This implies `disableBreaks` below.
	ThrowOnSideEffect bool `json:"throwOnSideEffect,omitempty"`

	// Timeout (experimental) Terminate execution after timing out (number of milliseconds).
	Timeout *RuntimeTimeDelta `json:"timeout,omitempty"`

	// DisableBreaks (experimental) Disable breakpoints during execution.
	DisableBreaks bool `json:"disableBreaks,omitempty"`

	// ReplMode (experimental) Reserved flag for future REPL mode support. Setting this flag has currently no effect.
	ReplMode bool `json:"replMode,omitempty"`
}

// RuntimeEvaluateResult type
type RuntimeEvaluateResult struct {
	// Result Evaluation result.
	Result *RuntimeRemoteObject `json:"result"`

	// ExceptionDetails Exception details.
	ExceptionDetails *RuntimeExceptionDetails `json:"exceptionDetails,omitempty"`
}

// Call of the command, sessionID is optional.
func (m RuntimeEvaluate) Call(c *Call) (*RuntimeEvaluateResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "RuntimeEvaluate", m)
	if err != nil {
		return nil, err
	}

	var res RuntimeEvaluateResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// RuntimeGetIsolateID (experimental) Returns the isolate id.
type RuntimeGetIsolateID struct {
}

// RuntimeGetIsolateIDResult type
type RuntimeGetIsolateIDResult struct {
	// ID The isolate id.
	ID string `json:"id"`
}

// Call of the command, sessionID is optional.
func (m RuntimeGetIsolateID) Call(c *Call) (*RuntimeGetIsolateIDResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "RuntimeGetIsolateID", m)
	if err != nil {
		return nil, err
	}

	var res RuntimeGetIsolateIDResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// RuntimeGetHeapUsage (experimental) Returns the JavaScript heap usage.
// It is the total usage of the corresponding isolate not scoped to a particular Runtime.
type RuntimeGetHeapUsage struct {
}

// RuntimeGetHeapUsageResult type
type RuntimeGetHeapUsageResult struct {
	// UsedSize Used heap size in bytes.
	UsedSize float64 `json:"usedSize"`

	// TotalSize Allocated heap size in bytes.
	TotalSize float64 `json:"totalSize"`
}

// Call of the command, sessionID is optional.
func (m RuntimeGetHeapUsage) Call(c *Call) (*RuntimeGetHeapUsageResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "RuntimeGetHeapUsage", m)
	if err != nil {
		return nil, err
	}

	var res RuntimeGetHeapUsageResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// RuntimeGetProperties Returns properties of a given object. Object group of the result is inherited from the target
// object.
type RuntimeGetProperties struct {
	// ObjectID Identifier of the object to return properties for.
	ObjectID *RuntimeRemoteObjectID `json:"objectId"`

	// OwnProperties If true, returns properties belonging only to the element itself, not to its prototype
	// chain.
	OwnProperties bool `json:"ownProperties,omitempty"`

	// AccessorPropertiesOnly (experimental) If true, returns accessor properties (with getter/setter) only; internal properties are not
	// returned either.
	AccessorPropertiesOnly bool `json:"accessorPropertiesOnly,omitempty"`

	// GeneratePreview (experimental) Whether preview should be generated for the results.
	GeneratePreview bool `json:"generatePreview,omitempty"`
}

// RuntimeGetPropertiesResult type
type RuntimeGetPropertiesResult struct {
	// Result Object properties.
	Result []*RuntimePropertyDescriptor `json:"result"`

	// InternalProperties Internal object properties (only of the element itself).
	InternalProperties []*RuntimeInternalPropertyDescriptor `json:"internalProperties,omitempty"`

	// PrivateProperties (experimental) Object private properties.
	PrivateProperties []*RuntimePrivatePropertyDescriptor `json:"privateProperties,omitempty"`

	// ExceptionDetails Exception details.
	ExceptionDetails *RuntimeExceptionDetails `json:"exceptionDetails,omitempty"`
}

// Call of the command, sessionID is optional.
func (m RuntimeGetProperties) Call(c *Call) (*RuntimeGetPropertiesResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "RuntimeGetProperties", m)
	if err != nil {
		return nil, err
	}

	var res RuntimeGetPropertiesResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// RuntimeGlobalLexicalScopeNames Returns all let, const and class variables from global scope.
type RuntimeGlobalLexicalScopeNames struct {
	// ExecutionContextID Specifies in which execution context to lookup global scope variables.
	ExecutionContextID *RuntimeExecutionContextID `json:"executionContextId,omitempty"`
}

// RuntimeGlobalLexicalScopeNamesResult type
type RuntimeGlobalLexicalScopeNamesResult struct {
	// Names ...
	Names []string `json:"names"`
}

// Call of the command, sessionID is optional.
func (m RuntimeGlobalLexicalScopeNames) Call(c *Call) (*RuntimeGlobalLexicalScopeNamesResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "RuntimeGlobalLexicalScopeNames", m)
	if err != nil {
		return nil, err
	}

	var res RuntimeGlobalLexicalScopeNamesResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// RuntimeQueryObjects ...
type RuntimeQueryObjects struct {
	// PrototypeObjectID Identifier of the prototype to return objects for.
	PrototypeObjectID *RuntimeRemoteObjectID `json:"prototypeObjectId"`

	// ObjectGroup Symbolic group name that can be used to release the results.
	ObjectGroup string `json:"objectGroup,omitempty"`
}

// RuntimeQueryObjectsResult type
type RuntimeQueryObjectsResult struct {
	// Objects Array with objects.
	Objects *RuntimeRemoteObject `json:"objects"`
}

// Call of the command, sessionID is optional.
func (m RuntimeQueryObjects) Call(c *Call) (*RuntimeQueryObjectsResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "RuntimeQueryObjects", m)
	if err != nil {
		return nil, err
	}

	var res RuntimeQueryObjectsResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// RuntimeReleaseObject Releases remote object with given id.
type RuntimeReleaseObject struct {
	// ObjectID Identifier of the object to release.
	ObjectID *RuntimeRemoteObjectID `json:"objectId"`
}

// RuntimeReleaseObjectResult type
type RuntimeReleaseObjectResult struct {
}

// Call of the command, sessionID is optional.
func (m RuntimeReleaseObject) Call(c *Call) (*RuntimeReleaseObjectResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "RuntimeReleaseObject", m)
	if err != nil {
		return nil, err
	}

	var res RuntimeReleaseObjectResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// RuntimeReleaseObjectGroup Releases all remote objects that belong to a given group.
type RuntimeReleaseObjectGroup struct {
	// ObjectGroup Symbolic object group name.
	ObjectGroup string `json:"objectGroup"`
}

// RuntimeReleaseObjectGroupResult type
type RuntimeReleaseObjectGroupResult struct {
}

// Call of the command, sessionID is optional.
func (m RuntimeReleaseObjectGroup) Call(c *Call) (*RuntimeReleaseObjectGroupResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "RuntimeReleaseObjectGroup", m)
	if err != nil {
		return nil, err
	}

	var res RuntimeReleaseObjectGroupResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// RuntimeRunIfWaitingForDebugger Tells inspected instance to run if it was waiting for debugger to attach.
type RuntimeRunIfWaitingForDebugger struct {
}

// RuntimeRunIfWaitingForDebuggerResult type
type RuntimeRunIfWaitingForDebuggerResult struct {
}

// Call of the command, sessionID is optional.
func (m RuntimeRunIfWaitingForDebugger) Call(c *Call) (*RuntimeRunIfWaitingForDebuggerResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "RuntimeRunIfWaitingForDebugger", m)
	if err != nil {
		return nil, err
	}

	var res RuntimeRunIfWaitingForDebuggerResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// RuntimeRunScript Runs script with given id in a given context.
type RuntimeRunScript struct {
	// ScriptID Id of the script to run.
	ScriptID *RuntimeScriptID `json:"scriptId"`

	// ExecutionContextID Specifies in which execution context to perform script run. If the parameter is omitted the
	// evaluation will be performed in the context of the inspected page.
	ExecutionContextID *RuntimeExecutionContextID `json:"executionContextId,omitempty"`

	// ObjectGroup Symbolic group name that can be used to release multiple objects.
	ObjectGroup string `json:"objectGroup,omitempty"`

	// Silent In silent mode exceptions thrown during evaluation are not reported and do not pause
	// execution. Overrides `setPauseOnException` state.
	Silent bool `json:"silent,omitempty"`

	// IncludeCommandLineAPI Determines whether Command Line API should be available during the evaluation.
	IncludeCommandLineAPI bool `json:"includeCommandLineAPI,omitempty"`

	// ReturnByValue Whether the result is expected to be a JSON object which should be sent by value.
	ReturnByValue bool `json:"returnByValue,omitempty"`

	// GeneratePreview Whether preview should be generated for the result.
	GeneratePreview bool `json:"generatePreview,omitempty"`

	// AwaitPromise Whether execution should `await` for resulting value and return once awaited promise is
	// resolved.
	AwaitPromise bool `json:"awaitPromise,omitempty"`
}

// RuntimeRunScriptResult type
type RuntimeRunScriptResult struct {
	// Result Run result.
	Result *RuntimeRemoteObject `json:"result"`

	// ExceptionDetails Exception details.
	ExceptionDetails *RuntimeExceptionDetails `json:"exceptionDetails,omitempty"`
}

// Call of the command, sessionID is optional.
func (m RuntimeRunScript) Call(c *Call) (*RuntimeRunScriptResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "RuntimeRunScript", m)
	if err != nil {
		return nil, err
	}

	var res RuntimeRunScriptResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// RuntimeSetAsyncCallStackDepth Enables or disables async call stacks tracking.
type RuntimeSetAsyncCallStackDepth struct {
	// MaxDepth Maximum depth of async call stacks. Setting to `0` will effectively disable collecting async
	// call stacks (default).
	MaxDepth int64 `json:"maxDepth"`
}

// RuntimeSetAsyncCallStackDepthResult type
type RuntimeSetAsyncCallStackDepthResult struct {
}

// Call of the command, sessionID is optional.
func (m RuntimeSetAsyncCallStackDepth) Call(c *Call) (*RuntimeSetAsyncCallStackDepthResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "RuntimeSetAsyncCallStackDepth", m)
	if err != nil {
		return nil, err
	}

	var res RuntimeSetAsyncCallStackDepthResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// RuntimeSetCustomObjectFormatterEnabled (experimental) ...
type RuntimeSetCustomObjectFormatterEnabled struct {
	// Enabled ...
	Enabled bool `json:"enabled"`
}

// RuntimeSetCustomObjectFormatterEnabledResult type
type RuntimeSetCustomObjectFormatterEnabledResult struct {
}

// Call of the command, sessionID is optional.
func (m RuntimeSetCustomObjectFormatterEnabled) Call(c *Call) (*RuntimeSetCustomObjectFormatterEnabledResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "RuntimeSetCustomObjectFormatterEnabled", m)
	if err != nil {
		return nil, err
	}

	var res RuntimeSetCustomObjectFormatterEnabledResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// RuntimeSetMaxCallStackSizeToCapture (experimental) ...
type RuntimeSetMaxCallStackSizeToCapture struct {
	// Size ...
	Size int64 `json:"size"`
}

// RuntimeSetMaxCallStackSizeToCaptureResult type
type RuntimeSetMaxCallStackSizeToCaptureResult struct {
}

// Call of the command, sessionID is optional.
func (m RuntimeSetMaxCallStackSizeToCapture) Call(c *Call) (*RuntimeSetMaxCallStackSizeToCaptureResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "RuntimeSetMaxCallStackSizeToCapture", m)
	if err != nil {
		return nil, err
	}

	var res RuntimeSetMaxCallStackSizeToCaptureResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// RuntimeTerminateExecution (experimental) Terminate current or next JavaScript execution.
// Will cancel the termination when the outer-most script execution ends.
type RuntimeTerminateExecution struct {
}

// RuntimeTerminateExecutionResult type
type RuntimeTerminateExecutionResult struct {
}

// Call of the command, sessionID is optional.
func (m RuntimeTerminateExecution) Call(c *Call) (*RuntimeTerminateExecutionResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "RuntimeTerminateExecution", m)
	if err != nil {
		return nil, err
	}

	var res RuntimeTerminateExecutionResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// RuntimeAddBinding (experimental) If executionContextId is empty, adds binding with the given name on the
// global objects of all inspected contexts, including those created later,
// bindings survive reloads.
// If executionContextId is specified, adds binding only on global object of
// given execution context.
// Binding function takes exactly one argument, this argument should be string,
// in case of any other input, function throws an exception.
// Each binding function call produces Runtime.bindingCalled notification.
type RuntimeAddBinding struct {
	// Name ...
	Name string `json:"name"`

	// ExecutionContextID ...
	ExecutionContextID *RuntimeExecutionContextID `json:"executionContextId,omitempty"`
}

// RuntimeAddBindingResult type
type RuntimeAddBindingResult struct {
}

// Call of the command, sessionID is optional.
func (m RuntimeAddBinding) Call(c *Call) (*RuntimeAddBindingResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "RuntimeAddBinding", m)
	if err != nil {
		return nil, err
	}

	var res RuntimeAddBindingResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// RuntimeRemoveBinding (experimental) This method does not remove binding function from global object but
// unsubscribes current runtime agent from Runtime.bindingCalled notifications.
type RuntimeRemoveBinding struct {
	// Name ...
	Name string `json:"name"`
}

// RuntimeRemoveBindingResult type
type RuntimeRemoveBindingResult struct {
}

// Call of the command, sessionID is optional.
func (m RuntimeRemoveBinding) Call(c *Call) (*RuntimeRemoveBindingResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "RuntimeRemoveBinding", m)
	if err != nil {
		return nil, err
	}

	var res RuntimeRemoveBindingResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}
