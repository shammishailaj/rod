// This file is generated by "./lib/proto/cmd/gen"

package proto

import (
	"encoding/json"
)

// DOMDebuggerGetEventListeners Returns event listeners of the given object.
type DOMDebuggerGetEventListeners struct {
	// ObjectID Identifier of the object to return listeners for.
	ObjectID *RuntimeRemoteObjectID `json:"objectId"`

	// Depth The maximum depth at which Node children should be retrieved, defaults to 1. Use -1 for the
	// entire subtree or provide an integer larger than 0.
	Depth int64 `json:"depth,omitempty"`

	// Pierce Whether or not iframes and shadow roots should be traversed when returning the subtree
	// (default is false). Reports listeners for all contexts if pierce is enabled.
	Pierce bool `json:"pierce,omitempty"`
}

// DOMDebuggerGetEventListenersResult type
type DOMDebuggerGetEventListenersResult struct {
	// Listeners Array of relevant listeners.
	Listeners []*DOMDebuggerEventListener `json:"listeners"`
}

// Call of the command, sessionID is optional.
func (m DOMDebuggerGetEventListeners) Call(c *Call) (*DOMDebuggerGetEventListenersResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "DOMDebuggerGetEventListeners", m)
	if err != nil {
		return nil, err
	}

	var res DOMDebuggerGetEventListenersResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// DOMDebuggerRemoveDOMBreakpoint Removes DOM breakpoint that was set using `setDOMBreakpoint`.
type DOMDebuggerRemoveDOMBreakpoint struct {
	// NodeID Identifier of the node to remove breakpoint from.
	NodeID *DOMNodeID `json:"nodeId"`

	// Type Type of the breakpoint to remove.
	Type *DOMDebuggerDOMBreakpointType `json:"type"`
}

// DOMDebuggerRemoveDOMBreakpointResult type
type DOMDebuggerRemoveDOMBreakpointResult struct {
}

// Call of the command, sessionID is optional.
func (m DOMDebuggerRemoveDOMBreakpoint) Call(c *Call) (*DOMDebuggerRemoveDOMBreakpointResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "DOMDebuggerRemoveDOMBreakpoint", m)
	if err != nil {
		return nil, err
	}

	var res DOMDebuggerRemoveDOMBreakpointResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// DOMDebuggerRemoveEventListenerBreakpoint Removes breakpoint on particular DOM event.
type DOMDebuggerRemoveEventListenerBreakpoint struct {
	// EventName Event name.
	EventName string `json:"eventName"`

	// TargetName (experimental) EventTarget interface name.
	TargetName string `json:"targetName,omitempty"`
}

// DOMDebuggerRemoveEventListenerBreakpointResult type
type DOMDebuggerRemoveEventListenerBreakpointResult struct {
}

// Call of the command, sessionID is optional.
func (m DOMDebuggerRemoveEventListenerBreakpoint) Call(c *Call) (*DOMDebuggerRemoveEventListenerBreakpointResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "DOMDebuggerRemoveEventListenerBreakpoint", m)
	if err != nil {
		return nil, err
	}

	var res DOMDebuggerRemoveEventListenerBreakpointResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// DOMDebuggerRemoveInstrumentationBreakpoint (experimental) Removes breakpoint on particular native event.
type DOMDebuggerRemoveInstrumentationBreakpoint struct {
	// EventName Instrumentation name to stop on.
	EventName string `json:"eventName"`
}

// DOMDebuggerRemoveInstrumentationBreakpointResult type
type DOMDebuggerRemoveInstrumentationBreakpointResult struct {
}

// Call of the command, sessionID is optional.
func (m DOMDebuggerRemoveInstrumentationBreakpoint) Call(c *Call) (*DOMDebuggerRemoveInstrumentationBreakpointResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "DOMDebuggerRemoveInstrumentationBreakpoint", m)
	if err != nil {
		return nil, err
	}

	var res DOMDebuggerRemoveInstrumentationBreakpointResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// DOMDebuggerRemoveXHRBreakpoint Removes breakpoint from XMLHttpRequest.
type DOMDebuggerRemoveXHRBreakpoint struct {
	// URL Resource URL substring.
	URL string `json:"url"`
}

// DOMDebuggerRemoveXHRBreakpointResult type
type DOMDebuggerRemoveXHRBreakpointResult struct {
}

// Call of the command, sessionID is optional.
func (m DOMDebuggerRemoveXHRBreakpoint) Call(c *Call) (*DOMDebuggerRemoveXHRBreakpointResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "DOMDebuggerRemoveXHRBreakpoint", m)
	if err != nil {
		return nil, err
	}

	var res DOMDebuggerRemoveXHRBreakpointResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// DOMDebuggerSetDOMBreakpoint Sets breakpoint on particular operation with DOM.
type DOMDebuggerSetDOMBreakpoint struct {
	// NodeID Identifier of the node to set breakpoint on.
	NodeID *DOMNodeID `json:"nodeId"`

	// Type Type of the operation to stop upon.
	Type *DOMDebuggerDOMBreakpointType `json:"type"`
}

// DOMDebuggerSetDOMBreakpointResult type
type DOMDebuggerSetDOMBreakpointResult struct {
}

// Call of the command, sessionID is optional.
func (m DOMDebuggerSetDOMBreakpoint) Call(c *Call) (*DOMDebuggerSetDOMBreakpointResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "DOMDebuggerSetDOMBreakpoint", m)
	if err != nil {
		return nil, err
	}

	var res DOMDebuggerSetDOMBreakpointResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// DOMDebuggerSetEventListenerBreakpoint Sets breakpoint on particular DOM event.
type DOMDebuggerSetEventListenerBreakpoint struct {
	// EventName DOM Event name to stop on (any DOM event will do).
	EventName string `json:"eventName"`

	// TargetName (experimental) EventTarget interface name to stop on. If equal to `"*"` or not provided, will stop on any
	// EventTarget.
	TargetName string `json:"targetName,omitempty"`
}

// DOMDebuggerSetEventListenerBreakpointResult type
type DOMDebuggerSetEventListenerBreakpointResult struct {
}

// Call of the command, sessionID is optional.
func (m DOMDebuggerSetEventListenerBreakpoint) Call(c *Call) (*DOMDebuggerSetEventListenerBreakpointResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "DOMDebuggerSetEventListenerBreakpoint", m)
	if err != nil {
		return nil, err
	}

	var res DOMDebuggerSetEventListenerBreakpointResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// DOMDebuggerSetInstrumentationBreakpoint (experimental) Sets breakpoint on particular native event.
type DOMDebuggerSetInstrumentationBreakpoint struct {
	// EventName Instrumentation name to stop on.
	EventName string `json:"eventName"`
}

// DOMDebuggerSetInstrumentationBreakpointResult type
type DOMDebuggerSetInstrumentationBreakpointResult struct {
}

// Call of the command, sessionID is optional.
func (m DOMDebuggerSetInstrumentationBreakpoint) Call(c *Call) (*DOMDebuggerSetInstrumentationBreakpointResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "DOMDebuggerSetInstrumentationBreakpoint", m)
	if err != nil {
		return nil, err
	}

	var res DOMDebuggerSetInstrumentationBreakpointResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// DOMDebuggerSetXHRBreakpoint Sets breakpoint on XMLHttpRequest.
type DOMDebuggerSetXHRBreakpoint struct {
	// URL Resource URL substring. All XHRs having this substring in the URL will get stopped upon.
	URL string `json:"url"`
}

// DOMDebuggerSetXHRBreakpointResult type
type DOMDebuggerSetXHRBreakpointResult struct {
}

// Call of the command, sessionID is optional.
func (m DOMDebuggerSetXHRBreakpoint) Call(c *Call) (*DOMDebuggerSetXHRBreakpointResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "DOMDebuggerSetXHRBreakpoint", m)
	if err != nil {
		return nil, err
	}

	var res DOMDebuggerSetXHRBreakpointResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}
