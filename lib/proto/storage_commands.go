// This file is generated by "./lib/proto/cmd/gen"

package proto

import (
	"encoding/json"
)

// StorageClearDataForOrigin Clears storage for origin.
type StorageClearDataForOrigin struct {
	// Origin Security origin.
	Origin string `json:"origin"`

	// StorageTypes Comma separated list of StorageType to clear.
	StorageTypes string `json:"storageTypes"`
}

// StorageClearDataForOriginResult type
type StorageClearDataForOriginResult struct {
}

// Call of the command, sessionID is optional.
func (m StorageClearDataForOrigin) Call(c *Call) (*StorageClearDataForOriginResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "StorageClearDataForOrigin", m)
	if err != nil {
		return nil, err
	}

	var res StorageClearDataForOriginResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// StorageGetCookies Returns all browser cookies.
type StorageGetCookies struct {
	// BrowserContextID Browser context to use when called on the browser endpoint.
	BrowserContextID *BrowserBrowserContextID `json:"browserContextId,omitempty"`
}

// StorageGetCookiesResult type
type StorageGetCookiesResult struct {
	// Cookies Array of cookie objects.
	Cookies []*NetworkCookie `json:"cookies"`
}

// Call of the command, sessionID is optional.
func (m StorageGetCookies) Call(c *Call) (*StorageGetCookiesResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "StorageGetCookies", m)
	if err != nil {
		return nil, err
	}

	var res StorageGetCookiesResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// StorageSetCookies Sets given cookies.
type StorageSetCookies struct {
	// Cookies Cookies to be set.
	Cookies []*NetworkCookieParam `json:"cookies"`

	// BrowserContextID Browser context to use when called on the browser endpoint.
	BrowserContextID *BrowserBrowserContextID `json:"browserContextId,omitempty"`
}

// StorageSetCookiesResult type
type StorageSetCookiesResult struct {
}

// Call of the command, sessionID is optional.
func (m StorageSetCookies) Call(c *Call) (*StorageSetCookiesResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "StorageSetCookies", m)
	if err != nil {
		return nil, err
	}

	var res StorageSetCookiesResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// StorageClearCookies Clears cookies.
type StorageClearCookies struct {
	// BrowserContextID Browser context to use when called on the browser endpoint.
	BrowserContextID *BrowserBrowserContextID `json:"browserContextId,omitempty"`
}

// StorageClearCookiesResult type
type StorageClearCookiesResult struct {
}

// Call of the command, sessionID is optional.
func (m StorageClearCookies) Call(c *Call) (*StorageClearCookiesResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "StorageClearCookies", m)
	if err != nil {
		return nil, err
	}

	var res StorageClearCookiesResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// StorageGetUsageAndQuota Returns usage and quota in bytes.
type StorageGetUsageAndQuota struct {
	// Origin Security origin.
	Origin string `json:"origin"`
}

// StorageGetUsageAndQuotaResult type
type StorageGetUsageAndQuotaResult struct {
	// Usage Storage usage (bytes).
	Usage float64 `json:"usage"`

	// Quota Storage quota (bytes).
	Quota float64 `json:"quota"`

	// UsageBreakdown Storage usage per type (bytes).
	UsageBreakdown []*StorageUsageForType `json:"usageBreakdown"`
}

// Call of the command, sessionID is optional.
func (m StorageGetUsageAndQuota) Call(c *Call) (*StorageGetUsageAndQuotaResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "StorageGetUsageAndQuota", m)
	if err != nil {
		return nil, err
	}

	var res StorageGetUsageAndQuotaResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// StorageTrackCacheStorageForOrigin Registers origin to be notified when an update occurs to its cache storage list.
type StorageTrackCacheStorageForOrigin struct {
	// Origin Security origin.
	Origin string `json:"origin"`
}

// StorageTrackCacheStorageForOriginResult type
type StorageTrackCacheStorageForOriginResult struct {
}

// Call of the command, sessionID is optional.
func (m StorageTrackCacheStorageForOrigin) Call(c *Call) (*StorageTrackCacheStorageForOriginResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "StorageTrackCacheStorageForOrigin", m)
	if err != nil {
		return nil, err
	}

	var res StorageTrackCacheStorageForOriginResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// StorageTrackIndexedDBForOrigin Registers origin to be notified when an update occurs to its IndexedDB.
type StorageTrackIndexedDBForOrigin struct {
	// Origin Security origin.
	Origin string `json:"origin"`
}

// StorageTrackIndexedDBForOriginResult type
type StorageTrackIndexedDBForOriginResult struct {
}

// Call of the command, sessionID is optional.
func (m StorageTrackIndexedDBForOrigin) Call(c *Call) (*StorageTrackIndexedDBForOriginResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "StorageTrackIndexedDBForOrigin", m)
	if err != nil {
		return nil, err
	}

	var res StorageTrackIndexedDBForOriginResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// StorageUntrackCacheStorageForOrigin Unregisters origin from receiving notifications for cache storage.
type StorageUntrackCacheStorageForOrigin struct {
	// Origin Security origin.
	Origin string `json:"origin"`
}

// StorageUntrackCacheStorageForOriginResult type
type StorageUntrackCacheStorageForOriginResult struct {
}

// Call of the command, sessionID is optional.
func (m StorageUntrackCacheStorageForOrigin) Call(c *Call) (*StorageUntrackCacheStorageForOriginResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "StorageUntrackCacheStorageForOrigin", m)
	if err != nil {
		return nil, err
	}

	var res StorageUntrackCacheStorageForOriginResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// StorageUntrackIndexedDBForOrigin Unregisters origin from receiving notifications for IndexedDB.
type StorageUntrackIndexedDBForOrigin struct {
	// Origin Security origin.
	Origin string `json:"origin"`
}

// StorageUntrackIndexedDBForOriginResult type
type StorageUntrackIndexedDBForOriginResult struct {
}

// Call of the command, sessionID is optional.
func (m StorageUntrackIndexedDBForOrigin) Call(c *Call) (*StorageUntrackIndexedDBForOriginResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "StorageUntrackIndexedDBForOrigin", m)
	if err != nil {
		return nil, err
	}

	var res StorageUntrackIndexedDBForOriginResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}
