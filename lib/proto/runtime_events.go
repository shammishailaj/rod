// This file is generated by "./lib/proto/cmd/gen"

package proto

import "encoding/json"

// RuntimeBindingCalled (experimental) Notification is issued every time when binding is called.
type RuntimeBindingCalled struct {
	// Name ...
	Name string `json:"name"`

	// Payload ...
	Payload string `json:"payload"`

	// ExecutionContextID Identifier of the context where the call was made.
	ExecutionContextID *RuntimeExecutionContextID `json:"executionContextId"`
}

// MethodName interface
func (evt RuntimeBindingCalled) MethodName() string {
	return "Runtime.bindingCalled"
}

// Load json
func (evt RuntimeBindingCalled) Load(b []byte) *RuntimeBindingCalled {
	E(json.Unmarshal(b, &evt))
	return &evt
}

// RuntimeConsoleAPICalled Issued when console API was called.
type RuntimeConsoleAPICalled struct {
	// Type Type of the call.
	Type string `json:"type"`

	// Args Call arguments.
	Args []*RuntimeRemoteObject `json:"args"`

	// ExecutionContextID Identifier of the context where the call was made.
	ExecutionContextID *RuntimeExecutionContextID `json:"executionContextId"`

	// Timestamp Call timestamp.
	Timestamp *RuntimeTimestamp `json:"timestamp"`

	// StackTrace Stack trace captured when the call was made. The async stack chain is automatically reported for
	// the following call types: `assert`, `error`, `trace`, `warning`. For other types the async call
	// chain can be retrieved using `Debugger.getStackTrace` and `stackTrace.parentId` field.
	StackTrace *RuntimeStackTrace `json:"stackTrace,omitempty"`

	// Context (experimental) Console context descriptor for calls on non-default console context (not console.*):
	// 'anonymous#unique-logger-id' for call on unnamed context, 'name#unique-logger-id' for call
	// on named context.
	Context string `json:"context,omitempty"`
}

// MethodName interface
func (evt RuntimeConsoleAPICalled) MethodName() string {
	return "Runtime.consoleAPICalled"
}

// Load json
func (evt RuntimeConsoleAPICalled) Load(b []byte) *RuntimeConsoleAPICalled {
	E(json.Unmarshal(b, &evt))
	return &evt
}

// RuntimeExceptionRevoked Issued when unhandled exception was revoked.
type RuntimeExceptionRevoked struct {
	// Reason Reason describing why exception was revoked.
	Reason string `json:"reason"`

	// ExceptionID The id of revoked exception, as reported in `exceptionThrown`.
	ExceptionID int64 `json:"exceptionId"`
}

// MethodName interface
func (evt RuntimeExceptionRevoked) MethodName() string {
	return "Runtime.exceptionRevoked"
}

// Load json
func (evt RuntimeExceptionRevoked) Load(b []byte) *RuntimeExceptionRevoked {
	E(json.Unmarshal(b, &evt))
	return &evt
}

// RuntimeExceptionThrown Issued when exception was thrown and unhandled.
type RuntimeExceptionThrown struct {
	// Timestamp Timestamp of the exception.
	Timestamp *RuntimeTimestamp `json:"timestamp"`

	// ExceptionDetails ...
	ExceptionDetails *RuntimeExceptionDetails `json:"exceptionDetails"`
}

// MethodName interface
func (evt RuntimeExceptionThrown) MethodName() string {
	return "Runtime.exceptionThrown"
}

// Load json
func (evt RuntimeExceptionThrown) Load(b []byte) *RuntimeExceptionThrown {
	E(json.Unmarshal(b, &evt))
	return &evt
}

// RuntimeExecutionContextCreated Issued when new execution context is created.
type RuntimeExecutionContextCreated struct {
	// Context A newly created execution context.
	Context *RuntimeExecutionContextDescription `json:"context"`
}

// MethodName interface
func (evt RuntimeExecutionContextCreated) MethodName() string {
	return "Runtime.executionContextCreated"
}

// Load json
func (evt RuntimeExecutionContextCreated) Load(b []byte) *RuntimeExecutionContextCreated {
	E(json.Unmarshal(b, &evt))
	return &evt
}

// RuntimeExecutionContextDestroyed Issued when execution context is destroyed.
type RuntimeExecutionContextDestroyed struct {
	// ExecutionContextID Id of the destroyed context
	ExecutionContextID *RuntimeExecutionContextID `json:"executionContextId"`
}

// MethodName interface
func (evt RuntimeExecutionContextDestroyed) MethodName() string {
	return "Runtime.executionContextDestroyed"
}

// Load json
func (evt RuntimeExecutionContextDestroyed) Load(b []byte) *RuntimeExecutionContextDestroyed {
	E(json.Unmarshal(b, &evt))
	return &evt
}

// RuntimeExecutionContextsCleared Issued when all executionContexts were cleared in browser
type RuntimeExecutionContextsCleared struct {
}

// MethodName interface
func (evt RuntimeExecutionContextsCleared) MethodName() string {
	return "Runtime.executionContextsCleared"
}

// Load json
func (evt RuntimeExecutionContextsCleared) Load(b []byte) *RuntimeExecutionContextsCleared {
	E(json.Unmarshal(b, &evt))
	return &evt
}

// RuntimeInspectRequested Issued when object should be inspected (for example, as a result of inspect() command line API
// call).
type RuntimeInspectRequested struct {
	// Object ...
	Object *RuntimeRemoteObject `json:"object"`

	// Hints ...
	Hints map[string]interface{} `json:"hints"`
}

// MethodName interface
func (evt RuntimeInspectRequested) MethodName() string {
	return "Runtime.inspectRequested"
}

// Load json
func (evt RuntimeInspectRequested) Load(b []byte) *RuntimeInspectRequested {
	E(json.Unmarshal(b, &evt))
	return &evt
}
