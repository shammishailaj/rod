// This file is generated by "./lib/proto/cmd/gen"

package proto

import (
	"encoding/json"
)

// ConsoleClearMessages Does nothing.
type ConsoleClearMessages struct {
}

// ConsoleClearMessagesResult type
type ConsoleClearMessagesResult struct {
}

// Call of the command, sessionID is optional.
func (m ConsoleClearMessages) Call(c *Call) (*ConsoleClearMessagesResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "ConsoleClearMessages", m)
	if err != nil {
		return nil, err
	}

	var res ConsoleClearMessagesResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// ConsoleDisable Disables console domain, prevents further console messages from being reported to the client.
type ConsoleDisable struct {
}

// ConsoleDisableResult type
type ConsoleDisableResult struct {
}

// Call of the command, sessionID is optional.
func (m ConsoleDisable) Call(c *Call) (*ConsoleDisableResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "ConsoleDisable", m)
	if err != nil {
		return nil, err
	}

	var res ConsoleDisableResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// ConsoleEnable Enables console domain, sends the messages collected so far to the client by means of the
// `messageAdded` notification.
type ConsoleEnable struct {
}

// ConsoleEnableResult type
type ConsoleEnableResult struct {
}

// Call of the command, sessionID is optional.
func (m ConsoleEnable) Call(c *Call) (*ConsoleEnableResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "ConsoleEnable", m)
	if err != nil {
		return nil, err
	}

	var res ConsoleEnableResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}
