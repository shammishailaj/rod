// This file is generated by "./lib/proto/cmd/gen"

package proto

import (
	"encoding/json"
)

// CastEnable Starts observing for sinks that can be used for tab mirroring, and if set,
// sinks compatible with |presentationUrl| as well. When sinks are found, a
// |sinksUpdated| event is fired.
// Also starts observing for issue messages. When an issue is added or removed,
// an |issueUpdated| event is fired.
type CastEnable struct {
	// PresentationURL ...
	PresentationURL string `json:"presentationUrl,omitempty"`
}

// CastEnableResult type
type CastEnableResult struct {
}

// Call of the command, sessionID is optional.
func (m CastEnable) Call(c *Call) (*CastEnableResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "CastEnable", m)
	if err != nil {
		return nil, err
	}

	var res CastEnableResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// CastDisable Stops observing for sinks and issues.
type CastDisable struct {
}

// CastDisableResult type
type CastDisableResult struct {
}

// Call of the command, sessionID is optional.
func (m CastDisable) Call(c *Call) (*CastDisableResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "CastDisable", m)
	if err != nil {
		return nil, err
	}

	var res CastDisableResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// CastSetSinkToUse Sets a sink to be used when the web page requests the browser to choose a
// sink via Presentation API, Remote Playback API, or Cast SDK.
type CastSetSinkToUse struct {
	// SinkName ...
	SinkName string `json:"sinkName"`
}

// CastSetSinkToUseResult type
type CastSetSinkToUseResult struct {
}

// Call of the command, sessionID is optional.
func (m CastSetSinkToUse) Call(c *Call) (*CastSetSinkToUseResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "CastSetSinkToUse", m)
	if err != nil {
		return nil, err
	}

	var res CastSetSinkToUseResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// CastStartTabMirroring Starts mirroring the tab to the sink.
type CastStartTabMirroring struct {
	// SinkName ...
	SinkName string `json:"sinkName"`
}

// CastStartTabMirroringResult type
type CastStartTabMirroringResult struct {
}

// Call of the command, sessionID is optional.
func (m CastStartTabMirroring) Call(c *Call) (*CastStartTabMirroringResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "CastStartTabMirroring", m)
	if err != nil {
		return nil, err
	}

	var res CastStartTabMirroringResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// CastStopCasting Stops the active Cast session on the sink.
type CastStopCasting struct {
	// SinkName ...
	SinkName string `json:"sinkName"`
}

// CastStopCastingResult type
type CastStopCastingResult struct {
}

// Call of the command, sessionID is optional.
func (m CastStopCasting) Call(c *Call) (*CastStopCastingResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "CastStopCasting", m)
	if err != nil {
		return nil, err
	}

	var res CastStopCastingResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}
