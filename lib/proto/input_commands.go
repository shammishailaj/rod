// This file is generated by "./lib/proto/cmd/gen"

package proto

import (
	"encoding/json"
)

// InputInputDispatchKeyEventType Enum of possible values
type InputInputDispatchKeyEventType string

const (
	// InputInputDispatchKeyEventTypeKeyDown enum value
	InputInputDispatchKeyEventTypeKeyDown InputInputDispatchKeyEventType = "keyDown"

	// InputInputDispatchKeyEventTypeKeyUp enum value
	InputInputDispatchKeyEventTypeKeyUp InputInputDispatchKeyEventType = "keyUp"

	// InputInputDispatchKeyEventTypeRawKeyDown enum value
	InputInputDispatchKeyEventTypeRawKeyDown InputInputDispatchKeyEventType = "rawKeyDown"

	// InputInputDispatchKeyEventTypeChar enum value
	InputInputDispatchKeyEventTypeChar InputInputDispatchKeyEventType = "char"
)

// InputDispatchKeyEvent Dispatches a key event to the page.
type InputDispatchKeyEvent struct {
	// Type Type of the key event.
	Type InputInputDispatchKeyEventType `json:"type"`

	// Modifiers Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8
	// (default: 0).
	Modifiers int64 `json:"modifiers,omitempty"`

	// Timestamp Time at which the event occurred.
	Timestamp *InputTimeSinceEpoch `json:"timestamp,omitempty"`

	// Text Text as generated by processing a virtual key code with a keyboard layout. Not needed for
	// for `keyUp` and `rawKeyDown` events (default: "")
	Text string `json:"text,omitempty"`

	// UnmodifiedText Text that would have been generated by the keyboard if no modifiers were pressed (except for
	// shift). Useful for shortcut (accelerator) key handling (default: "").
	UnmodifiedText string `json:"unmodifiedText,omitempty"`

	// KeyIdentifier Unique key identifier (e.g., 'U+0041') (default: "").
	KeyIdentifier string `json:"keyIdentifier,omitempty"`

	// Code Unique DOM defined string value for each physical key (e.g., 'KeyA') (default: "").
	Code string `json:"code,omitempty"`

	// Key Unique DOM defined string value describing the meaning of the key in the context of active
	// modifiers, keyboard layout, etc (e.g., 'AltGr') (default: "").
	Key string `json:"key,omitempty"`

	// WindowsVirtualKeyCode Windows virtual key code (default: 0).
	WindowsVirtualKeyCode int64 `json:"windowsVirtualKeyCode,omitempty"`

	// NativeVirtualKeyCode Native virtual key code (default: 0).
	NativeVirtualKeyCode int64 `json:"nativeVirtualKeyCode,omitempty"`

	// AutoRepeat Whether the event was generated from auto repeat (default: false).
	AutoRepeat bool `json:"autoRepeat,omitempty"`

	// IsKeypad Whether the event was generated from the keypad (default: false).
	IsKeypad bool `json:"isKeypad,omitempty"`

	// IsSystemKey Whether the event was a system key event (default: false).
	IsSystemKey bool `json:"isSystemKey,omitempty"`

	// Location Whether the event was from the left or right side of the keyboard. 1=Left, 2=Right (default:
	// 0).
	Location int64 `json:"location,omitempty"`
}

// InputDispatchKeyEventResult type
type InputDispatchKeyEventResult struct {
}

// Call of the command, sessionID is optional.
func (m InputDispatchKeyEvent) Call(c *Call) (*InputDispatchKeyEventResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "InputDispatchKeyEvent", m)
	if err != nil {
		return nil, err
	}

	var res InputDispatchKeyEventResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// InputInsertText (experimental) This method emulates inserting text that doesn't come from a key press,
// for example an emoji keyboard or an IME.
type InputInsertText struct {
	// Text The text to insert.
	Text string `json:"text"`
}

// InputInsertTextResult type
type InputInsertTextResult struct {
}

// Call of the command, sessionID is optional.
func (m InputInsertText) Call(c *Call) (*InputInsertTextResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "InputInsertText", m)
	if err != nil {
		return nil, err
	}

	var res InputInsertTextResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// InputInputDispatchMouseEventType Enum of possible values
type InputInputDispatchMouseEventType string

const (
	// InputInputDispatchMouseEventTypeMousePressed enum value
	InputInputDispatchMouseEventTypeMousePressed InputInputDispatchMouseEventType = "mousePressed"

	// InputInputDispatchMouseEventTypeMouseReleased enum value
	InputInputDispatchMouseEventTypeMouseReleased InputInputDispatchMouseEventType = "mouseReleased"

	// InputInputDispatchMouseEventTypeMouseMoved enum value
	InputInputDispatchMouseEventTypeMouseMoved InputInputDispatchMouseEventType = "mouseMoved"

	// InputInputDispatchMouseEventTypeMouseWheel enum value
	InputInputDispatchMouseEventTypeMouseWheel InputInputDispatchMouseEventType = "mouseWheel"
)

// InputInputDispatchMouseEventPointerType Enum of possible values
type InputInputDispatchMouseEventPointerType string

const (
	// InputInputDispatchMouseEventPointerTypeMouse enum value
	InputInputDispatchMouseEventPointerTypeMouse InputInputDispatchMouseEventPointerType = "mouse"

	// InputInputDispatchMouseEventPointerTypePen enum value
	InputInputDispatchMouseEventPointerTypePen InputInputDispatchMouseEventPointerType = "pen"
)

// InputDispatchMouseEvent Dispatches a mouse event to the page.
type InputDispatchMouseEvent struct {
	// Type Type of the mouse event.
	Type InputInputDispatchMouseEventType `json:"type"`

	// X X coordinate of the event relative to the main frame's viewport in CSS pixels.
	X float64 `json:"x"`

	// Y Y coordinate of the event relative to the main frame's viewport in CSS pixels. 0 refers to
	// the top of the viewport and Y increases as it proceeds towards the bottom of the viewport.
	Y float64 `json:"y"`

	// Modifiers Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8
	// (default: 0).
	Modifiers int64 `json:"modifiers,omitempty"`

	// Timestamp Time at which the event occurred.
	Timestamp *InputTimeSinceEpoch `json:"timestamp,omitempty"`

	// Button Mouse button (default: "none").
	Button *InputMouseButton `json:"button,omitempty"`

	// Buttons A number indicating which buttons are pressed on the mouse when a mouse event is triggered.
	// Left=1, Right=2, Middle=4, Back=8, Forward=16, None=0.
	Buttons int64 `json:"buttons,omitempty"`

	// ClickCount Number of times the mouse button was clicked (default: 0).
	ClickCount int64 `json:"clickCount,omitempty"`

	// DeltaX X delta in CSS pixels for mouse wheel event (default: 0).
	DeltaX float64 `json:"deltaX,omitempty"`

	// DeltaY Y delta in CSS pixels for mouse wheel event (default: 0).
	DeltaY float64 `json:"deltaY,omitempty"`

	// PointerType Pointer type (default: "mouse").
	PointerType InputInputDispatchMouseEventPointerType `json:"pointerType,omitempty"`
}

// InputDispatchMouseEventResult type
type InputDispatchMouseEventResult struct {
}

// Call of the command, sessionID is optional.
func (m InputDispatchMouseEvent) Call(c *Call) (*InputDispatchMouseEventResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "InputDispatchMouseEvent", m)
	if err != nil {
		return nil, err
	}

	var res InputDispatchMouseEventResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// InputInputDispatchTouchEventType Enum of possible values
type InputInputDispatchTouchEventType string

const (
	// InputInputDispatchTouchEventTypeTouchStart enum value
	InputInputDispatchTouchEventTypeTouchStart InputInputDispatchTouchEventType = "touchStart"

	// InputInputDispatchTouchEventTypeTouchEnd enum value
	InputInputDispatchTouchEventTypeTouchEnd InputInputDispatchTouchEventType = "touchEnd"

	// InputInputDispatchTouchEventTypeTouchMove enum value
	InputInputDispatchTouchEventTypeTouchMove InputInputDispatchTouchEventType = "touchMove"

	// InputInputDispatchTouchEventTypeTouchCancel enum value
	InputInputDispatchTouchEventTypeTouchCancel InputInputDispatchTouchEventType = "touchCancel"
)

// InputDispatchTouchEvent Dispatches a touch event to the page.
type InputDispatchTouchEvent struct {
	// Type Type of the touch event. TouchEnd and TouchCancel must not contain any touch points, while
	// TouchStart and TouchMove must contains at least one.
	Type InputInputDispatchTouchEventType `json:"type"`

	// TouchPoints Active touch points on the touch device. One event per any changed point (compared to
	// previous touch event in a sequence) is generated, emulating pressing/moving/releasing points
	// one by one.
	TouchPoints []*InputTouchPoint `json:"touchPoints"`

	// Modifiers Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8
	// (default: 0).
	Modifiers int64 `json:"modifiers,omitempty"`

	// Timestamp Time at which the event occurred.
	Timestamp *InputTimeSinceEpoch `json:"timestamp,omitempty"`
}

// InputDispatchTouchEventResult type
type InputDispatchTouchEventResult struct {
}

// Call of the command, sessionID is optional.
func (m InputDispatchTouchEvent) Call(c *Call) (*InputDispatchTouchEventResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "InputDispatchTouchEvent", m)
	if err != nil {
		return nil, err
	}

	var res InputDispatchTouchEventResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// InputInputEmulateTouchFromMouseEventType Enum of possible values
type InputInputEmulateTouchFromMouseEventType string

const (
	// InputInputEmulateTouchFromMouseEventTypeMousePressed enum value
	InputInputEmulateTouchFromMouseEventTypeMousePressed InputInputEmulateTouchFromMouseEventType = "mousePressed"

	// InputInputEmulateTouchFromMouseEventTypeMouseReleased enum value
	InputInputEmulateTouchFromMouseEventTypeMouseReleased InputInputEmulateTouchFromMouseEventType = "mouseReleased"

	// InputInputEmulateTouchFromMouseEventTypeMouseMoved enum value
	InputInputEmulateTouchFromMouseEventTypeMouseMoved InputInputEmulateTouchFromMouseEventType = "mouseMoved"

	// InputInputEmulateTouchFromMouseEventTypeMouseWheel enum value
	InputInputEmulateTouchFromMouseEventTypeMouseWheel InputInputEmulateTouchFromMouseEventType = "mouseWheel"
)

// InputEmulateTouchFromMouseEvent (experimental) Emulates touch event from the mouse event parameters.
type InputEmulateTouchFromMouseEvent struct {
	// Type Type of the mouse event.
	Type InputInputEmulateTouchFromMouseEventType `json:"type"`

	// X X coordinate of the mouse pointer in DIP.
	X int64 `json:"x"`

	// Y Y coordinate of the mouse pointer in DIP.
	Y int64 `json:"y"`

	// Button Mouse button. Only "none", "left", "right" are supported.
	Button *InputMouseButton `json:"button"`

	// Timestamp Time at which the event occurred (default: current time).
	Timestamp *InputTimeSinceEpoch `json:"timestamp,omitempty"`

	// DeltaX X delta in DIP for mouse wheel event (default: 0).
	DeltaX float64 `json:"deltaX,omitempty"`

	// DeltaY Y delta in DIP for mouse wheel event (default: 0).
	DeltaY float64 `json:"deltaY,omitempty"`

	// Modifiers Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8
	// (default: 0).
	Modifiers int64 `json:"modifiers,omitempty"`

	// ClickCount Number of times the mouse button was clicked (default: 0).
	ClickCount int64 `json:"clickCount,omitempty"`
}

// InputEmulateTouchFromMouseEventResult type
type InputEmulateTouchFromMouseEventResult struct {
}

// Call of the command, sessionID is optional.
func (m InputEmulateTouchFromMouseEvent) Call(c *Call) (*InputEmulateTouchFromMouseEventResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "InputEmulateTouchFromMouseEvent", m)
	if err != nil {
		return nil, err
	}

	var res InputEmulateTouchFromMouseEventResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// InputSetIgnoreInputEvents Ignores input events (useful while auditing page).
type InputSetIgnoreInputEvents struct {
	// Ignore Ignores input events processing when set to true.
	Ignore bool `json:"ignore"`
}

// InputSetIgnoreInputEventsResult type
type InputSetIgnoreInputEventsResult struct {
}

// Call of the command, sessionID is optional.
func (m InputSetIgnoreInputEvents) Call(c *Call) (*InputSetIgnoreInputEventsResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "InputSetIgnoreInputEvents", m)
	if err != nil {
		return nil, err
	}

	var res InputSetIgnoreInputEventsResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// InputSynthesizePinchGesture (experimental) Synthesizes a pinch gesture over a time period by issuing appropriate touch events.
type InputSynthesizePinchGesture struct {
	// X X coordinate of the start of the gesture in CSS pixels.
	X float64 `json:"x"`

	// Y Y coordinate of the start of the gesture in CSS pixels.
	Y float64 `json:"y"`

	// ScaleFactor Relative scale factor after zooming (>1.0 zooms in, <1.0 zooms out).
	ScaleFactor float64 `json:"scaleFactor"`

	// RelativeSpeed Relative pointer speed in pixels per second (default: 800).
	RelativeSpeed int64 `json:"relativeSpeed,omitempty"`

	// GestureSourceType Which type of input events to be generated (default: 'default', which queries the platform
	// for the preferred input type).
	GestureSourceType *InputGestureSourceType `json:"gestureSourceType,omitempty"`
}

// InputSynthesizePinchGestureResult type
type InputSynthesizePinchGestureResult struct {
}

// Call of the command, sessionID is optional.
func (m InputSynthesizePinchGesture) Call(c *Call) (*InputSynthesizePinchGestureResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "InputSynthesizePinchGesture", m)
	if err != nil {
		return nil, err
	}

	var res InputSynthesizePinchGestureResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// InputSynthesizeScrollGesture (experimental) Synthesizes a scroll gesture over a time period by issuing appropriate touch events.
type InputSynthesizeScrollGesture struct {
	// X X coordinate of the start of the gesture in CSS pixels.
	X float64 `json:"x"`

	// Y Y coordinate of the start of the gesture in CSS pixels.
	Y float64 `json:"y"`

	// XDistance The distance to scroll along the X axis (positive to scroll left).
	XDistance float64 `json:"xDistance,omitempty"`

	// YDistance The distance to scroll along the Y axis (positive to scroll up).
	YDistance float64 `json:"yDistance,omitempty"`

	// XOverscroll The number of additional pixels to scroll back along the X axis, in addition to the given
	// distance.
	XOverscroll float64 `json:"xOverscroll,omitempty"`

	// YOverscroll The number of additional pixels to scroll back along the Y axis, in addition to the given
	// distance.
	YOverscroll float64 `json:"yOverscroll,omitempty"`

	// PreventFling Prevent fling (default: true).
	PreventFling bool `json:"preventFling,omitempty"`

	// Speed Swipe speed in pixels per second (default: 800).
	Speed int64 `json:"speed,omitempty"`

	// GestureSourceType Which type of input events to be generated (default: 'default', which queries the platform
	// for the preferred input type).
	GestureSourceType *InputGestureSourceType `json:"gestureSourceType,omitempty"`

	// RepeatCount The number of times to repeat the gesture (default: 0).
	RepeatCount int64 `json:"repeatCount,omitempty"`

	// RepeatDelayMs The number of milliseconds delay between each repeat. (default: 250).
	RepeatDelayMs int64 `json:"repeatDelayMs,omitempty"`

	// InteractionMarkerName The name of the interaction markers to generate, if not empty (default: "").
	InteractionMarkerName string `json:"interactionMarkerName,omitempty"`
}

// InputSynthesizeScrollGestureResult type
type InputSynthesizeScrollGestureResult struct {
}

// Call of the command, sessionID is optional.
func (m InputSynthesizeScrollGesture) Call(c *Call) (*InputSynthesizeScrollGestureResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "InputSynthesizeScrollGesture", m)
	if err != nil {
		return nil, err
	}

	var res InputSynthesizeScrollGestureResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// InputSynthesizeTapGesture (experimental) Synthesizes a tap gesture over a time period by issuing appropriate touch events.
type InputSynthesizeTapGesture struct {
	// X X coordinate of the start of the gesture in CSS pixels.
	X float64 `json:"x"`

	// Y Y coordinate of the start of the gesture in CSS pixels.
	Y float64 `json:"y"`

	// Duration Duration between touchdown and touchup events in ms (default: 50).
	Duration int64 `json:"duration,omitempty"`

	// TapCount Number of times to perform the tap (e.g. 2 for double tap, default: 1).
	TapCount int64 `json:"tapCount,omitempty"`

	// GestureSourceType Which type of input events to be generated (default: 'default', which queries the platform
	// for the preferred input type).
	GestureSourceType *InputGestureSourceType `json:"gestureSourceType,omitempty"`
}

// InputSynthesizeTapGestureResult type
type InputSynthesizeTapGestureResult struct {
}

// Call of the command, sessionID is optional.
func (m InputSynthesizeTapGesture) Call(c *Call) (*InputSynthesizeTapGestureResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "InputSynthesizeTapGesture", m)
	if err != nil {
		return nil, err
	}

	var res InputSynthesizeTapGestureResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}
