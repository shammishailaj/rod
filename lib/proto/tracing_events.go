// This file is generated by "./lib/proto/cmd/gen"

package proto

import "encoding/json"

// TracingBufferUsage ...
type TracingBufferUsage struct {
	// PercentFull A number in range [0..1] that indicates the used size of event buffer as a fraction of its
	// total size.
	PercentFull float64 `json:"percentFull,omitempty"`

	// EventCount An approximate number of events in the trace log.
	EventCount float64 `json:"eventCount,omitempty"`

	// Value A number in range [0..1] that indicates the used size of event buffer as a fraction of its
	// total size.
	Value float64 `json:"value,omitempty"`
}

// MethodName interface
func (evt TracingBufferUsage) MethodName() string {
	return "Tracing.bufferUsage"
}

// Load json
func (evt TracingBufferUsage) Load(b []byte) *TracingBufferUsage {
	E(json.Unmarshal(b, &evt))
	return &evt
}

// TracingDataCollected Contains an bucket of collected trace events. When tracing is stopped collected events will be
// send as a sequence of dataCollected events followed by tracingComplete event.
type TracingDataCollected struct {
	// Value ...
	Value []map[string]interface{} `json:"value"`
}

// MethodName interface
func (evt TracingDataCollected) MethodName() string {
	return "Tracing.dataCollected"
}

// Load json
func (evt TracingDataCollected) Load(b []byte) *TracingDataCollected {
	E(json.Unmarshal(b, &evt))
	return &evt
}

// TracingTracingComplete Signals that tracing is stopped and there is no trace buffers pending flush, all data were
// delivered via dataCollected events.
type TracingTracingComplete struct {
	// DataLossOccurred Indicates whether some trace data is known to have been lost, e.g. because the trace ring
	// buffer wrapped around.
	DataLossOccurred bool `json:"dataLossOccurred"`

	// Stream A handle of the stream that holds resulting trace data.
	Stream *IOStreamHandle `json:"stream,omitempty"`

	// TraceFormat Trace data format of returned stream.
	TraceFormat *TracingStreamFormat `json:"traceFormat,omitempty"`

	// StreamCompression Compression format of returned stream.
	StreamCompression *TracingStreamCompression `json:"streamCompression,omitempty"`
}

// MethodName interface
func (evt TracingTracingComplete) MethodName() string {
	return "Tracing.tracingComplete"
}

// Load json
func (evt TracingTracingComplete) Load(b []byte) *TracingTracingComplete {
	E(json.Unmarshal(b, &evt))
	return &evt
}
