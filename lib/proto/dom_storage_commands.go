// This file is generated by "./lib/proto/cmd/gen"

package proto

import (
	"encoding/json"
)

// DOMStorageClear ...
type DOMStorageClear struct {
	// StorageID ...
	StorageID *DOMStorageStorageID `json:"storageId"`
}

// DOMStorageClearResult type
type DOMStorageClearResult struct {
}

// Call of the command, sessionID is optional.
func (m DOMStorageClear) Call(c *Call) (*DOMStorageClearResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "DOMStorageClear", m)
	if err != nil {
		return nil, err
	}

	var res DOMStorageClearResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// DOMStorageDisable Disables storage tracking, prevents storage events from being sent to the client.
type DOMStorageDisable struct {
}

// DOMStorageDisableResult type
type DOMStorageDisableResult struct {
}

// Call of the command, sessionID is optional.
func (m DOMStorageDisable) Call(c *Call) (*DOMStorageDisableResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "DOMStorageDisable", m)
	if err != nil {
		return nil, err
	}

	var res DOMStorageDisableResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// DOMStorageEnable Enables storage tracking, storage events will now be delivered to the client.
type DOMStorageEnable struct {
}

// DOMStorageEnableResult type
type DOMStorageEnableResult struct {
}

// Call of the command, sessionID is optional.
func (m DOMStorageEnable) Call(c *Call) (*DOMStorageEnableResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "DOMStorageEnable", m)
	if err != nil {
		return nil, err
	}

	var res DOMStorageEnableResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// DOMStorageGetDOMStorageItems ...
type DOMStorageGetDOMStorageItems struct {
	// StorageID ...
	StorageID *DOMStorageStorageID `json:"storageId"`
}

// DOMStorageGetDOMStorageItemsResult type
type DOMStorageGetDOMStorageItemsResult struct {
	// Entries ...
	Entries []*DOMStorageItem `json:"entries"`
}

// Call of the command, sessionID is optional.
func (m DOMStorageGetDOMStorageItems) Call(c *Call) (*DOMStorageGetDOMStorageItemsResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "DOMStorageGetDOMStorageItems", m)
	if err != nil {
		return nil, err
	}

	var res DOMStorageGetDOMStorageItemsResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// DOMStorageRemoveDOMStorageItem ...
type DOMStorageRemoveDOMStorageItem struct {
	// StorageID ...
	StorageID *DOMStorageStorageID `json:"storageId"`

	// Key ...
	Key string `json:"key"`
}

// DOMStorageRemoveDOMStorageItemResult type
type DOMStorageRemoveDOMStorageItemResult struct {
}

// Call of the command, sessionID is optional.
func (m DOMStorageRemoveDOMStorageItem) Call(c *Call) (*DOMStorageRemoveDOMStorageItemResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "DOMStorageRemoveDOMStorageItem", m)
	if err != nil {
		return nil, err
	}

	var res DOMStorageRemoveDOMStorageItemResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// DOMStorageSetDOMStorageItem ...
type DOMStorageSetDOMStorageItem struct {
	// StorageID ...
	StorageID *DOMStorageStorageID `json:"storageId"`

	// Key ...
	Key string `json:"key"`

	// Value ...
	Value string `json:"value"`
}

// DOMStorageSetDOMStorageItemResult type
type DOMStorageSetDOMStorageItemResult struct {
}

// Call of the command, sessionID is optional.
func (m DOMStorageSetDOMStorageItem) Call(c *Call) (*DOMStorageSetDOMStorageItemResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "DOMStorageSetDOMStorageItem", m)
	if err != nil {
		return nil, err
	}

	var res DOMStorageSetDOMStorageItemResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}
