// This file is generated by "./lib/proto/cmd/gen"

package proto

// ProfilerProfileNode Profile node. Holds callsite information, execution statistics and child nodes.
type ProfilerProfileNode struct {
	// ID Unique id of the node.
	ID int64 `json:"id"`

	// CallFrame Function location.
	CallFrame *RuntimeCallFrame `json:"callFrame"`

	// HitCount Number of samples where this node was on top of the call stack.
	HitCount int64 `json:"hitCount,omitempty"`

	// Children Child node ids.
	Children []int64 `json:"children,omitempty"`

	// DeoptReason The reason of being not optimized. The function may be deoptimized or marked as don't
	// optimize.
	DeoptReason string `json:"deoptReason,omitempty"`

	// PositionTicks An array of source position ticks.
	PositionTicks []*ProfilerPositionTickInfo `json:"positionTicks,omitempty"`
}

// ProfilerProfile Profile.
type ProfilerProfile struct {
	// Nodes The list of profile nodes. First item is the root node.
	Nodes []*ProfilerProfileNode `json:"nodes"`

	// StartTime Profiling start timestamp in microseconds.
	StartTime float64 `json:"startTime"`

	// EndTime Profiling end timestamp in microseconds.
	EndTime float64 `json:"endTime"`

	// Samples Ids of samples top nodes.
	Samples []int64 `json:"samples,omitempty"`

	// TimeDeltas Time intervals between adjacent samples in microseconds. The first delta is relative to the
	// profile startTime.
	TimeDeltas []int64 `json:"timeDeltas,omitempty"`
}

// ProfilerPositionTickInfo Specifies a number of samples attributed to a certain source position.
type ProfilerPositionTickInfo struct {
	// Line Source line number (1-based).
	Line int64 `json:"line"`

	// Ticks Number of samples attributed to the source line.
	Ticks int64 `json:"ticks"`
}

// ProfilerCoverageRange Coverage data for a source range.
type ProfilerCoverageRange struct {
	// StartOffset JavaScript script source offset for the range start.
	StartOffset int64 `json:"startOffset"`

	// EndOffset JavaScript script source offset for the range end.
	EndOffset int64 `json:"endOffset"`

	// Count Collected execution count of the source range.
	Count int64 `json:"count"`
}

// ProfilerFunctionCoverage Coverage data for a JavaScript function.
type ProfilerFunctionCoverage struct {
	// FunctionName JavaScript function name.
	FunctionName string `json:"functionName"`

	// Ranges Source ranges inside the function with coverage data.
	Ranges []*ProfilerCoverageRange `json:"ranges"`

	// IsBlockCoverage Whether coverage data for this function has block granularity.
	IsBlockCoverage bool `json:"isBlockCoverage"`
}

// ProfilerScriptCoverage Coverage data for a JavaScript script.
type ProfilerScriptCoverage struct {
	// ScriptID JavaScript script id.
	ScriptID *RuntimeScriptID `json:"scriptId"`

	// URL JavaScript script name or url.
	URL string `json:"url"`

	// Functions Functions contained in the script that has coverage data.
	Functions []*ProfilerFunctionCoverage `json:"functions"`
}

// ProfilerTypeObject (experimental) Describes a type collected during runtime.
type ProfilerTypeObject struct {
	// Name Name of a type collected with type profiling.
	Name string `json:"name"`
}

// ProfilerTypeProfileEntry (experimental) Source offset and types for a parameter or return value.
type ProfilerTypeProfileEntry struct {
	// Offset Source offset of the parameter or end of function for return values.
	Offset int64 `json:"offset"`

	// Types The types for this parameter or return value.
	Types []*ProfilerTypeObject `json:"types"`
}

// ProfilerScriptTypeProfile (experimental) Type profile data collected during runtime for a JavaScript script.
type ProfilerScriptTypeProfile struct {
	// ScriptID JavaScript script id.
	ScriptID *RuntimeScriptID `json:"scriptId"`

	// URL JavaScript script name or url.
	URL string `json:"url"`

	// Entries Type profile entries for parameters and return values of the functions in the script.
	Entries []*ProfilerTypeProfileEntry `json:"entries"`
}

// ProfilerCounterInfo (experimental) Collected counter information.
type ProfilerCounterInfo struct {
	// Name Counter name.
	Name string `json:"name"`

	// Value Counter value.
	Value int64 `json:"value"`
}
