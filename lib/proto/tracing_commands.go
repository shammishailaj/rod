// This file is generated by "./lib/proto/cmd/gen"

package proto

import (
	"encoding/json"
)

// TracingEnd Stop trace events collection.
type TracingEnd struct {
}

// TracingEndResult type
type TracingEndResult struct {
}

// Call of the command, sessionID is optional.
func (m TracingEnd) Call(c *Call) (*TracingEndResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "TracingEnd", m)
	if err != nil {
		return nil, err
	}

	var res TracingEndResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// TracingGetCategories Gets supported tracing categories.
type TracingGetCategories struct {
}

// TracingGetCategoriesResult type
type TracingGetCategoriesResult struct {
	// Categories A list of supported tracing categories.
	Categories []string `json:"categories"`
}

// Call of the command, sessionID is optional.
func (m TracingGetCategories) Call(c *Call) (*TracingGetCategoriesResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "TracingGetCategories", m)
	if err != nil {
		return nil, err
	}

	var res TracingGetCategoriesResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// TracingRecordClockSyncMarker Record a clock sync marker in the trace.
type TracingRecordClockSyncMarker struct {
	// SyncID The ID of this clock sync marker
	SyncID string `json:"syncId"`
}

// TracingRecordClockSyncMarkerResult type
type TracingRecordClockSyncMarkerResult struct {
}

// Call of the command, sessionID is optional.
func (m TracingRecordClockSyncMarker) Call(c *Call) (*TracingRecordClockSyncMarkerResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "TracingRecordClockSyncMarker", m)
	if err != nil {
		return nil, err
	}

	var res TracingRecordClockSyncMarkerResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// TracingRequestMemoryDump Request a global memory dump.
type TracingRequestMemoryDump struct {
	// Deterministic Enables more deterministic results by forcing garbage collection
	Deterministic bool `json:"deterministic,omitempty"`
}

// TracingRequestMemoryDumpResult type
type TracingRequestMemoryDumpResult struct {
	// DumpGUID GUID of the resulting global memory dump.
	DumpGUID string `json:"dumpGuid"`

	// Success True iff the global memory dump succeeded.
	Success bool `json:"success"`
}

// Call of the command, sessionID is optional.
func (m TracingRequestMemoryDump) Call(c *Call) (*TracingRequestMemoryDumpResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "TracingRequestMemoryDump", m)
	if err != nil {
		return nil, err
	}

	var res TracingRequestMemoryDumpResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// TracingTracingStartTransferMode Enum of possible values
type TracingTracingStartTransferMode string

const (
	// TracingTracingStartTransferModeReportEvents enum value
	TracingTracingStartTransferModeReportEvents TracingTracingStartTransferMode = "ReportEvents"

	// TracingTracingStartTransferModeReturnAsStream enum value
	TracingTracingStartTransferModeReturnAsStream TracingTracingStartTransferMode = "ReturnAsStream"
)

// TracingStart Start trace events collection.
type TracingStart struct {
	// Categories (deprecated) Category/tag filter
	Categories string `json:"categories,omitempty"`

	// Options (deprecated) Tracing options
	Options string `json:"options,omitempty"`

	// BufferUsageReportingInterval If set, the agent will issue bufferUsage events at this interval, specified in milliseconds
	BufferUsageReportingInterval float64 `json:"bufferUsageReportingInterval,omitempty"`

	// TransferMode Whether to report trace events as series of dataCollected events or to save trace to a
	// stream (defaults to `ReportEvents`).
	TransferMode TracingTracingStartTransferMode `json:"transferMode,omitempty"`

	// StreamFormat Trace data format to use. This only applies when using `ReturnAsStream`
	// transfer mode (defaults to `json`).
	StreamFormat *TracingStreamFormat `json:"streamFormat,omitempty"`

	// StreamCompression Compression format to use. This only applies when using `ReturnAsStream`
	// transfer mode (defaults to `none`)
	StreamCompression *TracingStreamCompression `json:"streamCompression,omitempty"`

	// TraceConfig ...
	TraceConfig *TracingTraceConfig `json:"traceConfig,omitempty"`
}

// TracingStartResult type
type TracingStartResult struct {
}

// Call of the command, sessionID is optional.
func (m TracingStart) Call(c *Call) (*TracingStartResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "TracingStart", m)
	if err != nil {
		return nil, err
	}

	var res TracingStartResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}
