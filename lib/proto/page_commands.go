// This file is generated by "./lib/proto/cmd/gen"

package proto

import (
	"encoding/json"
)

// PageAddScriptToEvaluateOnLoad (deprecated) (experimental) Deprecated, please use addScriptToEvaluateOnNewDocument instead.
type PageAddScriptToEvaluateOnLoad struct {
	// ScriptSource ...
	ScriptSource string `json:"scriptSource"`
}

// PageAddScriptToEvaluateOnLoadResult type
type PageAddScriptToEvaluateOnLoadResult struct {
	// Identifier Identifier of the added script.
	Identifier *PageScriptIdentifier `json:"identifier"`
}

// Call of the command, sessionID is optional.
func (m PageAddScriptToEvaluateOnLoad) Call(c *Call) (*PageAddScriptToEvaluateOnLoadResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "PageAddScriptToEvaluateOnLoad", m)
	if err != nil {
		return nil, err
	}

	var res PageAddScriptToEvaluateOnLoadResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// PageAddScriptToEvaluateOnNewDocument Evaluates given script in every frame upon creation (before loading frame's scripts).
type PageAddScriptToEvaluateOnNewDocument struct {
	// Source ...
	Source string `json:"source"`

	// WorldName (experimental) If specified, creates an isolated world with the given name and evaluates given script in it.
	// This world name will be used as the ExecutionContextDescription::name when the corresponding
	// event is emitted.
	WorldName string `json:"worldName,omitempty"`
}

// PageAddScriptToEvaluateOnNewDocumentResult type
type PageAddScriptToEvaluateOnNewDocumentResult struct {
	// Identifier Identifier of the added script.
	Identifier *PageScriptIdentifier `json:"identifier"`
}

// Call of the command, sessionID is optional.
func (m PageAddScriptToEvaluateOnNewDocument) Call(c *Call) (*PageAddScriptToEvaluateOnNewDocumentResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "PageAddScriptToEvaluateOnNewDocument", m)
	if err != nil {
		return nil, err
	}

	var res PageAddScriptToEvaluateOnNewDocumentResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// PageBringToFront Brings page to front (activates tab).
type PageBringToFront struct {
}

// PageBringToFrontResult type
type PageBringToFrontResult struct {
}

// Call of the command, sessionID is optional.
func (m PageBringToFront) Call(c *Call) (*PageBringToFrontResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "PageBringToFront", m)
	if err != nil {
		return nil, err
	}

	var res PageBringToFrontResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// PagePageCaptureScreenshotFormat Enum of possible values
type PagePageCaptureScreenshotFormat string

const (
	// PagePageCaptureScreenshotFormatJpeg enum value
	PagePageCaptureScreenshotFormatJpeg PagePageCaptureScreenshotFormat = "jpeg"

	// PagePageCaptureScreenshotFormatPng enum value
	PagePageCaptureScreenshotFormatPng PagePageCaptureScreenshotFormat = "png"
)

// PageCaptureScreenshot Capture page screenshot.
type PageCaptureScreenshot struct {
	// Format Image compression format (defaults to png).
	Format PagePageCaptureScreenshotFormat `json:"format,omitempty"`

	// Quality Compression quality from range [0..100] (jpeg only).
	Quality int64 `json:"quality,omitempty"`

	// Clip Capture the screenshot of a given region only.
	Clip *PageViewport `json:"clip,omitempty"`

	// FromSurface (experimental) Capture the screenshot from the surface, rather than the view. Defaults to true.
	FromSurface bool `json:"fromSurface,omitempty"`
}

// PageCaptureScreenshotResult type
type PageCaptureScreenshotResult struct {
	// Data Base64-encoded image data.
	Data []byte `json:"data"`
}

// Call of the command, sessionID is optional.
func (m PageCaptureScreenshot) Call(c *Call) (*PageCaptureScreenshotResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "PageCaptureScreenshot", m)
	if err != nil {
		return nil, err
	}

	var res PageCaptureScreenshotResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// PagePageCaptureSnapshotFormat Enum of possible values
type PagePageCaptureSnapshotFormat string

const (
	// PagePageCaptureSnapshotFormatMhtml enum value
	PagePageCaptureSnapshotFormatMhtml PagePageCaptureSnapshotFormat = "mhtml"
)

// PageCaptureSnapshot (experimental) Returns a snapshot of the page as a string. For MHTML format, the serialization includes
// iframes, shadow DOM, external resources, and element-inline styles.
type PageCaptureSnapshot struct {
	// Format Format (defaults to mhtml).
	Format PagePageCaptureSnapshotFormat `json:"format,omitempty"`
}

// PageCaptureSnapshotResult type
type PageCaptureSnapshotResult struct {
	// Data Serialized page data.
	Data string `json:"data"`
}

// Call of the command, sessionID is optional.
func (m PageCaptureSnapshot) Call(c *Call) (*PageCaptureSnapshotResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "PageCaptureSnapshot", m)
	if err != nil {
		return nil, err
	}

	var res PageCaptureSnapshotResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// PageClearDeviceMetricsOverride (deprecated) (experimental) Clears the overriden device metrics.
type PageClearDeviceMetricsOverride struct {
}

// PageClearDeviceMetricsOverrideResult type
type PageClearDeviceMetricsOverrideResult struct {
}

// Call of the command, sessionID is optional.
func (m PageClearDeviceMetricsOverride) Call(c *Call) (*PageClearDeviceMetricsOverrideResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "PageClearDeviceMetricsOverride", m)
	if err != nil {
		return nil, err
	}

	var res PageClearDeviceMetricsOverrideResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// PageClearDeviceOrientationOverride (deprecated) (experimental) Clears the overridden Device Orientation.
type PageClearDeviceOrientationOverride struct {
}

// PageClearDeviceOrientationOverrideResult type
type PageClearDeviceOrientationOverrideResult struct {
}

// Call of the command, sessionID is optional.
func (m PageClearDeviceOrientationOverride) Call(c *Call) (*PageClearDeviceOrientationOverrideResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "PageClearDeviceOrientationOverride", m)
	if err != nil {
		return nil, err
	}

	var res PageClearDeviceOrientationOverrideResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// PageClearGeolocationOverride (deprecated) Clears the overriden Geolocation Position and Error.
type PageClearGeolocationOverride struct {
}

// PageClearGeolocationOverrideResult type
type PageClearGeolocationOverrideResult struct {
}

// Call of the command, sessionID is optional.
func (m PageClearGeolocationOverride) Call(c *Call) (*PageClearGeolocationOverrideResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "PageClearGeolocationOverride", m)
	if err != nil {
		return nil, err
	}

	var res PageClearGeolocationOverrideResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// PageCreateIsolatedWorld Creates an isolated world for the given frame.
type PageCreateIsolatedWorld struct {
	// FrameID Id of the frame in which the isolated world should be created.
	FrameID *PageFrameID `json:"frameId"`

	// WorldName An optional name which is reported in the Execution Context.
	WorldName string `json:"worldName,omitempty"`

	// GrantUniveralAccess Whether or not universal access should be granted to the isolated world. This is a powerful
	// option, use with caution.
	GrantUniveralAccess bool `json:"grantUniveralAccess,omitempty"`
}

// PageCreateIsolatedWorldResult type
type PageCreateIsolatedWorldResult struct {
	// ExecutionContextID Execution context of the isolated world.
	ExecutionContextID *RuntimeExecutionContextID `json:"executionContextId"`
}

// Call of the command, sessionID is optional.
func (m PageCreateIsolatedWorld) Call(c *Call) (*PageCreateIsolatedWorldResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "PageCreateIsolatedWorld", m)
	if err != nil {
		return nil, err
	}

	var res PageCreateIsolatedWorldResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// PageDeleteCookie (deprecated) (experimental) Deletes browser cookie with given name, domain and path.
type PageDeleteCookie struct {
	// CookieName Name of the cookie to remove.
	CookieName string `json:"cookieName"`

	// URL URL to match cooke domain and path.
	URL string `json:"url"`
}

// PageDeleteCookieResult type
type PageDeleteCookieResult struct {
}

// Call of the command, sessionID is optional.
func (m PageDeleteCookie) Call(c *Call) (*PageDeleteCookieResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "PageDeleteCookie", m)
	if err != nil {
		return nil, err
	}

	var res PageDeleteCookieResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// PageDisable Disables page domain notifications.
type PageDisable struct {
}

// PageDisableResult type
type PageDisableResult struct {
}

// Call of the command, sessionID is optional.
func (m PageDisable) Call(c *Call) (*PageDisableResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "PageDisable", m)
	if err != nil {
		return nil, err
	}

	var res PageDisableResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// PageEnable Enables page domain notifications.
type PageEnable struct {
}

// PageEnableResult type
type PageEnableResult struct {
}

// Call of the command, sessionID is optional.
func (m PageEnable) Call(c *Call) (*PageEnableResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "PageEnable", m)
	if err != nil {
		return nil, err
	}

	var res PageEnableResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// PageGetAppManifest ...
type PageGetAppManifest struct {
}

// PageGetAppManifestResult type
type PageGetAppManifestResult struct {
	// URL Manifest location.
	URL string `json:"url"`

	// Errors ...
	Errors []*PageAppManifestError `json:"errors"`

	// Data Manifest content.
	Data string `json:"data,omitempty"`

	// Parsed (experimental) Parsed manifest properties
	Parsed *PageAppManifestParsedProperties `json:"parsed,omitempty"`
}

// Call of the command, sessionID is optional.
func (m PageGetAppManifest) Call(c *Call) (*PageGetAppManifestResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "PageGetAppManifest", m)
	if err != nil {
		return nil, err
	}

	var res PageGetAppManifestResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// PageGetInstallabilityErrors (experimental) ...
type PageGetInstallabilityErrors struct {
}

// PageGetInstallabilityErrorsResult type
type PageGetInstallabilityErrorsResult struct {
	// Errors (deprecated) ...
	Errors []string `json:"errors"`

	// InstallabilityErrors (experimental) ...
	InstallabilityErrors []*PageInstallabilityError `json:"installabilityErrors"`
}

// Call of the command, sessionID is optional.
func (m PageGetInstallabilityErrors) Call(c *Call) (*PageGetInstallabilityErrorsResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "PageGetInstallabilityErrors", m)
	if err != nil {
		return nil, err
	}

	var res PageGetInstallabilityErrorsResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// PageGetManifestIcons (experimental) ...
type PageGetManifestIcons struct {
}

// PageGetManifestIconsResult type
type PageGetManifestIconsResult struct {
	// PrimaryIcon ...
	PrimaryIcon []byte `json:"primaryIcon,omitempty"`
}

// Call of the command, sessionID is optional.
func (m PageGetManifestIcons) Call(c *Call) (*PageGetManifestIconsResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "PageGetManifestIcons", m)
	if err != nil {
		return nil, err
	}

	var res PageGetManifestIconsResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// PageGetCookies (deprecated) (experimental) Returns all browser cookies. Depending on the backend support, will return detailed cookie
// information in the `cookies` field.
type PageGetCookies struct {
}

// PageGetCookiesResult type
type PageGetCookiesResult struct {
	// Cookies Array of cookie objects.
	Cookies []*NetworkCookie `json:"cookies"`
}

// Call of the command, sessionID is optional.
func (m PageGetCookies) Call(c *Call) (*PageGetCookiesResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "PageGetCookies", m)
	if err != nil {
		return nil, err
	}

	var res PageGetCookiesResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// PageGetFrameTree Returns present frame tree structure.
type PageGetFrameTree struct {
}

// PageGetFrameTreeResult type
type PageGetFrameTreeResult struct {
	// FrameTree Present frame tree structure.
	FrameTree *PageFrameTree `json:"frameTree"`
}

// Call of the command, sessionID is optional.
func (m PageGetFrameTree) Call(c *Call) (*PageGetFrameTreeResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "PageGetFrameTree", m)
	if err != nil {
		return nil, err
	}

	var res PageGetFrameTreeResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// PageGetLayoutMetrics Returns metrics relating to the layouting of the page, such as viewport bounds/scale.
type PageGetLayoutMetrics struct {
}

// PageGetLayoutMetricsResult type
type PageGetLayoutMetricsResult struct {
	// LayoutViewport Metrics relating to the layout viewport.
	LayoutViewport *PageLayoutViewport `json:"layoutViewport"`

	// VisualViewport Metrics relating to the visual viewport.
	VisualViewport *PageVisualViewport `json:"visualViewport"`

	// ContentSize Size of scrollable area.
	ContentSize *DOMRect `json:"contentSize"`
}

// Call of the command, sessionID is optional.
func (m PageGetLayoutMetrics) Call(c *Call) (*PageGetLayoutMetricsResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "PageGetLayoutMetrics", m)
	if err != nil {
		return nil, err
	}

	var res PageGetLayoutMetricsResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// PageGetNavigationHistory Returns navigation history for the current page.
type PageGetNavigationHistory struct {
}

// PageGetNavigationHistoryResult type
type PageGetNavigationHistoryResult struct {
	// CurrentIndex Index of the current navigation history entry.
	CurrentIndex int64 `json:"currentIndex"`

	// Entries Array of navigation history entries.
	Entries []*PageNavigationEntry `json:"entries"`
}

// Call of the command, sessionID is optional.
func (m PageGetNavigationHistory) Call(c *Call) (*PageGetNavigationHistoryResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "PageGetNavigationHistory", m)
	if err != nil {
		return nil, err
	}

	var res PageGetNavigationHistoryResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// PageResetNavigationHistory Resets navigation history for the current page.
type PageResetNavigationHistory struct {
}

// PageResetNavigationHistoryResult type
type PageResetNavigationHistoryResult struct {
}

// Call of the command, sessionID is optional.
func (m PageResetNavigationHistory) Call(c *Call) (*PageResetNavigationHistoryResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "PageResetNavigationHistory", m)
	if err != nil {
		return nil, err
	}

	var res PageResetNavigationHistoryResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// PageGetResourceContent (experimental) Returns content of the given resource.
type PageGetResourceContent struct {
	// FrameID Frame id to get resource for.
	FrameID *PageFrameID `json:"frameId"`

	// URL URL of the resource to get content for.
	URL string `json:"url"`
}

// PageGetResourceContentResult type
type PageGetResourceContentResult struct {
	// Content Resource content.
	Content string `json:"content"`

	// Base64Encoded True, if content was served as base64.
	Base64Encoded bool `json:"base64Encoded"`
}

// Call of the command, sessionID is optional.
func (m PageGetResourceContent) Call(c *Call) (*PageGetResourceContentResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "PageGetResourceContent", m)
	if err != nil {
		return nil, err
	}

	var res PageGetResourceContentResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// PageGetResourceTree (experimental) Returns present frame / resource tree structure.
type PageGetResourceTree struct {
}

// PageGetResourceTreeResult type
type PageGetResourceTreeResult struct {
	// FrameTree Present frame / resource tree structure.
	FrameTree *PageFrameResourceTree `json:"frameTree"`
}

// Call of the command, sessionID is optional.
func (m PageGetResourceTree) Call(c *Call) (*PageGetResourceTreeResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "PageGetResourceTree", m)
	if err != nil {
		return nil, err
	}

	var res PageGetResourceTreeResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// PageHandleJavaScriptDialog Accepts or dismisses a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload).
type PageHandleJavaScriptDialog struct {
	// Accept Whether to accept or dismiss the dialog.
	Accept bool `json:"accept"`

	// PromptText The text to enter into the dialog prompt before accepting. Used only if this is a prompt
	// dialog.
	PromptText string `json:"promptText,omitempty"`
}

// PageHandleJavaScriptDialogResult type
type PageHandleJavaScriptDialogResult struct {
}

// Call of the command, sessionID is optional.
func (m PageHandleJavaScriptDialog) Call(c *Call) (*PageHandleJavaScriptDialogResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "PageHandleJavaScriptDialog", m)
	if err != nil {
		return nil, err
	}

	var res PageHandleJavaScriptDialogResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// PageNavigate Navigates current page to the given URL.
type PageNavigate struct {
	// URL URL to navigate the page to.
	URL string `json:"url"`

	// Referrer Referrer URL.
	Referrer string `json:"referrer,omitempty"`

	// TransitionType Intended transition type.
	TransitionType *PageTransitionType `json:"transitionType,omitempty"`

	// FrameID Frame id to navigate, if not specified navigates the top frame.
	FrameID *PageFrameID `json:"frameId,omitempty"`
}

// PageNavigateResult type
type PageNavigateResult struct {
	// FrameID Frame id that has navigated (or failed to navigate)
	FrameID *PageFrameID `json:"frameId"`

	// LoaderID Loader identifier.
	LoaderID *NetworkLoaderID `json:"loaderId,omitempty"`

	// ErrorText User friendly error message, present if and only if navigation has failed.
	ErrorText string `json:"errorText,omitempty"`
}

// Call of the command, sessionID is optional.
func (m PageNavigate) Call(c *Call) (*PageNavigateResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "PageNavigate", m)
	if err != nil {
		return nil, err
	}

	var res PageNavigateResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// PageNavigateToHistoryEntry Navigates current page to the given history entry.
type PageNavigateToHistoryEntry struct {
	// EntryID Unique id of the entry to navigate to.
	EntryID int64 `json:"entryId"`
}

// PageNavigateToHistoryEntryResult type
type PageNavigateToHistoryEntryResult struct {
}

// Call of the command, sessionID is optional.
func (m PageNavigateToHistoryEntry) Call(c *Call) (*PageNavigateToHistoryEntryResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "PageNavigateToHistoryEntry", m)
	if err != nil {
		return nil, err
	}

	var res PageNavigateToHistoryEntryResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// PagePagePrintToPDFTransferMode Enum of possible values
type PagePagePrintToPDFTransferMode string

const (
	// PagePagePrintToPDFTransferModeReturnAsBase64 enum value
	PagePagePrintToPDFTransferModeReturnAsBase64 PagePagePrintToPDFTransferMode = "ReturnAsBase64"

	// PagePagePrintToPDFTransferModeReturnAsStream enum value
	PagePagePrintToPDFTransferModeReturnAsStream PagePagePrintToPDFTransferMode = "ReturnAsStream"
)

// PagePrintToPDF Print page as PDF.
type PagePrintToPDF struct {
	// Landscape Paper orientation. Defaults to false.
	Landscape bool `json:"landscape,omitempty"`

	// DisplayHeaderFooter Display header and footer. Defaults to false.
	DisplayHeaderFooter bool `json:"displayHeaderFooter,omitempty"`

	// PrintBackground Print background graphics. Defaults to false.
	PrintBackground bool `json:"printBackground,omitempty"`

	// Scale Scale of the webpage rendering. Defaults to 1.
	Scale float64 `json:"scale,omitempty"`

	// PaperWidth Paper width in inches. Defaults to 8.5 inches.
	PaperWidth float64 `json:"paperWidth,omitempty"`

	// PaperHeight Paper height in inches. Defaults to 11 inches.
	PaperHeight float64 `json:"paperHeight,omitempty"`

	// MarginTop Top margin in inches. Defaults to 1cm (~0.4 inches).
	MarginTop float64 `json:"marginTop,omitempty"`

	// MarginBottom Bottom margin in inches. Defaults to 1cm (~0.4 inches).
	MarginBottom float64 `json:"marginBottom,omitempty"`

	// MarginLeft Left margin in inches. Defaults to 1cm (~0.4 inches).
	MarginLeft float64 `json:"marginLeft,omitempty"`

	// MarginRight Right margin in inches. Defaults to 1cm (~0.4 inches).
	MarginRight float64 `json:"marginRight,omitempty"`

	// PageRanges Paper ranges to print, e.g., '1-5, 8, 11-13'. Defaults to the empty string, which means
	// print all pages.
	PageRanges string `json:"pageRanges,omitempty"`

	// IgnoreInvalidPageRanges Whether to silently ignore invalid but successfully parsed page ranges, such as '3-2'.
	// Defaults to false.
	IgnoreInvalidPageRanges bool `json:"ignoreInvalidPageRanges,omitempty"`

	// HeaderTemplate HTML template for the print header. Should be valid HTML markup with following
	// classes used to inject printing values into them:
	// - `date`: formatted print date
	// - `title`: document title
	// - `url`: document location
	// - `pageNumber`: current page number
	// - `totalPages`: total pages in the document
	//
	// For example, `<span class=title></span>` would generate span containing the title.
	HeaderTemplate string `json:"headerTemplate,omitempty"`

	// FooterTemplate HTML template for the print footer. Should use the same format as the `headerTemplate`.
	FooterTemplate string `json:"footerTemplate,omitempty"`

	// PreferCSSPageSize Whether or not to prefer page size as defined by css. Defaults to false,
	// in which case the content will be scaled to fit the paper size.
	PreferCSSPageSize bool `json:"preferCSSPageSize,omitempty"`

	// TransferMode (experimental) return as stream
	TransferMode PagePagePrintToPDFTransferMode `json:"transferMode,omitempty"`
}

// PagePrintToPDFResult type
type PagePrintToPDFResult struct {
	// Data Base64-encoded pdf data. Empty if |returnAsStream| is specified.
	Data []byte `json:"data"`

	// Stream (experimental) A handle of the stream that holds resulting PDF data.
	Stream *IOStreamHandle `json:"stream,omitempty"`
}

// Call of the command, sessionID is optional.
func (m PagePrintToPDF) Call(c *Call) (*PagePrintToPDFResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "PagePrintToPDF", m)
	if err != nil {
		return nil, err
	}

	var res PagePrintToPDFResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// PageReload Reloads given page optionally ignoring the cache.
type PageReload struct {
	// IgnoreCache If true, browser cache is ignored (as if the user pressed Shift+refresh).
	IgnoreCache bool `json:"ignoreCache,omitempty"`

	// ScriptToEvaluateOnLoad If set, the script will be injected into all frames of the inspected page after reload.
	// Argument will be ignored if reloading dataURL origin.
	ScriptToEvaluateOnLoad string `json:"scriptToEvaluateOnLoad,omitempty"`
}

// PageReloadResult type
type PageReloadResult struct {
}

// Call of the command, sessionID is optional.
func (m PageReload) Call(c *Call) (*PageReloadResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "PageReload", m)
	if err != nil {
		return nil, err
	}

	var res PageReloadResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// PageRemoveScriptToEvaluateOnLoad (deprecated) (experimental) Deprecated, please use removeScriptToEvaluateOnNewDocument instead.
type PageRemoveScriptToEvaluateOnLoad struct {
	// Identifier ...
	Identifier *PageScriptIdentifier `json:"identifier"`
}

// PageRemoveScriptToEvaluateOnLoadResult type
type PageRemoveScriptToEvaluateOnLoadResult struct {
}

// Call of the command, sessionID is optional.
func (m PageRemoveScriptToEvaluateOnLoad) Call(c *Call) (*PageRemoveScriptToEvaluateOnLoadResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "PageRemoveScriptToEvaluateOnLoad", m)
	if err != nil {
		return nil, err
	}

	var res PageRemoveScriptToEvaluateOnLoadResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// PageRemoveScriptToEvaluateOnNewDocument Removes given script from the list.
type PageRemoveScriptToEvaluateOnNewDocument struct {
	// Identifier ...
	Identifier *PageScriptIdentifier `json:"identifier"`
}

// PageRemoveScriptToEvaluateOnNewDocumentResult type
type PageRemoveScriptToEvaluateOnNewDocumentResult struct {
}

// Call of the command, sessionID is optional.
func (m PageRemoveScriptToEvaluateOnNewDocument) Call(c *Call) (*PageRemoveScriptToEvaluateOnNewDocumentResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "PageRemoveScriptToEvaluateOnNewDocument", m)
	if err != nil {
		return nil, err
	}

	var res PageRemoveScriptToEvaluateOnNewDocumentResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// PageScreencastFrameAck (experimental) Acknowledges that a screencast frame has been received by the frontend.
type PageScreencastFrameAck struct {
	// SessionID Frame number.
	SessionID int64 `json:"sessionId"`
}

// PageScreencastFrameAckResult type
type PageScreencastFrameAckResult struct {
}

// Call of the command, sessionID is optional.
func (m PageScreencastFrameAck) Call(c *Call) (*PageScreencastFrameAckResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "PageScreencastFrameAck", m)
	if err != nil {
		return nil, err
	}

	var res PageScreencastFrameAckResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// PageSearchInResource (experimental) Searches for given string in resource content.
type PageSearchInResource struct {
	// FrameID Frame id for resource to search in.
	FrameID *PageFrameID `json:"frameId"`

	// URL URL of the resource to search in.
	URL string `json:"url"`

	// Query String to search for.
	Query string `json:"query"`

	// CaseSensitive If true, search is case sensitive.
	CaseSensitive bool `json:"caseSensitive,omitempty"`

	// IsRegex If true, treats string parameter as regex.
	IsRegex bool `json:"isRegex,omitempty"`
}

// PageSearchInResourceResult type
type PageSearchInResourceResult struct {
	// Result List of search matches.
	Result []*DebuggerSearchMatch `json:"result"`
}

// Call of the command, sessionID is optional.
func (m PageSearchInResource) Call(c *Call) (*PageSearchInResourceResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "PageSearchInResource", m)
	if err != nil {
		return nil, err
	}

	var res PageSearchInResourceResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// PageSetAdBlockingEnabled (experimental) Enable Chrome's experimental ad filter on all sites.
type PageSetAdBlockingEnabled struct {
	// Enabled Whether to block ads.
	Enabled bool `json:"enabled"`
}

// PageSetAdBlockingEnabledResult type
type PageSetAdBlockingEnabledResult struct {
}

// Call of the command, sessionID is optional.
func (m PageSetAdBlockingEnabled) Call(c *Call) (*PageSetAdBlockingEnabledResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "PageSetAdBlockingEnabled", m)
	if err != nil {
		return nil, err
	}

	var res PageSetAdBlockingEnabledResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// PageSetBypassCSP (experimental) Enable page Content Security Policy by-passing.
type PageSetBypassCSP struct {
	// Enabled Whether to bypass page CSP.
	Enabled bool `json:"enabled"`
}

// PageSetBypassCSPResult type
type PageSetBypassCSPResult struct {
}

// Call of the command, sessionID is optional.
func (m PageSetBypassCSP) Call(c *Call) (*PageSetBypassCSPResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "PageSetBypassCSP", m)
	if err != nil {
		return nil, err
	}

	var res PageSetBypassCSPResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// PageSetDeviceMetricsOverride (deprecated) (experimental) Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
// window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
// query results).
type PageSetDeviceMetricsOverride struct {
	// Width Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
	Width int64 `json:"width"`

	// Height Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
	Height int64 `json:"height"`

	// DeviceScaleFactor Overriding device scale factor value. 0 disables the override.
	DeviceScaleFactor float64 `json:"deviceScaleFactor"`

	// Mobile Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text
	// autosizing and more.
	Mobile bool `json:"mobile"`

	// Scale Scale to apply to resulting view image.
	Scale float64 `json:"scale,omitempty"`

	// ScreenWidth Overriding screen width value in pixels (minimum 0, maximum 10000000).
	ScreenWidth int64 `json:"screenWidth,omitempty"`

	// ScreenHeight Overriding screen height value in pixels (minimum 0, maximum 10000000).
	ScreenHeight int64 `json:"screenHeight,omitempty"`

	// PositionX Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
	PositionX int64 `json:"positionX,omitempty"`

	// PositionY Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
	PositionY int64 `json:"positionY,omitempty"`

	// DontSetVisibleSize Do not set visible view size, rely upon explicit setVisibleSize call.
	DontSetVisibleSize bool `json:"dontSetVisibleSize,omitempty"`

	// ScreenOrientation Screen orientation override.
	ScreenOrientation *EmulationScreenOrientation `json:"screenOrientation,omitempty"`

	// Viewport The viewport dimensions and scale. If not set, the override is cleared.
	Viewport *PageViewport `json:"viewport,omitempty"`
}

// PageSetDeviceMetricsOverrideResult type
type PageSetDeviceMetricsOverrideResult struct {
}

// Call of the command, sessionID is optional.
func (m PageSetDeviceMetricsOverride) Call(c *Call) (*PageSetDeviceMetricsOverrideResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "PageSetDeviceMetricsOverride", m)
	if err != nil {
		return nil, err
	}

	var res PageSetDeviceMetricsOverrideResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// PageSetDeviceOrientationOverride (deprecated) (experimental) Overrides the Device Orientation.
type PageSetDeviceOrientationOverride struct {
	// Alpha Mock alpha
	Alpha float64 `json:"alpha"`

	// Beta Mock beta
	Beta float64 `json:"beta"`

	// Gamma Mock gamma
	Gamma float64 `json:"gamma"`
}

// PageSetDeviceOrientationOverrideResult type
type PageSetDeviceOrientationOverrideResult struct {
}

// Call of the command, sessionID is optional.
func (m PageSetDeviceOrientationOverride) Call(c *Call) (*PageSetDeviceOrientationOverrideResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "PageSetDeviceOrientationOverride", m)
	if err != nil {
		return nil, err
	}

	var res PageSetDeviceOrientationOverrideResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// PageSetFontFamilies (experimental) Set generic font families.
type PageSetFontFamilies struct {
	// FontFamilies Specifies font families to set. If a font family is not specified, it won't be changed.
	FontFamilies *PageFontFamilies `json:"fontFamilies"`
}

// PageSetFontFamiliesResult type
type PageSetFontFamiliesResult struct {
}

// Call of the command, sessionID is optional.
func (m PageSetFontFamilies) Call(c *Call) (*PageSetFontFamiliesResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "PageSetFontFamilies", m)
	if err != nil {
		return nil, err
	}

	var res PageSetFontFamiliesResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// PageSetFontSizes (experimental) Set default font sizes.
type PageSetFontSizes struct {
	// FontSizes Specifies font sizes to set. If a font size is not specified, it won't be changed.
	FontSizes *PageFontSizes `json:"fontSizes"`
}

// PageSetFontSizesResult type
type PageSetFontSizesResult struct {
}

// Call of the command, sessionID is optional.
func (m PageSetFontSizes) Call(c *Call) (*PageSetFontSizesResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "PageSetFontSizes", m)
	if err != nil {
		return nil, err
	}

	var res PageSetFontSizesResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// PageSetDocumentContent Sets given markup as the document's HTML.
type PageSetDocumentContent struct {
	// FrameID Frame id to set HTML for.
	FrameID *PageFrameID `json:"frameId"`

	// HTML HTML content to set.
	HTML string `json:"html"`
}

// PageSetDocumentContentResult type
type PageSetDocumentContentResult struct {
}

// Call of the command, sessionID is optional.
func (m PageSetDocumentContent) Call(c *Call) (*PageSetDocumentContentResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "PageSetDocumentContent", m)
	if err != nil {
		return nil, err
	}

	var res PageSetDocumentContentResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// PagePageSetDownloadBehaviorBehavior Enum of possible values
type PagePageSetDownloadBehaviorBehavior string

const (
	// PagePageSetDownloadBehaviorBehaviorDeny enum value
	PagePageSetDownloadBehaviorBehaviorDeny PagePageSetDownloadBehaviorBehavior = "deny"

	// PagePageSetDownloadBehaviorBehaviorAllow enum value
	PagePageSetDownloadBehaviorBehaviorAllow PagePageSetDownloadBehaviorBehavior = "allow"

	// PagePageSetDownloadBehaviorBehaviorDefault enum value
	PagePageSetDownloadBehaviorBehaviorDefault PagePageSetDownloadBehaviorBehavior = "default"
)

// PageSetDownloadBehavior (experimental) Set the behavior when downloading a file.
type PageSetDownloadBehavior struct {
	// Behavior Whether to allow all or deny all download requests, or use default Chrome behavior if
	// available (otherwise deny).
	Behavior PagePageSetDownloadBehaviorBehavior `json:"behavior"`

	// DownloadPath The default path to save downloaded files to. This is requred if behavior is set to 'allow'
	DownloadPath string `json:"downloadPath,omitempty"`
}

// PageSetDownloadBehaviorResult type
type PageSetDownloadBehaviorResult struct {
}

// Call of the command, sessionID is optional.
func (m PageSetDownloadBehavior) Call(c *Call) (*PageSetDownloadBehaviorResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "PageSetDownloadBehavior", m)
	if err != nil {
		return nil, err
	}

	var res PageSetDownloadBehaviorResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// PageSetGeolocationOverride (deprecated) Overrides the Geolocation Position or Error. Omitting any of the parameters emulates position
// unavailable.
type PageSetGeolocationOverride struct {
	// Latitude Mock latitude
	Latitude float64 `json:"latitude,omitempty"`

	// Longitude Mock longitude
	Longitude float64 `json:"longitude,omitempty"`

	// Accuracy Mock accuracy
	Accuracy float64 `json:"accuracy,omitempty"`
}

// PageSetGeolocationOverrideResult type
type PageSetGeolocationOverrideResult struct {
}

// Call of the command, sessionID is optional.
func (m PageSetGeolocationOverride) Call(c *Call) (*PageSetGeolocationOverrideResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "PageSetGeolocationOverride", m)
	if err != nil {
		return nil, err
	}

	var res PageSetGeolocationOverrideResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// PageSetLifecycleEventsEnabled (experimental) Controls whether page will emit lifecycle events.
type PageSetLifecycleEventsEnabled struct {
	// Enabled If true, starts emitting lifecycle events.
	Enabled bool `json:"enabled"`
}

// PageSetLifecycleEventsEnabledResult type
type PageSetLifecycleEventsEnabledResult struct {
}

// Call of the command, sessionID is optional.
func (m PageSetLifecycleEventsEnabled) Call(c *Call) (*PageSetLifecycleEventsEnabledResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "PageSetLifecycleEventsEnabled", m)
	if err != nil {
		return nil, err
	}

	var res PageSetLifecycleEventsEnabledResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// PagePageSetTouchEmulationEnabledConfiguration Enum of possible values
type PagePageSetTouchEmulationEnabledConfiguration string

const (
	// PagePageSetTouchEmulationEnabledConfigurationMobile enum value
	PagePageSetTouchEmulationEnabledConfigurationMobile PagePageSetTouchEmulationEnabledConfiguration = "mobile"

	// PagePageSetTouchEmulationEnabledConfigurationDesktop enum value
	PagePageSetTouchEmulationEnabledConfigurationDesktop PagePageSetTouchEmulationEnabledConfiguration = "desktop"
)

// PageSetTouchEmulationEnabled (deprecated) (experimental) Toggles mouse event-based touch event emulation.
type PageSetTouchEmulationEnabled struct {
	// Enabled Whether the touch event emulation should be enabled.
	Enabled bool `json:"enabled"`

	// Configuration Touch/gesture events configuration. Default: current platform.
	Configuration PagePageSetTouchEmulationEnabledConfiguration `json:"configuration,omitempty"`
}

// PageSetTouchEmulationEnabledResult type
type PageSetTouchEmulationEnabledResult struct {
}

// Call of the command, sessionID is optional.
func (m PageSetTouchEmulationEnabled) Call(c *Call) (*PageSetTouchEmulationEnabledResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "PageSetTouchEmulationEnabled", m)
	if err != nil {
		return nil, err
	}

	var res PageSetTouchEmulationEnabledResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// PagePageStartScreencastFormat Enum of possible values
type PagePageStartScreencastFormat string

const (
	// PagePageStartScreencastFormatJpeg enum value
	PagePageStartScreencastFormatJpeg PagePageStartScreencastFormat = "jpeg"

	// PagePageStartScreencastFormatPng enum value
	PagePageStartScreencastFormatPng PagePageStartScreencastFormat = "png"
)

// PageStartScreencast (experimental) Starts sending each frame using the `screencastFrame` event.
type PageStartScreencast struct {
	// Format Image compression format.
	Format PagePageStartScreencastFormat `json:"format,omitempty"`

	// Quality Compression quality from range [0..100].
	Quality int64 `json:"quality,omitempty"`

	// MaxWidth Maximum screenshot width.
	MaxWidth int64 `json:"maxWidth,omitempty"`

	// MaxHeight Maximum screenshot height.
	MaxHeight int64 `json:"maxHeight,omitempty"`

	// EveryNthFrame Send every n-th frame.
	EveryNthFrame int64 `json:"everyNthFrame,omitempty"`
}

// PageStartScreencastResult type
type PageStartScreencastResult struct {
}

// Call of the command, sessionID is optional.
func (m PageStartScreencast) Call(c *Call) (*PageStartScreencastResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "PageStartScreencast", m)
	if err != nil {
		return nil, err
	}

	var res PageStartScreencastResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// PageStopLoading Force the page stop all navigations and pending resource fetches.
type PageStopLoading struct {
}

// PageStopLoadingResult type
type PageStopLoadingResult struct {
}

// Call of the command, sessionID is optional.
func (m PageStopLoading) Call(c *Call) (*PageStopLoadingResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "PageStopLoading", m)
	if err != nil {
		return nil, err
	}

	var res PageStopLoadingResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// PageCrash (experimental) Crashes renderer on the IO thread, generates minidumps.
type PageCrash struct {
}

// PageCrashResult type
type PageCrashResult struct {
}

// Call of the command, sessionID is optional.
func (m PageCrash) Call(c *Call) (*PageCrashResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "PageCrash", m)
	if err != nil {
		return nil, err
	}

	var res PageCrashResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// PageClose (experimental) Tries to close page, running its beforeunload hooks, if any.
type PageClose struct {
}

// PageCloseResult type
type PageCloseResult struct {
}

// Call of the command, sessionID is optional.
func (m PageClose) Call(c *Call) (*PageCloseResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "PageClose", m)
	if err != nil {
		return nil, err
	}

	var res PageCloseResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// PagePageSetWebLifecycleStateState Enum of possible values
type PagePageSetWebLifecycleStateState string

const (
	// PagePageSetWebLifecycleStateStateFrozen enum value
	PagePageSetWebLifecycleStateStateFrozen PagePageSetWebLifecycleStateState = "frozen"

	// PagePageSetWebLifecycleStateStateActive enum value
	PagePageSetWebLifecycleStateStateActive PagePageSetWebLifecycleStateState = "active"
)

// PageSetWebLifecycleState (experimental) Tries to update the web lifecycle state of the page.
// It will transition the page to the given state according to:
// https://github.com/WICG/web-lifecycle/
type PageSetWebLifecycleState struct {
	// State Target lifecycle state
	State PagePageSetWebLifecycleStateState `json:"state"`
}

// PageSetWebLifecycleStateResult type
type PageSetWebLifecycleStateResult struct {
}

// Call of the command, sessionID is optional.
func (m PageSetWebLifecycleState) Call(c *Call) (*PageSetWebLifecycleStateResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "PageSetWebLifecycleState", m)
	if err != nil {
		return nil, err
	}

	var res PageSetWebLifecycleStateResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// PageStopScreencast (experimental) Stops sending each frame in the `screencastFrame`.
type PageStopScreencast struct {
}

// PageStopScreencastResult type
type PageStopScreencastResult struct {
}

// Call of the command, sessionID is optional.
func (m PageStopScreencast) Call(c *Call) (*PageStopScreencastResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "PageStopScreencast", m)
	if err != nil {
		return nil, err
	}

	var res PageStopScreencastResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// PageSetProduceCompilationCache (experimental) Forces compilation cache to be generated for every subresource script.
type PageSetProduceCompilationCache struct {
	// Enabled ...
	Enabled bool `json:"enabled"`
}

// PageSetProduceCompilationCacheResult type
type PageSetProduceCompilationCacheResult struct {
}

// Call of the command, sessionID is optional.
func (m PageSetProduceCompilationCache) Call(c *Call) (*PageSetProduceCompilationCacheResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "PageSetProduceCompilationCache", m)
	if err != nil {
		return nil, err
	}

	var res PageSetProduceCompilationCacheResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// PageAddCompilationCache (experimental) Seeds compilation cache for given url. Compilation cache does not survive
// cross-process navigation.
type PageAddCompilationCache struct {
	// URL ...
	URL string `json:"url"`

	// Data Base64-encoded data
	Data []byte `json:"data"`
}

// PageAddCompilationCacheResult type
type PageAddCompilationCacheResult struct {
}

// Call of the command, sessionID is optional.
func (m PageAddCompilationCache) Call(c *Call) (*PageAddCompilationCacheResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "PageAddCompilationCache", m)
	if err != nil {
		return nil, err
	}

	var res PageAddCompilationCacheResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// PageClearCompilationCache (experimental) Clears seeded compilation cache.
type PageClearCompilationCache struct {
}

// PageClearCompilationCacheResult type
type PageClearCompilationCacheResult struct {
}

// Call of the command, sessionID is optional.
func (m PageClearCompilationCache) Call(c *Call) (*PageClearCompilationCacheResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "PageClearCompilationCache", m)
	if err != nil {
		return nil, err
	}

	var res PageClearCompilationCacheResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// PageGenerateTestReport (experimental) Generates a report for testing.
type PageGenerateTestReport struct {
	// Message Message to be displayed in the report.
	Message string `json:"message"`

	// Group Specifies the endpoint group to deliver the report to.
	Group string `json:"group,omitempty"`
}

// PageGenerateTestReportResult type
type PageGenerateTestReportResult struct {
}

// Call of the command, sessionID is optional.
func (m PageGenerateTestReport) Call(c *Call) (*PageGenerateTestReportResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "PageGenerateTestReport", m)
	if err != nil {
		return nil, err
	}

	var res PageGenerateTestReportResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// PageWaitForDebugger (experimental) Pauses page execution. Can be resumed using generic Runtime.runIfWaitingForDebugger.
type PageWaitForDebugger struct {
}

// PageWaitForDebuggerResult type
type PageWaitForDebuggerResult struct {
}

// Call of the command, sessionID is optional.
func (m PageWaitForDebugger) Call(c *Call) (*PageWaitForDebuggerResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "PageWaitForDebugger", m)
	if err != nil {
		return nil, err
	}

	var res PageWaitForDebuggerResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// PageSetInterceptFileChooserDialog (experimental) Intercept file chooser requests and transfer control to protocol clients.
// When file chooser interception is enabled, native file chooser dialog is not shown.
// Instead, a protocol event `Page.fileChooserOpened` is emitted.
type PageSetInterceptFileChooserDialog struct {
	// Enabled ...
	Enabled bool `json:"enabled"`
}

// PageSetInterceptFileChooserDialogResult type
type PageSetInterceptFileChooserDialogResult struct {
}

// Call of the command, sessionID is optional.
func (m PageSetInterceptFileChooserDialog) Call(c *Call) (*PageSetInterceptFileChooserDialogResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "PageSetInterceptFileChooserDialog", m)
	if err != nil {
		return nil, err
	}

	var res PageSetInterceptFileChooserDialogResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}
