// This file is generated by "./lib/proto/cmd/gen"

package proto

import (
	"encoding/json"
)

// BackgroundServiceStartObserving Enables event updates for the service.
type BackgroundServiceStartObserving struct {
	// Service ...
	Service *BackgroundServiceServiceName `json:"service"`
}

// BackgroundServiceStartObservingResult type
type BackgroundServiceStartObservingResult struct {
}

// Call of the command, sessionID is optional.
func (m BackgroundServiceStartObserving) Call(c *Call) (*BackgroundServiceStartObservingResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "BackgroundServiceStartObserving", m)
	if err != nil {
		return nil, err
	}

	var res BackgroundServiceStartObservingResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// BackgroundServiceStopObserving Disables event updates for the service.
type BackgroundServiceStopObserving struct {
	// Service ...
	Service *BackgroundServiceServiceName `json:"service"`
}

// BackgroundServiceStopObservingResult type
type BackgroundServiceStopObservingResult struct {
}

// Call of the command, sessionID is optional.
func (m BackgroundServiceStopObserving) Call(c *Call) (*BackgroundServiceStopObservingResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "BackgroundServiceStopObserving", m)
	if err != nil {
		return nil, err
	}

	var res BackgroundServiceStopObservingResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// BackgroundServiceSetRecording Set the recording state for the service.
type BackgroundServiceSetRecording struct {
	// ShouldRecord ...
	ShouldRecord bool `json:"shouldRecord"`

	// Service ...
	Service *BackgroundServiceServiceName `json:"service"`
}

// BackgroundServiceSetRecordingResult type
type BackgroundServiceSetRecordingResult struct {
}

// Call of the command, sessionID is optional.
func (m BackgroundServiceSetRecording) Call(c *Call) (*BackgroundServiceSetRecordingResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "BackgroundServiceSetRecording", m)
	if err != nil {
		return nil, err
	}

	var res BackgroundServiceSetRecordingResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// BackgroundServiceClearEvents Clears all stored data for the service.
type BackgroundServiceClearEvents struct {
	// Service ...
	Service *BackgroundServiceServiceName `json:"service"`
}

// BackgroundServiceClearEventsResult type
type BackgroundServiceClearEventsResult struct {
}

// Call of the command, sessionID is optional.
func (m BackgroundServiceClearEvents) Call(c *Call) (*BackgroundServiceClearEventsResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "BackgroundServiceClearEvents", m)
	if err != nil {
		return nil, err
	}

	var res BackgroundServiceClearEventsResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}
