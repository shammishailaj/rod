// This file is generated by "./lib/proto/cmd/gen"

package proto

import (
	"encoding/json"
)

// HeapProfilerAddInspectedHeapObject Enables console to refer to the node with given id via $x (see Command Line API for more details
// $x functions).
type HeapProfilerAddInspectedHeapObject struct {
	// HeapObjectID Heap snapshot object id to be accessible by means of $x command line API.
	HeapObjectID *HeapProfilerHeapSnapshotObjectID `json:"heapObjectId"`
}

// HeapProfilerAddInspectedHeapObjectResult type
type HeapProfilerAddInspectedHeapObjectResult struct {
}

// Call of the command, sessionID is optional.
func (m HeapProfilerAddInspectedHeapObject) Call(c *Call) (*HeapProfilerAddInspectedHeapObjectResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "HeapProfilerAddInspectedHeapObject", m)
	if err != nil {
		return nil, err
	}

	var res HeapProfilerAddInspectedHeapObjectResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// HeapProfilerCollectGarbage ...
type HeapProfilerCollectGarbage struct {
}

// HeapProfilerCollectGarbageResult type
type HeapProfilerCollectGarbageResult struct {
}

// Call of the command, sessionID is optional.
func (m HeapProfilerCollectGarbage) Call(c *Call) (*HeapProfilerCollectGarbageResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "HeapProfilerCollectGarbage", m)
	if err != nil {
		return nil, err
	}

	var res HeapProfilerCollectGarbageResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// HeapProfilerDisable ...
type HeapProfilerDisable struct {
}

// HeapProfilerDisableResult type
type HeapProfilerDisableResult struct {
}

// Call of the command, sessionID is optional.
func (m HeapProfilerDisable) Call(c *Call) (*HeapProfilerDisableResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "HeapProfilerDisable", m)
	if err != nil {
		return nil, err
	}

	var res HeapProfilerDisableResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// HeapProfilerEnable ...
type HeapProfilerEnable struct {
}

// HeapProfilerEnableResult type
type HeapProfilerEnableResult struct {
}

// Call of the command, sessionID is optional.
func (m HeapProfilerEnable) Call(c *Call) (*HeapProfilerEnableResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "HeapProfilerEnable", m)
	if err != nil {
		return nil, err
	}

	var res HeapProfilerEnableResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// HeapProfilerGetHeapObjectID ...
type HeapProfilerGetHeapObjectID struct {
	// ObjectID Identifier of the object to get heap object id for.
	ObjectID *RuntimeRemoteObjectID `json:"objectId"`
}

// HeapProfilerGetHeapObjectIDResult type
type HeapProfilerGetHeapObjectIDResult struct {
	// HeapSnapshotObjectID Id of the heap snapshot object corresponding to the passed remote object id.
	HeapSnapshotObjectID *HeapProfilerHeapSnapshotObjectID `json:"heapSnapshotObjectId"`
}

// Call of the command, sessionID is optional.
func (m HeapProfilerGetHeapObjectID) Call(c *Call) (*HeapProfilerGetHeapObjectIDResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "HeapProfilerGetHeapObjectID", m)
	if err != nil {
		return nil, err
	}

	var res HeapProfilerGetHeapObjectIDResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// HeapProfilerGetObjectByHeapObjectID ...
type HeapProfilerGetObjectByHeapObjectID struct {
	// ObjectID ...
	ObjectID *HeapProfilerHeapSnapshotObjectID `json:"objectId"`

	// ObjectGroup Symbolic group name that can be used to release multiple objects.
	ObjectGroup string `json:"objectGroup,omitempty"`
}

// HeapProfilerGetObjectByHeapObjectIDResult type
type HeapProfilerGetObjectByHeapObjectIDResult struct {
	// Result Evaluation result.
	Result *RuntimeRemoteObject `json:"result"`
}

// Call of the command, sessionID is optional.
func (m HeapProfilerGetObjectByHeapObjectID) Call(c *Call) (*HeapProfilerGetObjectByHeapObjectIDResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "HeapProfilerGetObjectByHeapObjectID", m)
	if err != nil {
		return nil, err
	}

	var res HeapProfilerGetObjectByHeapObjectIDResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// HeapProfilerGetSamplingProfile ...
type HeapProfilerGetSamplingProfile struct {
}

// HeapProfilerGetSamplingProfileResult type
type HeapProfilerGetSamplingProfileResult struct {
	// Profile Return the sampling profile being collected.
	Profile *HeapProfilerSamplingHeapProfile `json:"profile"`
}

// Call of the command, sessionID is optional.
func (m HeapProfilerGetSamplingProfile) Call(c *Call) (*HeapProfilerGetSamplingProfileResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "HeapProfilerGetSamplingProfile", m)
	if err != nil {
		return nil, err
	}

	var res HeapProfilerGetSamplingProfileResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// HeapProfilerStartSampling ...
type HeapProfilerStartSampling struct {
	// SamplingInterval Average sample interval in bytes. Poisson distribution is used for the intervals. The
	// default value is 32768 bytes.
	SamplingInterval float64 `json:"samplingInterval,omitempty"`
}

// HeapProfilerStartSamplingResult type
type HeapProfilerStartSamplingResult struct {
}

// Call of the command, sessionID is optional.
func (m HeapProfilerStartSampling) Call(c *Call) (*HeapProfilerStartSamplingResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "HeapProfilerStartSampling", m)
	if err != nil {
		return nil, err
	}

	var res HeapProfilerStartSamplingResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// HeapProfilerStartTrackingHeapObjects ...
type HeapProfilerStartTrackingHeapObjects struct {
	// TrackAllocations ...
	TrackAllocations bool `json:"trackAllocations,omitempty"`
}

// HeapProfilerStartTrackingHeapObjectsResult type
type HeapProfilerStartTrackingHeapObjectsResult struct {
}

// Call of the command, sessionID is optional.
func (m HeapProfilerStartTrackingHeapObjects) Call(c *Call) (*HeapProfilerStartTrackingHeapObjectsResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "HeapProfilerStartTrackingHeapObjects", m)
	if err != nil {
		return nil, err
	}

	var res HeapProfilerStartTrackingHeapObjectsResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// HeapProfilerStopSampling ...
type HeapProfilerStopSampling struct {
}

// HeapProfilerStopSamplingResult type
type HeapProfilerStopSamplingResult struct {
	// Profile Recorded sampling heap profile.
	Profile *HeapProfilerSamplingHeapProfile `json:"profile"`
}

// Call of the command, sessionID is optional.
func (m HeapProfilerStopSampling) Call(c *Call) (*HeapProfilerStopSamplingResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "HeapProfilerStopSampling", m)
	if err != nil {
		return nil, err
	}

	var res HeapProfilerStopSamplingResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// HeapProfilerStopTrackingHeapObjects ...
type HeapProfilerStopTrackingHeapObjects struct {
	// ReportProgress If true 'reportHeapSnapshotProgress' events will be generated while snapshot is being taken
	// when the tracking is stopped.
	ReportProgress bool `json:"reportProgress,omitempty"`

	// TreatGlobalObjectsAsRoots ...
	TreatGlobalObjectsAsRoots bool `json:"treatGlobalObjectsAsRoots,omitempty"`
}

// HeapProfilerStopTrackingHeapObjectsResult type
type HeapProfilerStopTrackingHeapObjectsResult struct {
}

// Call of the command, sessionID is optional.
func (m HeapProfilerStopTrackingHeapObjects) Call(c *Call) (*HeapProfilerStopTrackingHeapObjectsResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "HeapProfilerStopTrackingHeapObjects", m)
	if err != nil {
		return nil, err
	}

	var res HeapProfilerStopTrackingHeapObjectsResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// HeapProfilerTakeHeapSnapshot ...
type HeapProfilerTakeHeapSnapshot struct {
	// ReportProgress If true 'reportHeapSnapshotProgress' events will be generated while snapshot is being taken.
	ReportProgress bool `json:"reportProgress,omitempty"`

	// TreatGlobalObjectsAsRoots If true, a raw snapshot without artifical roots will be generated
	TreatGlobalObjectsAsRoots bool `json:"treatGlobalObjectsAsRoots,omitempty"`
}

// HeapProfilerTakeHeapSnapshotResult type
type HeapProfilerTakeHeapSnapshotResult struct {
}

// Call of the command, sessionID is optional.
func (m HeapProfilerTakeHeapSnapshot) Call(c *Call) (*HeapProfilerTakeHeapSnapshotResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "HeapProfilerTakeHeapSnapshot", m)
	if err != nil {
		return nil, err
	}

	var res HeapProfilerTakeHeapSnapshotResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}
