// This file is generated by "./lib/proto/cmd/gen"

package proto

import (
	"encoding/json"
)

// WebAuthnEnable Enable the WebAuthn domain and start intercepting credential storage and
// retrieval with a virtual authenticator.
type WebAuthnEnable struct {
}

// WebAuthnEnableResult type
type WebAuthnEnableResult struct {
}

// Call of the command, sessionID is optional.
func (m WebAuthnEnable) Call(c *Call) (*WebAuthnEnableResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "WebAuthnEnable", m)
	if err != nil {
		return nil, err
	}

	var res WebAuthnEnableResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// WebAuthnDisable Disable the WebAuthn domain.
type WebAuthnDisable struct {
}

// WebAuthnDisableResult type
type WebAuthnDisableResult struct {
}

// Call of the command, sessionID is optional.
func (m WebAuthnDisable) Call(c *Call) (*WebAuthnDisableResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "WebAuthnDisable", m)
	if err != nil {
		return nil, err
	}

	var res WebAuthnDisableResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// WebAuthnAddVirtualAuthenticator Creates and adds a virtual authenticator.
type WebAuthnAddVirtualAuthenticator struct {
	// Options ...
	Options *WebAuthnVirtualAuthenticatorOptions `json:"options"`
}

// WebAuthnAddVirtualAuthenticatorResult type
type WebAuthnAddVirtualAuthenticatorResult struct {
	// AuthenticatorID ...
	AuthenticatorID *WebAuthnAuthenticatorID `json:"authenticatorId"`
}

// Call of the command, sessionID is optional.
func (m WebAuthnAddVirtualAuthenticator) Call(c *Call) (*WebAuthnAddVirtualAuthenticatorResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "WebAuthnAddVirtualAuthenticator", m)
	if err != nil {
		return nil, err
	}

	var res WebAuthnAddVirtualAuthenticatorResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// WebAuthnRemoveVirtualAuthenticator Removes the given authenticator.
type WebAuthnRemoveVirtualAuthenticator struct {
	// AuthenticatorID ...
	AuthenticatorID *WebAuthnAuthenticatorID `json:"authenticatorId"`
}

// WebAuthnRemoveVirtualAuthenticatorResult type
type WebAuthnRemoveVirtualAuthenticatorResult struct {
}

// Call of the command, sessionID is optional.
func (m WebAuthnRemoveVirtualAuthenticator) Call(c *Call) (*WebAuthnRemoveVirtualAuthenticatorResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "WebAuthnRemoveVirtualAuthenticator", m)
	if err != nil {
		return nil, err
	}

	var res WebAuthnRemoveVirtualAuthenticatorResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// WebAuthnAddCredential Adds the credential to the specified authenticator.
type WebAuthnAddCredential struct {
	// AuthenticatorID ...
	AuthenticatorID *WebAuthnAuthenticatorID `json:"authenticatorId"`

	// Credential ...
	Credential *WebAuthnCredential `json:"credential"`
}

// WebAuthnAddCredentialResult type
type WebAuthnAddCredentialResult struct {
}

// Call of the command, sessionID is optional.
func (m WebAuthnAddCredential) Call(c *Call) (*WebAuthnAddCredentialResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "WebAuthnAddCredential", m)
	if err != nil {
		return nil, err
	}

	var res WebAuthnAddCredentialResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// WebAuthnGetCredential Returns a single credential stored in the given virtual authenticator that
// matches the credential ID.
type WebAuthnGetCredential struct {
	// AuthenticatorID ...
	AuthenticatorID *WebAuthnAuthenticatorID `json:"authenticatorId"`

	// CredentialID ...
	CredentialID []byte `json:"credentialId"`
}

// WebAuthnGetCredentialResult type
type WebAuthnGetCredentialResult struct {
	// Credential ...
	Credential *WebAuthnCredential `json:"credential"`
}

// Call of the command, sessionID is optional.
func (m WebAuthnGetCredential) Call(c *Call) (*WebAuthnGetCredentialResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "WebAuthnGetCredential", m)
	if err != nil {
		return nil, err
	}

	var res WebAuthnGetCredentialResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// WebAuthnGetCredentials Returns all the credentials stored in the given virtual authenticator.
type WebAuthnGetCredentials struct {
	// AuthenticatorID ...
	AuthenticatorID *WebAuthnAuthenticatorID `json:"authenticatorId"`
}

// WebAuthnGetCredentialsResult type
type WebAuthnGetCredentialsResult struct {
	// Credentials ...
	Credentials []*WebAuthnCredential `json:"credentials"`
}

// Call of the command, sessionID is optional.
func (m WebAuthnGetCredentials) Call(c *Call) (*WebAuthnGetCredentialsResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "WebAuthnGetCredentials", m)
	if err != nil {
		return nil, err
	}

	var res WebAuthnGetCredentialsResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// WebAuthnRemoveCredential Removes a credential from the authenticator.
type WebAuthnRemoveCredential struct {
	// AuthenticatorID ...
	AuthenticatorID *WebAuthnAuthenticatorID `json:"authenticatorId"`

	// CredentialID ...
	CredentialID []byte `json:"credentialId"`
}

// WebAuthnRemoveCredentialResult type
type WebAuthnRemoveCredentialResult struct {
}

// Call of the command, sessionID is optional.
func (m WebAuthnRemoveCredential) Call(c *Call) (*WebAuthnRemoveCredentialResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "WebAuthnRemoveCredential", m)
	if err != nil {
		return nil, err
	}

	var res WebAuthnRemoveCredentialResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// WebAuthnClearCredentials Clears all the credentials from the specified device.
type WebAuthnClearCredentials struct {
	// AuthenticatorID ...
	AuthenticatorID *WebAuthnAuthenticatorID `json:"authenticatorId"`
}

// WebAuthnClearCredentialsResult type
type WebAuthnClearCredentialsResult struct {
}

// Call of the command, sessionID is optional.
func (m WebAuthnClearCredentials) Call(c *Call) (*WebAuthnClearCredentialsResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "WebAuthnClearCredentials", m)
	if err != nil {
		return nil, err
	}

	var res WebAuthnClearCredentialsResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// WebAuthnSetUserVerified Sets whether User Verification succeeds or fails for an authenticator.
// The default is true.
type WebAuthnSetUserVerified struct {
	// AuthenticatorID ...
	AuthenticatorID *WebAuthnAuthenticatorID `json:"authenticatorId"`

	// IsUserVerified ...
	IsUserVerified bool `json:"isUserVerified"`
}

// WebAuthnSetUserVerifiedResult type
type WebAuthnSetUserVerifiedResult struct {
}

// Call of the command, sessionID is optional.
func (m WebAuthnSetUserVerified) Call(c *Call) (*WebAuthnSetUserVerifiedResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "WebAuthnSetUserVerified", m)
	if err != nil {
		return nil, err
	}

	var res WebAuthnSetUserVerifiedResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}
