// This file is generated by "./lib/proto/cmd/gen"

package proto

// AccessibilityAXNodeID Unique accessibility node identifier.
type AccessibilityAXNodeID string

// AccessibilityAXValueType Enum of possible property types.
type AccessibilityAXValueType string

const (
	// AccessibilityAXValueTypeBoolean enum value
	AccessibilityAXValueTypeBoolean AccessibilityAXValueType = "boolean"

	// AccessibilityAXValueTypeTristate enum value
	AccessibilityAXValueTypeTristate AccessibilityAXValueType = "tristate"

	// AccessibilityAXValueTypeBooleanOrUndefined enum value
	AccessibilityAXValueTypeBooleanOrUndefined AccessibilityAXValueType = "booleanOrUndefined"

	// AccessibilityAXValueTypeIdref enum value
	AccessibilityAXValueTypeIdref AccessibilityAXValueType = "idref"

	// AccessibilityAXValueTypeIdrefList enum value
	AccessibilityAXValueTypeIdrefList AccessibilityAXValueType = "idrefList"

	// AccessibilityAXValueTypeInteger enum value
	AccessibilityAXValueTypeInteger AccessibilityAXValueType = "integer"

	// AccessibilityAXValueTypeNode enum value
	AccessibilityAXValueTypeNode AccessibilityAXValueType = "node"

	// AccessibilityAXValueTypeNodeList enum value
	AccessibilityAXValueTypeNodeList AccessibilityAXValueType = "nodeList"

	// AccessibilityAXValueTypeNumber enum value
	AccessibilityAXValueTypeNumber AccessibilityAXValueType = "number"

	// AccessibilityAXValueTypeString enum value
	AccessibilityAXValueTypeString AccessibilityAXValueType = "string"

	// AccessibilityAXValueTypeComputedString enum value
	AccessibilityAXValueTypeComputedString AccessibilityAXValueType = "computedString"

	// AccessibilityAXValueTypeToken enum value
	AccessibilityAXValueTypeToken AccessibilityAXValueType = "token"

	// AccessibilityAXValueTypeTokenList enum value
	AccessibilityAXValueTypeTokenList AccessibilityAXValueType = "tokenList"

	// AccessibilityAXValueTypeDomRelation enum value
	AccessibilityAXValueTypeDomRelation AccessibilityAXValueType = "domRelation"

	// AccessibilityAXValueTypeRole enum value
	AccessibilityAXValueTypeRole AccessibilityAXValueType = "role"

	// AccessibilityAXValueTypeInternalRole enum value
	AccessibilityAXValueTypeInternalRole AccessibilityAXValueType = "internalRole"

	// AccessibilityAXValueTypeValueUndefined enum value
	AccessibilityAXValueTypeValueUndefined AccessibilityAXValueType = "valueUndefined"
)

// AccessibilityAXValueSourceType Enum of possible property sources.
type AccessibilityAXValueSourceType string

const (
	// AccessibilityAXValueSourceTypeAttribute enum value
	AccessibilityAXValueSourceTypeAttribute AccessibilityAXValueSourceType = "attribute"

	// AccessibilityAXValueSourceTypeImplicit enum value
	AccessibilityAXValueSourceTypeImplicit AccessibilityAXValueSourceType = "implicit"

	// AccessibilityAXValueSourceTypeStyle enum value
	AccessibilityAXValueSourceTypeStyle AccessibilityAXValueSourceType = "style"

	// AccessibilityAXValueSourceTypeContents enum value
	AccessibilityAXValueSourceTypeContents AccessibilityAXValueSourceType = "contents"

	// AccessibilityAXValueSourceTypePlaceholder enum value
	AccessibilityAXValueSourceTypePlaceholder AccessibilityAXValueSourceType = "placeholder"

	// AccessibilityAXValueSourceTypeRelatedElement enum value
	AccessibilityAXValueSourceTypeRelatedElement AccessibilityAXValueSourceType = "relatedElement"
)

// AccessibilityAXValueNativeSourceType Enum of possible native property sources (as a subtype of a particular AXValueSourceType).
type AccessibilityAXValueNativeSourceType string

const (
	// AccessibilityAXValueNativeSourceTypeFigcaption enum value
	AccessibilityAXValueNativeSourceTypeFigcaption AccessibilityAXValueNativeSourceType = "figcaption"

	// AccessibilityAXValueNativeSourceTypeLabel enum value
	AccessibilityAXValueNativeSourceTypeLabel AccessibilityAXValueNativeSourceType = "label"

	// AccessibilityAXValueNativeSourceTypeLabelfor enum value
	AccessibilityAXValueNativeSourceTypeLabelfor AccessibilityAXValueNativeSourceType = "labelfor"

	// AccessibilityAXValueNativeSourceTypeLabelwrapped enum value
	AccessibilityAXValueNativeSourceTypeLabelwrapped AccessibilityAXValueNativeSourceType = "labelwrapped"

	// AccessibilityAXValueNativeSourceTypeLegend enum value
	AccessibilityAXValueNativeSourceTypeLegend AccessibilityAXValueNativeSourceType = "legend"

	// AccessibilityAXValueNativeSourceTypeTablecaption enum value
	AccessibilityAXValueNativeSourceTypeTablecaption AccessibilityAXValueNativeSourceType = "tablecaption"

	// AccessibilityAXValueNativeSourceTypeTitle enum value
	AccessibilityAXValueNativeSourceTypeTitle AccessibilityAXValueNativeSourceType = "title"

	// AccessibilityAXValueNativeSourceTypeOther enum value
	AccessibilityAXValueNativeSourceTypeOther AccessibilityAXValueNativeSourceType = "other"
)

// AccessibilityAXValueSource A single source for a computed AX property.
type AccessibilityAXValueSource struct {
	// Type What type of source this is.
	Type *AccessibilityAXValueSourceType `json:"type"`

	// Value The value of this property source.
	Value *AccessibilityAXValue `json:"value,omitempty"`

	// Attribute The name of the relevant attribute, if any.
	Attribute string `json:"attribute,omitempty"`

	// AttributeValue The value of the relevant attribute, if any.
	AttributeValue *AccessibilityAXValue `json:"attributeValue,omitempty"`

	// Superseded Whether this source is superseded by a higher priority source.
	Superseded bool `json:"superseded,omitempty"`

	// NativeSource The native markup source for this value, e.g. a <label> element.
	NativeSource *AccessibilityAXValueNativeSourceType `json:"nativeSource,omitempty"`

	// NativeSourceValue The value, such as a node or node list, of the native source.
	NativeSourceValue *AccessibilityAXValue `json:"nativeSourceValue,omitempty"`

	// Invalid Whether the value for this property is invalid.
	Invalid bool `json:"invalid,omitempty"`

	// InvalidReason Reason for the value being invalid, if it is.
	InvalidReason string `json:"invalidReason,omitempty"`
}

// AccessibilityAXRelatedNode ...
type AccessibilityAXRelatedNode struct {
	// BackendDOMNodeID The BackendNodeId of the related DOM node.
	BackendDOMNodeID *DOMBackendNodeID `json:"backendDOMNodeId"`

	// Idref The IDRef value provided, if any.
	Idref string `json:"idref,omitempty"`

	// Text The text alternative of this node in the current context.
	Text string `json:"text,omitempty"`
}

// AccessibilityAXProperty ...
type AccessibilityAXProperty struct {
	// Name The name of this property.
	Name *AccessibilityAXPropertyName `json:"name"`

	// Value The value of this property.
	Value *AccessibilityAXValue `json:"value"`
}

// AccessibilityAXValue A single computed AX property.
type AccessibilityAXValue struct {
	// Type The type of this value.
	Type *AccessibilityAXValueType `json:"type"`

	// Value The computed value of this property.
	Value interface{} `json:"value,omitempty"`

	// RelatedNodes One or more related nodes, if applicable.
	RelatedNodes []*AccessibilityAXRelatedNode `json:"relatedNodes,omitempty"`

	// Sources The sources which contributed to the computation of this property.
	Sources []*AccessibilityAXValueSource `json:"sources,omitempty"`
}

// AccessibilityAXPropertyName Values of AXProperty name:
// - from 'busy' to 'roledescription': states which apply to every AX node
// - from 'live' to 'root': attributes which apply to nodes in live regions
// - from 'autocomplete' to 'valuetext': attributes which apply to widgets
// - from 'checked' to 'selected': states which apply to widgets
// - from 'activedescendant' to 'owns' - relationships between elements other than parent/child/sibling.
type AccessibilityAXPropertyName string

const (
	// AccessibilityAXPropertyNameBusy enum value
	AccessibilityAXPropertyNameBusy AccessibilityAXPropertyName = "busy"

	// AccessibilityAXPropertyNameDisabled enum value
	AccessibilityAXPropertyNameDisabled AccessibilityAXPropertyName = "disabled"

	// AccessibilityAXPropertyNameEditable enum value
	AccessibilityAXPropertyNameEditable AccessibilityAXPropertyName = "editable"

	// AccessibilityAXPropertyNameFocusable enum value
	AccessibilityAXPropertyNameFocusable AccessibilityAXPropertyName = "focusable"

	// AccessibilityAXPropertyNameFocused enum value
	AccessibilityAXPropertyNameFocused AccessibilityAXPropertyName = "focused"

	// AccessibilityAXPropertyNameHidden enum value
	AccessibilityAXPropertyNameHidden AccessibilityAXPropertyName = "hidden"

	// AccessibilityAXPropertyNameHiddenRoot enum value
	AccessibilityAXPropertyNameHiddenRoot AccessibilityAXPropertyName = "hiddenRoot"

	// AccessibilityAXPropertyNameInvalid enum value
	AccessibilityAXPropertyNameInvalid AccessibilityAXPropertyName = "invalid"

	// AccessibilityAXPropertyNameKeyshortcuts enum value
	AccessibilityAXPropertyNameKeyshortcuts AccessibilityAXPropertyName = "keyshortcuts"

	// AccessibilityAXPropertyNameSettable enum value
	AccessibilityAXPropertyNameSettable AccessibilityAXPropertyName = "settable"

	// AccessibilityAXPropertyNameRoledescription enum value
	AccessibilityAXPropertyNameRoledescription AccessibilityAXPropertyName = "roledescription"

	// AccessibilityAXPropertyNameLive enum value
	AccessibilityAXPropertyNameLive AccessibilityAXPropertyName = "live"

	// AccessibilityAXPropertyNameAtomic enum value
	AccessibilityAXPropertyNameAtomic AccessibilityAXPropertyName = "atomic"

	// AccessibilityAXPropertyNameRelevant enum value
	AccessibilityAXPropertyNameRelevant AccessibilityAXPropertyName = "relevant"

	// AccessibilityAXPropertyNameRoot enum value
	AccessibilityAXPropertyNameRoot AccessibilityAXPropertyName = "root"

	// AccessibilityAXPropertyNameAutocomplete enum value
	AccessibilityAXPropertyNameAutocomplete AccessibilityAXPropertyName = "autocomplete"

	// AccessibilityAXPropertyNameHasPopup enum value
	AccessibilityAXPropertyNameHasPopup AccessibilityAXPropertyName = "hasPopup"

	// AccessibilityAXPropertyNameLevel enum value
	AccessibilityAXPropertyNameLevel AccessibilityAXPropertyName = "level"

	// AccessibilityAXPropertyNameMultiselectable enum value
	AccessibilityAXPropertyNameMultiselectable AccessibilityAXPropertyName = "multiselectable"

	// AccessibilityAXPropertyNameOrientation enum value
	AccessibilityAXPropertyNameOrientation AccessibilityAXPropertyName = "orientation"

	// AccessibilityAXPropertyNameMultiline enum value
	AccessibilityAXPropertyNameMultiline AccessibilityAXPropertyName = "multiline"

	// AccessibilityAXPropertyNameReadonly enum value
	AccessibilityAXPropertyNameReadonly AccessibilityAXPropertyName = "readonly"

	// AccessibilityAXPropertyNameRequired enum value
	AccessibilityAXPropertyNameRequired AccessibilityAXPropertyName = "required"

	// AccessibilityAXPropertyNameValuemin enum value
	AccessibilityAXPropertyNameValuemin AccessibilityAXPropertyName = "valuemin"

	// AccessibilityAXPropertyNameValuemax enum value
	AccessibilityAXPropertyNameValuemax AccessibilityAXPropertyName = "valuemax"

	// AccessibilityAXPropertyNameValuetext enum value
	AccessibilityAXPropertyNameValuetext AccessibilityAXPropertyName = "valuetext"

	// AccessibilityAXPropertyNameChecked enum value
	AccessibilityAXPropertyNameChecked AccessibilityAXPropertyName = "checked"

	// AccessibilityAXPropertyNameExpanded enum value
	AccessibilityAXPropertyNameExpanded AccessibilityAXPropertyName = "expanded"

	// AccessibilityAXPropertyNameModal enum value
	AccessibilityAXPropertyNameModal AccessibilityAXPropertyName = "modal"

	// AccessibilityAXPropertyNamePressed enum value
	AccessibilityAXPropertyNamePressed AccessibilityAXPropertyName = "pressed"

	// AccessibilityAXPropertyNameSelected enum value
	AccessibilityAXPropertyNameSelected AccessibilityAXPropertyName = "selected"

	// AccessibilityAXPropertyNameActivedescendant enum value
	AccessibilityAXPropertyNameActivedescendant AccessibilityAXPropertyName = "activedescendant"

	// AccessibilityAXPropertyNameControls enum value
	AccessibilityAXPropertyNameControls AccessibilityAXPropertyName = "controls"

	// AccessibilityAXPropertyNameDescribedby enum value
	AccessibilityAXPropertyNameDescribedby AccessibilityAXPropertyName = "describedby"

	// AccessibilityAXPropertyNameDetails enum value
	AccessibilityAXPropertyNameDetails AccessibilityAXPropertyName = "details"

	// AccessibilityAXPropertyNameErrormessage enum value
	AccessibilityAXPropertyNameErrormessage AccessibilityAXPropertyName = "errormessage"

	// AccessibilityAXPropertyNameFlowto enum value
	AccessibilityAXPropertyNameFlowto AccessibilityAXPropertyName = "flowto"

	// AccessibilityAXPropertyNameLabelledby enum value
	AccessibilityAXPropertyNameLabelledby AccessibilityAXPropertyName = "labelledby"

	// AccessibilityAXPropertyNameOwns enum value
	AccessibilityAXPropertyNameOwns AccessibilityAXPropertyName = "owns"
)

// AccessibilityAXNode A node in the accessibility tree.
type AccessibilityAXNode struct {
	// NodeID Unique identifier for this node.
	NodeID *AccessibilityAXNodeID `json:"nodeId"`

	// Ignored Whether this node is ignored for accessibility
	Ignored bool `json:"ignored"`

	// IgnoredReasons Collection of reasons why this node is hidden.
	IgnoredReasons []*AccessibilityAXProperty `json:"ignoredReasons,omitempty"`

	// Role This `Node`'s role, whether explicit or implicit.
	Role *AccessibilityAXValue `json:"role,omitempty"`

	// Name The accessible name for this `Node`.
	Name *AccessibilityAXValue `json:"name,omitempty"`

	// Description The accessible description for this `Node`.
	Description *AccessibilityAXValue `json:"description,omitempty"`

	// Value The value for this `Node`.
	Value *AccessibilityAXValue `json:"value,omitempty"`

	// Properties All other properties
	Properties []*AccessibilityAXProperty `json:"properties,omitempty"`

	// ChildIds IDs for each of this node's child nodes.
	ChildIds []*AccessibilityAXNodeID `json:"childIds,omitempty"`

	// BackendDOMNodeID The backend ID for the associated DOM node, if any.
	BackendDOMNodeID *DOMBackendNodeID `json:"backendDOMNodeId,omitempty"`
}
