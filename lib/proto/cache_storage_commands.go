// This file is generated by "./lib/proto/cmd/gen"

package proto

import (
	"encoding/json"
)

// CacheStorageDeleteCache Deletes a cache.
type CacheStorageDeleteCache struct {
	// CacheID Id of cache for deletion.
	CacheID *CacheStorageCacheID `json:"cacheId"`
}

// CacheStorageDeleteCacheResult type
type CacheStorageDeleteCacheResult struct {
}

// Call of the command, sessionID is optional.
func (m CacheStorageDeleteCache) Call(c *Call) (*CacheStorageDeleteCacheResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "CacheStorageDeleteCache", m)
	if err != nil {
		return nil, err
	}

	var res CacheStorageDeleteCacheResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// CacheStorageDeleteEntry Deletes a cache entry.
type CacheStorageDeleteEntry struct {
	// CacheID Id of cache where the entry will be deleted.
	CacheID *CacheStorageCacheID `json:"cacheId"`

	// Request URL spec of the request.
	Request string `json:"request"`
}

// CacheStorageDeleteEntryResult type
type CacheStorageDeleteEntryResult struct {
}

// Call of the command, sessionID is optional.
func (m CacheStorageDeleteEntry) Call(c *Call) (*CacheStorageDeleteEntryResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "CacheStorageDeleteEntry", m)
	if err != nil {
		return nil, err
	}

	var res CacheStorageDeleteEntryResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// CacheStorageRequestCacheNames Requests cache names.
type CacheStorageRequestCacheNames struct {
	// SecurityOrigin Security origin.
	SecurityOrigin string `json:"securityOrigin"`
}

// CacheStorageRequestCacheNamesResult type
type CacheStorageRequestCacheNamesResult struct {
	// Caches Caches for the security origin.
	Caches []*CacheStorageCache `json:"caches"`
}

// Call of the command, sessionID is optional.
func (m CacheStorageRequestCacheNames) Call(c *Call) (*CacheStorageRequestCacheNamesResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "CacheStorageRequestCacheNames", m)
	if err != nil {
		return nil, err
	}

	var res CacheStorageRequestCacheNamesResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// CacheStorageRequestCachedResponse Fetches cache entry.
type CacheStorageRequestCachedResponse struct {
	// CacheID Id of cache that contains the entry.
	CacheID *CacheStorageCacheID `json:"cacheId"`

	// RequestURL URL spec of the request.
	RequestURL string `json:"requestURL"`

	// RequestHeaders headers of the request.
	RequestHeaders []*CacheStorageHeader `json:"requestHeaders"`
}

// CacheStorageRequestCachedResponseResult type
type CacheStorageRequestCachedResponseResult struct {
	// Response Response read from the cache.
	Response *CacheStorageCachedResponse `json:"response"`
}

// Call of the command, sessionID is optional.
func (m CacheStorageRequestCachedResponse) Call(c *Call) (*CacheStorageRequestCachedResponseResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "CacheStorageRequestCachedResponse", m)
	if err != nil {
		return nil, err
	}

	var res CacheStorageRequestCachedResponseResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// CacheStorageRequestEntries Requests data from cache.
type CacheStorageRequestEntries struct {
	// CacheID ID of cache to get entries from.
	CacheID *CacheStorageCacheID `json:"cacheId"`

	// SkipCount Number of records to skip.
	SkipCount int64 `json:"skipCount,omitempty"`

	// PageSize Number of records to fetch.
	PageSize int64 `json:"pageSize,omitempty"`

	// PathFilter If present, only return the entries containing this substring in the path
	PathFilter string `json:"pathFilter,omitempty"`
}

// CacheStorageRequestEntriesResult type
type CacheStorageRequestEntriesResult struct {
	// CacheDataEntries Array of object store data entries.
	CacheDataEntries []*CacheStorageDataEntry `json:"cacheDataEntries"`

	// ReturnCount Count of returned entries from this storage. If pathFilter is empty, it
	// is the count of all entries from this storage.
	ReturnCount float64 `json:"returnCount"`
}

// Call of the command, sessionID is optional.
func (m CacheStorageRequestEntries) Call(c *Call) (*CacheStorageRequestEntriesResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "CacheStorageRequestEntries", m)
	if err != nil {
		return nil, err
	}

	var res CacheStorageRequestEntriesResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}
