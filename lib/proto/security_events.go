// This file is generated by "./lib/proto/cmd/gen"

package proto

import "encoding/json"

// SecurityCertificateError (deprecated) There is a certificate error. If overriding certificate errors is enabled, then it should be
// handled with the `handleCertificateError` command. Note: this event does not fire if the
// certificate error has been allowed internally. Only one client per target should override
// certificate errors at the same time.
type SecurityCertificateError struct {
	// EventID The ID of the event.
	EventID int64 `json:"eventId"`

	// ErrorType The type of the error.
	ErrorType string `json:"errorType"`

	// RequestURL The url that was requested.
	RequestURL string `json:"requestURL"`
}

// MethodName interface
func (evt SecurityCertificateError) MethodName() string {
	return "Security.certificateError"
}

// Load json
func (evt SecurityCertificateError) Load(b []byte) *SecurityCertificateError {
	E(json.Unmarshal(b, &evt))
	return &evt
}

// SecurityVisibleSecurityStateChanged (experimental) The security state of the page changed.
type SecurityVisibleSecurityStateChanged struct {
	// VisibleSecurityState Security state information about the page.
	VisibleSecurityState *SecurityVisibleSecurityState `json:"visibleSecurityState"`
}

// MethodName interface
func (evt SecurityVisibleSecurityStateChanged) MethodName() string {
	return "Security.visibleSecurityStateChanged"
}

// Load json
func (evt SecurityVisibleSecurityStateChanged) Load(b []byte) *SecurityVisibleSecurityStateChanged {
	E(json.Unmarshal(b, &evt))
	return &evt
}

// SecuritySecurityStateChanged The security state of the page changed.
type SecuritySecurityStateChanged struct {
	// SecurityState Security state.
	SecurityState *SecuritySecurityState `json:"securityState"`

	// SchemeIsCryptographic (deprecated) True if the page was loaded over cryptographic transport such as HTTPS.
	SchemeIsCryptographic bool `json:"schemeIsCryptographic"`

	// Explanations List of explanations for the security state. If the overall security state is `insecure` or
	// `warning`, at least one corresponding explanation should be included.
	Explanations []*SecuritySecurityStateExplanation `json:"explanations"`

	// InsecureContentStatus (deprecated) Information about insecure content on the page.
	InsecureContentStatus *SecurityInsecureContentStatus `json:"insecureContentStatus"`

	// Summary Overrides user-visible description of the state.
	Summary string `json:"summary,omitempty"`
}

// MethodName interface
func (evt SecuritySecurityStateChanged) MethodName() string {
	return "Security.securityStateChanged"
}

// Load json
func (evt SecuritySecurityStateChanged) Load(b []byte) *SecuritySecurityStateChanged {
	E(json.Unmarshal(b, &evt))
	return &evt
}
