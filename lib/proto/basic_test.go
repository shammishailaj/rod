// This file is generated by "./lib/proto/cmd/gen"

package proto_test

import (
	"context"
	"errors"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/ysmood/rod/lib/proto"
)

func TestAccessibilityDisable(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.AccessibilityDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.AccessibilityDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.AccessibilityDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestAccessibilityEnable(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.AccessibilityEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.AccessibilityEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.AccessibilityEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestAccessibilityGetPartialAXTree(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.AccessibilityGetPartialAXTree{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.AccessibilityGetPartialAXTree{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.AccessibilityGetPartialAXTree{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestAccessibilityGetFullAXTree(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.AccessibilityGetFullAXTree{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.AccessibilityGetFullAXTree{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.AccessibilityGetFullAXTree{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestAnimationDisable(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.AnimationDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.AnimationDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.AnimationDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestAnimationEnable(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.AnimationEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.AnimationEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.AnimationEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestAnimationGetCurrentTime(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.AnimationGetCurrentTime{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.AnimationGetCurrentTime{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.AnimationGetCurrentTime{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestAnimationGetPlaybackRate(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.AnimationGetPlaybackRate{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.AnimationGetPlaybackRate{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.AnimationGetPlaybackRate{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestAnimationReleaseAnimations(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.AnimationReleaseAnimations{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.AnimationReleaseAnimations{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.AnimationReleaseAnimations{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestAnimationResolveAnimation(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.AnimationResolveAnimation{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.AnimationResolveAnimation{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.AnimationResolveAnimation{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestAnimationSeekAnimations(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.AnimationSeekAnimations{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.AnimationSeekAnimations{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.AnimationSeekAnimations{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestAnimationSetPaused(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.AnimationSetPaused{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.AnimationSetPaused{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.AnimationSetPaused{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestAnimationSetPlaybackRate(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.AnimationSetPlaybackRate{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.AnimationSetPlaybackRate{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.AnimationSetPlaybackRate{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestAnimationSetTiming(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.AnimationSetTiming{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.AnimationSetTiming{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.AnimationSetTiming{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestAnimationAnimationCanceled(t *testing.T) {
	e := proto.AnimationAnimationCanceled{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestAnimationAnimationCreated(t *testing.T) {
	e := proto.AnimationAnimationCreated{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestAnimationAnimationStarted(t *testing.T) {
	e := proto.AnimationAnimationStarted{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestApplicationCacheEnable(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.ApplicationCacheEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.ApplicationCacheEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.ApplicationCacheEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestApplicationCacheGetApplicationCacheForFrame(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.ApplicationCacheGetApplicationCacheForFrame{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.ApplicationCacheGetApplicationCacheForFrame{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.ApplicationCacheGetApplicationCacheForFrame{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestApplicationCacheGetFramesWithManifests(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.ApplicationCacheGetFramesWithManifests{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.ApplicationCacheGetFramesWithManifests{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.ApplicationCacheGetFramesWithManifests{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestApplicationCacheGetManifestForFrame(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.ApplicationCacheGetManifestForFrame{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.ApplicationCacheGetManifestForFrame{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.ApplicationCacheGetManifestForFrame{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestApplicationCacheApplicationCacheStatusUpdated(t *testing.T) {
	e := proto.ApplicationCacheApplicationCacheStatusUpdated{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestApplicationCacheNetworkStateUpdated(t *testing.T) {
	e := proto.ApplicationCacheNetworkStateUpdated{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestAuditsGetEncodedResponse(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.AuditsGetEncodedResponse{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.AuditsGetEncodedResponse{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.AuditsGetEncodedResponse{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestBackgroundServiceStartObserving(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.BackgroundServiceStartObserving{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.BackgroundServiceStartObserving{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.BackgroundServiceStartObserving{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestBackgroundServiceStopObserving(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.BackgroundServiceStopObserving{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.BackgroundServiceStopObserving{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.BackgroundServiceStopObserving{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestBackgroundServiceSetRecording(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.BackgroundServiceSetRecording{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.BackgroundServiceSetRecording{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.BackgroundServiceSetRecording{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestBackgroundServiceClearEvents(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.BackgroundServiceClearEvents{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.BackgroundServiceClearEvents{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.BackgroundServiceClearEvents{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestBackgroundServiceRecordingStateChanged(t *testing.T) {
	e := proto.BackgroundServiceRecordingStateChanged{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestBackgroundServiceBackgroundServiceEventReceived(t *testing.T) {
	e := proto.BackgroundServiceBackgroundServiceEventReceived{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestBrowserSetPermission(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.BrowserSetPermission{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.BrowserSetPermission{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.BrowserSetPermission{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestBrowserGrantPermissions(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.BrowserGrantPermissions{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.BrowserGrantPermissions{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.BrowserGrantPermissions{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestBrowserResetPermissions(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.BrowserResetPermissions{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.BrowserResetPermissions{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.BrowserResetPermissions{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestBrowserClose(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.BrowserClose{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.BrowserClose{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.BrowserClose{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestBrowserCrash(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.BrowserCrash{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.BrowserCrash{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.BrowserCrash{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestBrowserCrashGpuProcess(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.BrowserCrashGpuProcess{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.BrowserCrashGpuProcess{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.BrowserCrashGpuProcess{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestBrowserGetVersion(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.BrowserGetVersion{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.BrowserGetVersion{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.BrowserGetVersion{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestBrowserGetBrowserCommandLine(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.BrowserGetBrowserCommandLine{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.BrowserGetBrowserCommandLine{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.BrowserGetBrowserCommandLine{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestBrowserGetHistograms(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.BrowserGetHistograms{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.BrowserGetHistograms{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.BrowserGetHistograms{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestBrowserGetHistogram(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.BrowserGetHistogram{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.BrowserGetHistogram{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.BrowserGetHistogram{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestBrowserGetWindowBounds(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.BrowserGetWindowBounds{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.BrowserGetWindowBounds{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.BrowserGetWindowBounds{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestBrowserGetWindowForTarget(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.BrowserGetWindowForTarget{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.BrowserGetWindowForTarget{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.BrowserGetWindowForTarget{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestBrowserSetWindowBounds(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.BrowserSetWindowBounds{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.BrowserSetWindowBounds{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.BrowserSetWindowBounds{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestBrowserSetDockTile(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.BrowserSetDockTile{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.BrowserSetDockTile{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.BrowserSetDockTile{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestCSSAddRule(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.CSSAddRule{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.CSSAddRule{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.CSSAddRule{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestCSSCollectClassNames(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.CSSCollectClassNames{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.CSSCollectClassNames{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.CSSCollectClassNames{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestCSSCreateStyleSheet(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.CSSCreateStyleSheet{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.CSSCreateStyleSheet{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.CSSCreateStyleSheet{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestCSSDisable(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.CSSDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.CSSDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.CSSDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestCSSEnable(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.CSSEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.CSSEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.CSSEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestCSSForcePseudoState(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.CSSForcePseudoState{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.CSSForcePseudoState{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.CSSForcePseudoState{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestCSSGetBackgroundColors(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.CSSGetBackgroundColors{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.CSSGetBackgroundColors{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.CSSGetBackgroundColors{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestCSSGetComputedStyleForNode(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.CSSGetComputedStyleForNode{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.CSSGetComputedStyleForNode{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.CSSGetComputedStyleForNode{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestCSSGetInlineStylesForNode(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.CSSGetInlineStylesForNode{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.CSSGetInlineStylesForNode{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.CSSGetInlineStylesForNode{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestCSSGetMatchedStylesForNode(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.CSSGetMatchedStylesForNode{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.CSSGetMatchedStylesForNode{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.CSSGetMatchedStylesForNode{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestCSSGetMediaQueries(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.CSSGetMediaQueries{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.CSSGetMediaQueries{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.CSSGetMediaQueries{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestCSSGetPlatformFontsForNode(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.CSSGetPlatformFontsForNode{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.CSSGetPlatformFontsForNode{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.CSSGetPlatformFontsForNode{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestCSSGetStyleSheetText(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.CSSGetStyleSheetText{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.CSSGetStyleSheetText{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.CSSGetStyleSheetText{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestCSSSetEffectivePropertyValueForNode(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.CSSSetEffectivePropertyValueForNode{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.CSSSetEffectivePropertyValueForNode{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.CSSSetEffectivePropertyValueForNode{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestCSSSetKeyframeKey(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.CSSSetKeyframeKey{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.CSSSetKeyframeKey{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.CSSSetKeyframeKey{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestCSSSetMediaText(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.CSSSetMediaText{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.CSSSetMediaText{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.CSSSetMediaText{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestCSSSetRuleSelector(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.CSSSetRuleSelector{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.CSSSetRuleSelector{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.CSSSetRuleSelector{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestCSSSetStyleSheetText(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.CSSSetStyleSheetText{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.CSSSetStyleSheetText{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.CSSSetStyleSheetText{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestCSSSetStyleTexts(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.CSSSetStyleTexts{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.CSSSetStyleTexts{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.CSSSetStyleTexts{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestCSSStartRuleUsageTracking(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.CSSStartRuleUsageTracking{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.CSSStartRuleUsageTracking{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.CSSStartRuleUsageTracking{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestCSSStopRuleUsageTracking(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.CSSStopRuleUsageTracking{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.CSSStopRuleUsageTracking{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.CSSStopRuleUsageTracking{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestCSSTakeCoverageDelta(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.CSSTakeCoverageDelta{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.CSSTakeCoverageDelta{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.CSSTakeCoverageDelta{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestCSSFontsUpdated(t *testing.T) {
	e := proto.CSSFontsUpdated{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestCSSMediaQueryResultChanged(t *testing.T) {
	e := proto.CSSMediaQueryResultChanged{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestCSSStyleSheetAdded(t *testing.T) {
	e := proto.CSSStyleSheetAdded{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestCSSStyleSheetChanged(t *testing.T) {
	e := proto.CSSStyleSheetChanged{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestCSSStyleSheetRemoved(t *testing.T) {
	e := proto.CSSStyleSheetRemoved{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestCacheStorageDeleteCache(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.CacheStorageDeleteCache{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.CacheStorageDeleteCache{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.CacheStorageDeleteCache{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestCacheStorageDeleteEntry(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.CacheStorageDeleteEntry{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.CacheStorageDeleteEntry{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.CacheStorageDeleteEntry{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestCacheStorageRequestCacheNames(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.CacheStorageRequestCacheNames{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.CacheStorageRequestCacheNames{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.CacheStorageRequestCacheNames{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestCacheStorageRequestCachedResponse(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.CacheStorageRequestCachedResponse{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.CacheStorageRequestCachedResponse{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.CacheStorageRequestCachedResponse{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestCacheStorageRequestEntries(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.CacheStorageRequestEntries{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.CacheStorageRequestEntries{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.CacheStorageRequestEntries{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestCastEnable(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.CastEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.CastEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.CastEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestCastDisable(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.CastDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.CastDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.CastDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestCastSetSinkToUse(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.CastSetSinkToUse{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.CastSetSinkToUse{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.CastSetSinkToUse{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestCastStartTabMirroring(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.CastStartTabMirroring{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.CastStartTabMirroring{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.CastStartTabMirroring{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestCastStopCasting(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.CastStopCasting{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.CastStopCasting{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.CastStopCasting{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestCastSinksUpdated(t *testing.T) {
	e := proto.CastSinksUpdated{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestCastIssueUpdated(t *testing.T) {
	e := proto.CastIssueUpdated{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestDOMCollectClassNamesFromSubtree(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DOMCollectClassNamesFromSubtree{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DOMCollectClassNamesFromSubtree{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DOMCollectClassNamesFromSubtree{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDOMCopyTo(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DOMCopyTo{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DOMCopyTo{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DOMCopyTo{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDOMDescribeNode(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DOMDescribeNode{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DOMDescribeNode{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DOMDescribeNode{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDOMDisable(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DOMDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DOMDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DOMDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDOMDiscardSearchResults(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DOMDiscardSearchResults{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DOMDiscardSearchResults{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DOMDiscardSearchResults{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDOMEnable(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DOMEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DOMEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DOMEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDOMFocus(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DOMFocus{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DOMFocus{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DOMFocus{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDOMGetAttributes(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DOMGetAttributes{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DOMGetAttributes{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DOMGetAttributes{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDOMGetBoxModel(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DOMGetBoxModel{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DOMGetBoxModel{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DOMGetBoxModel{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDOMGetContentQuads(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DOMGetContentQuads{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DOMGetContentQuads{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DOMGetContentQuads{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDOMGetDocument(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DOMGetDocument{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DOMGetDocument{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DOMGetDocument{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDOMGetFlattenedDocument(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DOMGetFlattenedDocument{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DOMGetFlattenedDocument{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DOMGetFlattenedDocument{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDOMGetNodeForLocation(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DOMGetNodeForLocation{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DOMGetNodeForLocation{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DOMGetNodeForLocation{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDOMGetOuterHTML(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DOMGetOuterHTML{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DOMGetOuterHTML{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DOMGetOuterHTML{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDOMGetRelayoutBoundary(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DOMGetRelayoutBoundary{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DOMGetRelayoutBoundary{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DOMGetRelayoutBoundary{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDOMGetSearchResults(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DOMGetSearchResults{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DOMGetSearchResults{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DOMGetSearchResults{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDOMHideHighlight(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DOMHideHighlight{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DOMHideHighlight{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DOMHideHighlight{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDOMHighlightNode(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DOMHighlightNode{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DOMHighlightNode{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DOMHighlightNode{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDOMHighlightRect(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DOMHighlightRect{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DOMHighlightRect{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DOMHighlightRect{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDOMMarkUndoableState(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DOMMarkUndoableState{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DOMMarkUndoableState{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DOMMarkUndoableState{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDOMMoveTo(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DOMMoveTo{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DOMMoveTo{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DOMMoveTo{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDOMPerformSearch(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DOMPerformSearch{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DOMPerformSearch{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DOMPerformSearch{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDOMPushNodeByPathToFrontend(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DOMPushNodeByPathToFrontend{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DOMPushNodeByPathToFrontend{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DOMPushNodeByPathToFrontend{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDOMPushNodesByBackendIdsToFrontend(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DOMPushNodesByBackendIdsToFrontend{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DOMPushNodesByBackendIdsToFrontend{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DOMPushNodesByBackendIdsToFrontend{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDOMQuerySelector(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DOMQuerySelector{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DOMQuerySelector{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DOMQuerySelector{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDOMQuerySelectorAll(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DOMQuerySelectorAll{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DOMQuerySelectorAll{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DOMQuerySelectorAll{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDOMRedo(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DOMRedo{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DOMRedo{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DOMRedo{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDOMRemoveAttribute(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DOMRemoveAttribute{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DOMRemoveAttribute{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DOMRemoveAttribute{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDOMRemoveNode(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DOMRemoveNode{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DOMRemoveNode{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DOMRemoveNode{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDOMRequestChildNodes(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DOMRequestChildNodes{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DOMRequestChildNodes{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DOMRequestChildNodes{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDOMRequestNode(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DOMRequestNode{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DOMRequestNode{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DOMRequestNode{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDOMResolveNode(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DOMResolveNode{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DOMResolveNode{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DOMResolveNode{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDOMSetAttributeValue(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DOMSetAttributeValue{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DOMSetAttributeValue{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DOMSetAttributeValue{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDOMSetAttributesAsText(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DOMSetAttributesAsText{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DOMSetAttributesAsText{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DOMSetAttributesAsText{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDOMSetFileInputFiles(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DOMSetFileInputFiles{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DOMSetFileInputFiles{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DOMSetFileInputFiles{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDOMSetNodeStackTracesEnabled(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DOMSetNodeStackTracesEnabled{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DOMSetNodeStackTracesEnabled{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DOMSetNodeStackTracesEnabled{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDOMGetNodeStackTraces(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DOMGetNodeStackTraces{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DOMGetNodeStackTraces{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DOMGetNodeStackTraces{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDOMGetFileInfo(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DOMGetFileInfo{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DOMGetFileInfo{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DOMGetFileInfo{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDOMSetInspectedNode(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DOMSetInspectedNode{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DOMSetInspectedNode{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DOMSetInspectedNode{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDOMSetNodeName(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DOMSetNodeName{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DOMSetNodeName{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DOMSetNodeName{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDOMSetNodeValue(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DOMSetNodeValue{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DOMSetNodeValue{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DOMSetNodeValue{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDOMSetOuterHTML(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DOMSetOuterHTML{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DOMSetOuterHTML{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DOMSetOuterHTML{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDOMUndo(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DOMUndo{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DOMUndo{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DOMUndo{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDOMGetFrameOwner(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DOMGetFrameOwner{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DOMGetFrameOwner{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DOMGetFrameOwner{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDOMAttributeModified(t *testing.T) {
	e := proto.DOMAttributeModified{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestDOMAttributeRemoved(t *testing.T) {
	e := proto.DOMAttributeRemoved{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestDOMCharacterDataModified(t *testing.T) {
	e := proto.DOMCharacterDataModified{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestDOMChildNodeCountUpdated(t *testing.T) {
	e := proto.DOMChildNodeCountUpdated{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestDOMChildNodeInserted(t *testing.T) {
	e := proto.DOMChildNodeInserted{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestDOMChildNodeRemoved(t *testing.T) {
	e := proto.DOMChildNodeRemoved{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestDOMDistributedNodesUpdated(t *testing.T) {
	e := proto.DOMDistributedNodesUpdated{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestDOMDocumentUpdated(t *testing.T) {
	e := proto.DOMDocumentUpdated{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestDOMInlineStyleInvalidated(t *testing.T) {
	e := proto.DOMInlineStyleInvalidated{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestDOMPseudoElementAdded(t *testing.T) {
	e := proto.DOMPseudoElementAdded{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestDOMPseudoElementRemoved(t *testing.T) {
	e := proto.DOMPseudoElementRemoved{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestDOMSetChildNodes(t *testing.T) {
	e := proto.DOMSetChildNodes{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestDOMShadowRootPopped(t *testing.T) {
	e := proto.DOMShadowRootPopped{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestDOMShadowRootPushed(t *testing.T) {
	e := proto.DOMShadowRootPushed{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestDOMDebuggerGetEventListeners(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DOMDebuggerGetEventListeners{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DOMDebuggerGetEventListeners{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DOMDebuggerGetEventListeners{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDOMDebuggerRemoveDOMBreakpoint(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DOMDebuggerRemoveDOMBreakpoint{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DOMDebuggerRemoveDOMBreakpoint{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DOMDebuggerRemoveDOMBreakpoint{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDOMDebuggerRemoveEventListenerBreakpoint(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DOMDebuggerRemoveEventListenerBreakpoint{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DOMDebuggerRemoveEventListenerBreakpoint{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DOMDebuggerRemoveEventListenerBreakpoint{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDOMDebuggerRemoveInstrumentationBreakpoint(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DOMDebuggerRemoveInstrumentationBreakpoint{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DOMDebuggerRemoveInstrumentationBreakpoint{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DOMDebuggerRemoveInstrumentationBreakpoint{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDOMDebuggerRemoveXHRBreakpoint(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DOMDebuggerRemoveXHRBreakpoint{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DOMDebuggerRemoveXHRBreakpoint{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DOMDebuggerRemoveXHRBreakpoint{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDOMDebuggerSetDOMBreakpoint(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DOMDebuggerSetDOMBreakpoint{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DOMDebuggerSetDOMBreakpoint{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DOMDebuggerSetDOMBreakpoint{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDOMDebuggerSetEventListenerBreakpoint(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DOMDebuggerSetEventListenerBreakpoint{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DOMDebuggerSetEventListenerBreakpoint{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DOMDebuggerSetEventListenerBreakpoint{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDOMDebuggerSetInstrumentationBreakpoint(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DOMDebuggerSetInstrumentationBreakpoint{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DOMDebuggerSetInstrumentationBreakpoint{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DOMDebuggerSetInstrumentationBreakpoint{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDOMDebuggerSetXHRBreakpoint(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DOMDebuggerSetXHRBreakpoint{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DOMDebuggerSetXHRBreakpoint{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DOMDebuggerSetXHRBreakpoint{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDOMSnapshotDisable(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DOMSnapshotDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DOMSnapshotDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DOMSnapshotDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDOMSnapshotEnable(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DOMSnapshotEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DOMSnapshotEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DOMSnapshotEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDOMSnapshotGetSnapshot(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DOMSnapshotGetSnapshot{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DOMSnapshotGetSnapshot{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DOMSnapshotGetSnapshot{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDOMSnapshotCaptureSnapshot(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DOMSnapshotCaptureSnapshot{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DOMSnapshotCaptureSnapshot{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DOMSnapshotCaptureSnapshot{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDOMStorageClear(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DOMStorageClear{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DOMStorageClear{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DOMStorageClear{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDOMStorageDisable(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DOMStorageDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DOMStorageDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DOMStorageDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDOMStorageEnable(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DOMStorageEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DOMStorageEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DOMStorageEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDOMStorageGetDOMStorageItems(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DOMStorageGetDOMStorageItems{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DOMStorageGetDOMStorageItems{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DOMStorageGetDOMStorageItems{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDOMStorageRemoveDOMStorageItem(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DOMStorageRemoveDOMStorageItem{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DOMStorageRemoveDOMStorageItem{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DOMStorageRemoveDOMStorageItem{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDOMStorageSetDOMStorageItem(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DOMStorageSetDOMStorageItem{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DOMStorageSetDOMStorageItem{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DOMStorageSetDOMStorageItem{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDOMStorageDomStorageItemAdded(t *testing.T) {
	e := proto.DOMStorageDomStorageItemAdded{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestDOMStorageDomStorageItemRemoved(t *testing.T) {
	e := proto.DOMStorageDomStorageItemRemoved{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestDOMStorageDomStorageItemUpdated(t *testing.T) {
	e := proto.DOMStorageDomStorageItemUpdated{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestDOMStorageDomStorageItemsCleared(t *testing.T) {
	e := proto.DOMStorageDomStorageItemsCleared{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestDatabaseDisable(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DatabaseDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DatabaseDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DatabaseDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDatabaseEnable(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DatabaseEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DatabaseEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DatabaseEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDatabaseExecuteSQL(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DatabaseExecuteSQL{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DatabaseExecuteSQL{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DatabaseExecuteSQL{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDatabaseGetDatabaseTableNames(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DatabaseGetDatabaseTableNames{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DatabaseGetDatabaseTableNames{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DatabaseGetDatabaseTableNames{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDatabaseAddDatabase(t *testing.T) {
	e := proto.DatabaseAddDatabase{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestDeviceOrientationClearDeviceOrientationOverride(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DeviceOrientationClearDeviceOrientationOverride{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DeviceOrientationClearDeviceOrientationOverride{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DeviceOrientationClearDeviceOrientationOverride{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDeviceOrientationSetDeviceOrientationOverride(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DeviceOrientationSetDeviceOrientationOverride{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DeviceOrientationSetDeviceOrientationOverride{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DeviceOrientationSetDeviceOrientationOverride{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestEmulationCanEmulate(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.EmulationCanEmulate{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.EmulationCanEmulate{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.EmulationCanEmulate{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestEmulationClearDeviceMetricsOverride(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.EmulationClearDeviceMetricsOverride{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.EmulationClearDeviceMetricsOverride{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.EmulationClearDeviceMetricsOverride{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestEmulationClearGeolocationOverride(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.EmulationClearGeolocationOverride{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.EmulationClearGeolocationOverride{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.EmulationClearGeolocationOverride{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestEmulationResetPageScaleFactor(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.EmulationResetPageScaleFactor{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.EmulationResetPageScaleFactor{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.EmulationResetPageScaleFactor{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestEmulationSetFocusEmulationEnabled(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.EmulationSetFocusEmulationEnabled{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.EmulationSetFocusEmulationEnabled{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.EmulationSetFocusEmulationEnabled{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestEmulationSetCPUThrottlingRate(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.EmulationSetCPUThrottlingRate{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.EmulationSetCPUThrottlingRate{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.EmulationSetCPUThrottlingRate{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestEmulationSetDefaultBackgroundColorOverride(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.EmulationSetDefaultBackgroundColorOverride{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.EmulationSetDefaultBackgroundColorOverride{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.EmulationSetDefaultBackgroundColorOverride{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestEmulationSetDeviceMetricsOverride(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.EmulationSetDeviceMetricsOverride{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.EmulationSetDeviceMetricsOverride{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.EmulationSetDeviceMetricsOverride{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestEmulationSetScrollbarsHidden(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.EmulationSetScrollbarsHidden{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.EmulationSetScrollbarsHidden{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.EmulationSetScrollbarsHidden{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestEmulationSetDocumentCookieDisabled(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.EmulationSetDocumentCookieDisabled{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.EmulationSetDocumentCookieDisabled{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.EmulationSetDocumentCookieDisabled{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestEmulationSetEmitTouchEventsForMouse(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.EmulationSetEmitTouchEventsForMouse{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.EmulationSetEmitTouchEventsForMouse{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.EmulationSetEmitTouchEventsForMouse{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestEmulationSetEmulatedMedia(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.EmulationSetEmulatedMedia{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.EmulationSetEmulatedMedia{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.EmulationSetEmulatedMedia{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestEmulationSetGeolocationOverride(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.EmulationSetGeolocationOverride{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.EmulationSetGeolocationOverride{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.EmulationSetGeolocationOverride{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestEmulationSetNavigatorOverrides(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.EmulationSetNavigatorOverrides{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.EmulationSetNavigatorOverrides{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.EmulationSetNavigatorOverrides{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestEmulationSetPageScaleFactor(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.EmulationSetPageScaleFactor{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.EmulationSetPageScaleFactor{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.EmulationSetPageScaleFactor{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestEmulationSetScriptExecutionDisabled(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.EmulationSetScriptExecutionDisabled{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.EmulationSetScriptExecutionDisabled{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.EmulationSetScriptExecutionDisabled{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestEmulationSetTouchEmulationEnabled(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.EmulationSetTouchEmulationEnabled{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.EmulationSetTouchEmulationEnabled{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.EmulationSetTouchEmulationEnabled{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestEmulationSetVirtualTimePolicy(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.EmulationSetVirtualTimePolicy{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.EmulationSetVirtualTimePolicy{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.EmulationSetVirtualTimePolicy{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestEmulationSetTimezoneOverride(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.EmulationSetTimezoneOverride{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.EmulationSetTimezoneOverride{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.EmulationSetTimezoneOverride{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestEmulationSetVisibleSize(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.EmulationSetVisibleSize{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.EmulationSetVisibleSize{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.EmulationSetVisibleSize{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestEmulationSetUserAgentOverride(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.EmulationSetUserAgentOverride{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.EmulationSetUserAgentOverride{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.EmulationSetUserAgentOverride{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestEmulationVirtualTimeBudgetExpired(t *testing.T) {
	e := proto.EmulationVirtualTimeBudgetExpired{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestHeadlessExperimentalBeginFrame(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.HeadlessExperimentalBeginFrame{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.HeadlessExperimentalBeginFrame{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.HeadlessExperimentalBeginFrame{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestHeadlessExperimentalDisable(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.HeadlessExperimentalDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.HeadlessExperimentalDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.HeadlessExperimentalDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestHeadlessExperimentalEnable(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.HeadlessExperimentalEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.HeadlessExperimentalEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.HeadlessExperimentalEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestHeadlessExperimentalNeedsBeginFramesChanged(t *testing.T) {
	e := proto.HeadlessExperimentalNeedsBeginFramesChanged{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestIOClose(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.IOClose{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.IOClose{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.IOClose{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestIORead(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.IORead{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.IORead{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.IORead{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestIOResolveBlob(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.IOResolveBlob{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.IOResolveBlob{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.IOResolveBlob{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestIndexedDBClearObjectStore(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.IndexedDBClearObjectStore{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.IndexedDBClearObjectStore{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.IndexedDBClearObjectStore{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestIndexedDBDeleteDatabase(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.IndexedDBDeleteDatabase{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.IndexedDBDeleteDatabase{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.IndexedDBDeleteDatabase{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestIndexedDBDeleteObjectStoreEntries(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.IndexedDBDeleteObjectStoreEntries{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.IndexedDBDeleteObjectStoreEntries{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.IndexedDBDeleteObjectStoreEntries{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestIndexedDBDisable(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.IndexedDBDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.IndexedDBDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.IndexedDBDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestIndexedDBEnable(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.IndexedDBEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.IndexedDBEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.IndexedDBEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestIndexedDBRequestData(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.IndexedDBRequestData{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.IndexedDBRequestData{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.IndexedDBRequestData{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestIndexedDBGetMetadata(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.IndexedDBGetMetadata{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.IndexedDBGetMetadata{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.IndexedDBGetMetadata{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestIndexedDBRequestDatabase(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.IndexedDBRequestDatabase{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.IndexedDBRequestDatabase{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.IndexedDBRequestDatabase{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestIndexedDBRequestDatabaseNames(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.IndexedDBRequestDatabaseNames{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.IndexedDBRequestDatabaseNames{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.IndexedDBRequestDatabaseNames{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestInputDispatchKeyEvent(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.InputDispatchKeyEvent{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.InputDispatchKeyEvent{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.InputDispatchKeyEvent{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestInputInsertText(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.InputInsertText{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.InputInsertText{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.InputInsertText{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestInputDispatchMouseEvent(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.InputDispatchMouseEvent{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.InputDispatchMouseEvent{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.InputDispatchMouseEvent{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestInputDispatchTouchEvent(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.InputDispatchTouchEvent{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.InputDispatchTouchEvent{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.InputDispatchTouchEvent{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestInputEmulateTouchFromMouseEvent(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.InputEmulateTouchFromMouseEvent{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.InputEmulateTouchFromMouseEvent{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.InputEmulateTouchFromMouseEvent{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestInputSetIgnoreInputEvents(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.InputSetIgnoreInputEvents{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.InputSetIgnoreInputEvents{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.InputSetIgnoreInputEvents{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestInputSynthesizePinchGesture(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.InputSynthesizePinchGesture{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.InputSynthesizePinchGesture{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.InputSynthesizePinchGesture{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestInputSynthesizeScrollGesture(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.InputSynthesizeScrollGesture{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.InputSynthesizeScrollGesture{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.InputSynthesizeScrollGesture{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestInputSynthesizeTapGesture(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.InputSynthesizeTapGesture{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.InputSynthesizeTapGesture{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.InputSynthesizeTapGesture{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestInspectorDisable(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.InspectorDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.InspectorDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.InspectorDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestInspectorEnable(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.InspectorEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.InspectorEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.InspectorEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestInspectorDetached(t *testing.T) {
	e := proto.InspectorDetached{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestInspectorTargetCrashed(t *testing.T) {
	e := proto.InspectorTargetCrashed{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestInspectorTargetReloadedAfterCrash(t *testing.T) {
	e := proto.InspectorTargetReloadedAfterCrash{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestLayerTreeCompositingReasons(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.LayerTreeCompositingReasons{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.LayerTreeCompositingReasons{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.LayerTreeCompositingReasons{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestLayerTreeDisable(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.LayerTreeDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.LayerTreeDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.LayerTreeDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestLayerTreeEnable(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.LayerTreeEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.LayerTreeEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.LayerTreeEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestLayerTreeLoadSnapshot(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.LayerTreeLoadSnapshot{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.LayerTreeLoadSnapshot{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.LayerTreeLoadSnapshot{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestLayerTreeMakeSnapshot(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.LayerTreeMakeSnapshot{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.LayerTreeMakeSnapshot{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.LayerTreeMakeSnapshot{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestLayerTreeProfileSnapshot(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.LayerTreeProfileSnapshot{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.LayerTreeProfileSnapshot{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.LayerTreeProfileSnapshot{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestLayerTreeReleaseSnapshot(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.LayerTreeReleaseSnapshot{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.LayerTreeReleaseSnapshot{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.LayerTreeReleaseSnapshot{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestLayerTreeReplaySnapshot(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.LayerTreeReplaySnapshot{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.LayerTreeReplaySnapshot{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.LayerTreeReplaySnapshot{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestLayerTreeSnapshotCommandLog(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.LayerTreeSnapshotCommandLog{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.LayerTreeSnapshotCommandLog{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.LayerTreeSnapshotCommandLog{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestLayerTreeLayerPainted(t *testing.T) {
	e := proto.LayerTreeLayerPainted{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestLayerTreeLayerTreeDidChange(t *testing.T) {
	e := proto.LayerTreeLayerTreeDidChange{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestLogClear(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.LogClear{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.LogClear{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.LogClear{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestLogDisable(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.LogDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.LogDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.LogDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestLogEnable(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.LogEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.LogEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.LogEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestLogStartViolationsReport(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.LogStartViolationsReport{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.LogStartViolationsReport{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.LogStartViolationsReport{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestLogStopViolationsReport(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.LogStopViolationsReport{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.LogStopViolationsReport{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.LogStopViolationsReport{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestLogEntryAdded(t *testing.T) {
	e := proto.LogEntryAdded{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestMemoryGetDOMCounters(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.MemoryGetDOMCounters{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.MemoryGetDOMCounters{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.MemoryGetDOMCounters{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestMemoryPrepareForLeakDetection(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.MemoryPrepareForLeakDetection{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.MemoryPrepareForLeakDetection{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.MemoryPrepareForLeakDetection{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestMemoryForciblyPurgeJavaScriptMemory(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.MemoryForciblyPurgeJavaScriptMemory{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.MemoryForciblyPurgeJavaScriptMemory{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.MemoryForciblyPurgeJavaScriptMemory{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestMemorySetPressureNotificationsSuppressed(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.MemorySetPressureNotificationsSuppressed{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.MemorySetPressureNotificationsSuppressed{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.MemorySetPressureNotificationsSuppressed{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestMemorySimulatePressureNotification(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.MemorySimulatePressureNotification{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.MemorySimulatePressureNotification{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.MemorySimulatePressureNotification{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestMemoryStartSampling(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.MemoryStartSampling{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.MemoryStartSampling{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.MemoryStartSampling{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestMemoryStopSampling(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.MemoryStopSampling{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.MemoryStopSampling{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.MemoryStopSampling{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestMemoryGetAllTimeSamplingProfile(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.MemoryGetAllTimeSamplingProfile{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.MemoryGetAllTimeSamplingProfile{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.MemoryGetAllTimeSamplingProfile{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestMemoryGetBrowserSamplingProfile(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.MemoryGetBrowserSamplingProfile{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.MemoryGetBrowserSamplingProfile{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.MemoryGetBrowserSamplingProfile{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestMemoryGetSamplingProfile(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.MemoryGetSamplingProfile{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.MemoryGetSamplingProfile{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.MemoryGetSamplingProfile{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestNetworkCanClearBrowserCache(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.NetworkCanClearBrowserCache{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.NetworkCanClearBrowserCache{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.NetworkCanClearBrowserCache{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestNetworkCanClearBrowserCookies(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.NetworkCanClearBrowserCookies{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.NetworkCanClearBrowserCookies{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.NetworkCanClearBrowserCookies{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestNetworkCanEmulateNetworkConditions(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.NetworkCanEmulateNetworkConditions{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.NetworkCanEmulateNetworkConditions{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.NetworkCanEmulateNetworkConditions{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestNetworkClearBrowserCache(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.NetworkClearBrowserCache{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.NetworkClearBrowserCache{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.NetworkClearBrowserCache{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestNetworkClearBrowserCookies(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.NetworkClearBrowserCookies{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.NetworkClearBrowserCookies{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.NetworkClearBrowserCookies{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestNetworkContinueInterceptedRequest(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.NetworkContinueInterceptedRequest{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.NetworkContinueInterceptedRequest{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.NetworkContinueInterceptedRequest{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestNetworkDeleteCookies(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.NetworkDeleteCookies{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.NetworkDeleteCookies{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.NetworkDeleteCookies{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestNetworkDisable(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.NetworkDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.NetworkDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.NetworkDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestNetworkEmulateNetworkConditions(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.NetworkEmulateNetworkConditions{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.NetworkEmulateNetworkConditions{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.NetworkEmulateNetworkConditions{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestNetworkEnable(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.NetworkEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.NetworkEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.NetworkEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestNetworkGetAllCookies(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.NetworkGetAllCookies{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.NetworkGetAllCookies{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.NetworkGetAllCookies{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestNetworkGetCertificate(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.NetworkGetCertificate{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.NetworkGetCertificate{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.NetworkGetCertificate{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestNetworkGetCookies(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.NetworkGetCookies{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.NetworkGetCookies{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.NetworkGetCookies{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestNetworkGetResponseBody(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.NetworkGetResponseBody{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.NetworkGetResponseBody{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.NetworkGetResponseBody{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestNetworkGetRequestPostData(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.NetworkGetRequestPostData{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.NetworkGetRequestPostData{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.NetworkGetRequestPostData{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestNetworkGetResponseBodyForInterception(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.NetworkGetResponseBodyForInterception{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.NetworkGetResponseBodyForInterception{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.NetworkGetResponseBodyForInterception{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestNetworkTakeResponseBodyForInterceptionAsStream(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.NetworkTakeResponseBodyForInterceptionAsStream{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.NetworkTakeResponseBodyForInterceptionAsStream{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.NetworkTakeResponseBodyForInterceptionAsStream{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestNetworkReplayXHR(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.NetworkReplayXHR{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.NetworkReplayXHR{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.NetworkReplayXHR{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestNetworkSearchInResponseBody(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.NetworkSearchInResponseBody{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.NetworkSearchInResponseBody{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.NetworkSearchInResponseBody{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestNetworkSetBlockedURLs(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.NetworkSetBlockedURLs{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.NetworkSetBlockedURLs{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.NetworkSetBlockedURLs{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestNetworkSetBypassServiceWorker(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.NetworkSetBypassServiceWorker{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.NetworkSetBypassServiceWorker{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.NetworkSetBypassServiceWorker{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestNetworkSetCacheDisabled(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.NetworkSetCacheDisabled{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.NetworkSetCacheDisabled{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.NetworkSetCacheDisabled{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestNetworkSetCookie(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.NetworkSetCookie{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.NetworkSetCookie{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.NetworkSetCookie{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestNetworkSetCookies(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.NetworkSetCookies{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.NetworkSetCookies{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.NetworkSetCookies{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestNetworkSetDataSizeLimitsForTest(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.NetworkSetDataSizeLimitsForTest{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.NetworkSetDataSizeLimitsForTest{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.NetworkSetDataSizeLimitsForTest{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestNetworkSetExtraHTTPHeaders(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.NetworkSetExtraHTTPHeaders{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.NetworkSetExtraHTTPHeaders{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.NetworkSetExtraHTTPHeaders{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestNetworkSetRequestInterception(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.NetworkSetRequestInterception{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.NetworkSetRequestInterception{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.NetworkSetRequestInterception{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestNetworkSetUserAgentOverride(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.NetworkSetUserAgentOverride{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.NetworkSetUserAgentOverride{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.NetworkSetUserAgentOverride{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestNetworkDataReceived(t *testing.T) {
	e := proto.NetworkDataReceived{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestNetworkEventSourceMessageReceived(t *testing.T) {
	e := proto.NetworkEventSourceMessageReceived{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestNetworkLoadingFailed(t *testing.T) {
	e := proto.NetworkLoadingFailed{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestNetworkLoadingFinished(t *testing.T) {
	e := proto.NetworkLoadingFinished{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestNetworkRequestIntercepted(t *testing.T) {
	e := proto.NetworkRequestIntercepted{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestNetworkRequestServedFromCache(t *testing.T) {
	e := proto.NetworkRequestServedFromCache{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestNetworkRequestWillBeSent(t *testing.T) {
	e := proto.NetworkRequestWillBeSent{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestNetworkResourceChangedPriority(t *testing.T) {
	e := proto.NetworkResourceChangedPriority{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestNetworkSignedExchangeReceived(t *testing.T) {
	e := proto.NetworkSignedExchangeReceived{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestNetworkResponseReceived(t *testing.T) {
	e := proto.NetworkResponseReceived{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestNetworkWebSocketClosed(t *testing.T) {
	e := proto.NetworkWebSocketClosed{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestNetworkWebSocketCreated(t *testing.T) {
	e := proto.NetworkWebSocketCreated{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestNetworkWebSocketFrameError(t *testing.T) {
	e := proto.NetworkWebSocketFrameError{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestNetworkWebSocketFrameReceived(t *testing.T) {
	e := proto.NetworkWebSocketFrameReceived{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestNetworkWebSocketFrameSent(t *testing.T) {
	e := proto.NetworkWebSocketFrameSent{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestNetworkWebSocketHandshakeResponseReceived(t *testing.T) {
	e := proto.NetworkWebSocketHandshakeResponseReceived{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestNetworkWebSocketWillSendHandshakeRequest(t *testing.T) {
	e := proto.NetworkWebSocketWillSendHandshakeRequest{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestNetworkRequestWillBeSentExtraInfo(t *testing.T) {
	e := proto.NetworkRequestWillBeSentExtraInfo{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestNetworkResponseReceivedExtraInfo(t *testing.T) {
	e := proto.NetworkResponseReceivedExtraInfo{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestOverlayDisable(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.OverlayDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.OverlayDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.OverlayDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestOverlayEnable(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.OverlayEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.OverlayEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.OverlayEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestOverlayGetHighlightObjectForTest(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.OverlayGetHighlightObjectForTest{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.OverlayGetHighlightObjectForTest{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.OverlayGetHighlightObjectForTest{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestOverlayHideHighlight(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.OverlayHideHighlight{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.OverlayHideHighlight{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.OverlayHideHighlight{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestOverlayHighlightFrame(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.OverlayHighlightFrame{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.OverlayHighlightFrame{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.OverlayHighlightFrame{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestOverlayHighlightNode(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.OverlayHighlightNode{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.OverlayHighlightNode{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.OverlayHighlightNode{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestOverlayHighlightQuad(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.OverlayHighlightQuad{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.OverlayHighlightQuad{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.OverlayHighlightQuad{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestOverlayHighlightRect(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.OverlayHighlightRect{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.OverlayHighlightRect{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.OverlayHighlightRect{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestOverlaySetInspectMode(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.OverlaySetInspectMode{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.OverlaySetInspectMode{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.OverlaySetInspectMode{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestOverlaySetShowAdHighlights(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.OverlaySetShowAdHighlights{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.OverlaySetShowAdHighlights{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.OverlaySetShowAdHighlights{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestOverlaySetPausedInDebuggerMessage(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.OverlaySetPausedInDebuggerMessage{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.OverlaySetPausedInDebuggerMessage{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.OverlaySetPausedInDebuggerMessage{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestOverlaySetShowDebugBorders(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.OverlaySetShowDebugBorders{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.OverlaySetShowDebugBorders{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.OverlaySetShowDebugBorders{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestOverlaySetShowFPSCounter(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.OverlaySetShowFPSCounter{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.OverlaySetShowFPSCounter{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.OverlaySetShowFPSCounter{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestOverlaySetShowPaintRects(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.OverlaySetShowPaintRects{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.OverlaySetShowPaintRects{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.OverlaySetShowPaintRects{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestOverlaySetShowLayoutShiftRegions(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.OverlaySetShowLayoutShiftRegions{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.OverlaySetShowLayoutShiftRegions{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.OverlaySetShowLayoutShiftRegions{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestOverlaySetShowScrollBottleneckRects(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.OverlaySetShowScrollBottleneckRects{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.OverlaySetShowScrollBottleneckRects{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.OverlaySetShowScrollBottleneckRects{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestOverlaySetShowHitTestBorders(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.OverlaySetShowHitTestBorders{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.OverlaySetShowHitTestBorders{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.OverlaySetShowHitTestBorders{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestOverlaySetShowViewportSizeOnResize(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.OverlaySetShowViewportSizeOnResize{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.OverlaySetShowViewportSizeOnResize{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.OverlaySetShowViewportSizeOnResize{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestOverlayInspectNodeRequested(t *testing.T) {
	e := proto.OverlayInspectNodeRequested{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestOverlayNodeHighlightRequested(t *testing.T) {
	e := proto.OverlayNodeHighlightRequested{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestOverlayScreenshotRequested(t *testing.T) {
	e := proto.OverlayScreenshotRequested{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestOverlayInspectModeCanceled(t *testing.T) {
	e := proto.OverlayInspectModeCanceled{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestPageAddScriptToEvaluateOnLoad(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.PageAddScriptToEvaluateOnLoad{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.PageAddScriptToEvaluateOnLoad{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.PageAddScriptToEvaluateOnLoad{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestPageAddScriptToEvaluateOnNewDocument(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.PageAddScriptToEvaluateOnNewDocument{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.PageAddScriptToEvaluateOnNewDocument{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.PageAddScriptToEvaluateOnNewDocument{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestPageBringToFront(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.PageBringToFront{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.PageBringToFront{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.PageBringToFront{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestPageCaptureScreenshot(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.PageCaptureScreenshot{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.PageCaptureScreenshot{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.PageCaptureScreenshot{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestPageCaptureSnapshot(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.PageCaptureSnapshot{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.PageCaptureSnapshot{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.PageCaptureSnapshot{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestPageClearDeviceMetricsOverride(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.PageClearDeviceMetricsOverride{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.PageClearDeviceMetricsOverride{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.PageClearDeviceMetricsOverride{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestPageClearDeviceOrientationOverride(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.PageClearDeviceOrientationOverride{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.PageClearDeviceOrientationOverride{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.PageClearDeviceOrientationOverride{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestPageClearGeolocationOverride(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.PageClearGeolocationOverride{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.PageClearGeolocationOverride{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.PageClearGeolocationOverride{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestPageCreateIsolatedWorld(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.PageCreateIsolatedWorld{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.PageCreateIsolatedWorld{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.PageCreateIsolatedWorld{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestPageDeleteCookie(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.PageDeleteCookie{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.PageDeleteCookie{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.PageDeleteCookie{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestPageDisable(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.PageDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.PageDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.PageDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestPageEnable(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.PageEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.PageEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.PageEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestPageGetAppManifest(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.PageGetAppManifest{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.PageGetAppManifest{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.PageGetAppManifest{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestPageGetInstallabilityErrors(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.PageGetInstallabilityErrors{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.PageGetInstallabilityErrors{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.PageGetInstallabilityErrors{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestPageGetManifestIcons(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.PageGetManifestIcons{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.PageGetManifestIcons{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.PageGetManifestIcons{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestPageGetCookies(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.PageGetCookies{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.PageGetCookies{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.PageGetCookies{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestPageGetFrameTree(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.PageGetFrameTree{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.PageGetFrameTree{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.PageGetFrameTree{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestPageGetLayoutMetrics(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.PageGetLayoutMetrics{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.PageGetLayoutMetrics{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.PageGetLayoutMetrics{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestPageGetNavigationHistory(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.PageGetNavigationHistory{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.PageGetNavigationHistory{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.PageGetNavigationHistory{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestPageResetNavigationHistory(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.PageResetNavigationHistory{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.PageResetNavigationHistory{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.PageResetNavigationHistory{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestPageGetResourceContent(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.PageGetResourceContent{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.PageGetResourceContent{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.PageGetResourceContent{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestPageGetResourceTree(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.PageGetResourceTree{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.PageGetResourceTree{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.PageGetResourceTree{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestPageHandleJavaScriptDialog(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.PageHandleJavaScriptDialog{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.PageHandleJavaScriptDialog{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.PageHandleJavaScriptDialog{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestPageNavigate(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.PageNavigate{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.PageNavigate{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.PageNavigate{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestPageNavigateToHistoryEntry(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.PageNavigateToHistoryEntry{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.PageNavigateToHistoryEntry{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.PageNavigateToHistoryEntry{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestPagePrintToPDF(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.PagePrintToPDF{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.PagePrintToPDF{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.PagePrintToPDF{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestPageReload(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.PageReload{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.PageReload{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.PageReload{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestPageRemoveScriptToEvaluateOnLoad(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.PageRemoveScriptToEvaluateOnLoad{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.PageRemoveScriptToEvaluateOnLoad{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.PageRemoveScriptToEvaluateOnLoad{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestPageRemoveScriptToEvaluateOnNewDocument(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.PageRemoveScriptToEvaluateOnNewDocument{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.PageRemoveScriptToEvaluateOnNewDocument{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.PageRemoveScriptToEvaluateOnNewDocument{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestPageScreencastFrameAck(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.PageScreencastFrameAck{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.PageScreencastFrameAck{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.PageScreencastFrameAck{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestPageSearchInResource(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.PageSearchInResource{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.PageSearchInResource{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.PageSearchInResource{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestPageSetAdBlockingEnabled(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.PageSetAdBlockingEnabled{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.PageSetAdBlockingEnabled{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.PageSetAdBlockingEnabled{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestPageSetBypassCSP(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.PageSetBypassCSP{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.PageSetBypassCSP{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.PageSetBypassCSP{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestPageSetDeviceMetricsOverride(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.PageSetDeviceMetricsOverride{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.PageSetDeviceMetricsOverride{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.PageSetDeviceMetricsOverride{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestPageSetDeviceOrientationOverride(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.PageSetDeviceOrientationOverride{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.PageSetDeviceOrientationOverride{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.PageSetDeviceOrientationOverride{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestPageSetFontFamilies(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.PageSetFontFamilies{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.PageSetFontFamilies{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.PageSetFontFamilies{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestPageSetFontSizes(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.PageSetFontSizes{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.PageSetFontSizes{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.PageSetFontSizes{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestPageSetDocumentContent(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.PageSetDocumentContent{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.PageSetDocumentContent{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.PageSetDocumentContent{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestPageSetDownloadBehavior(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.PageSetDownloadBehavior{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.PageSetDownloadBehavior{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.PageSetDownloadBehavior{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestPageSetGeolocationOverride(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.PageSetGeolocationOverride{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.PageSetGeolocationOverride{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.PageSetGeolocationOverride{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestPageSetLifecycleEventsEnabled(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.PageSetLifecycleEventsEnabled{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.PageSetLifecycleEventsEnabled{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.PageSetLifecycleEventsEnabled{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestPageSetTouchEmulationEnabled(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.PageSetTouchEmulationEnabled{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.PageSetTouchEmulationEnabled{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.PageSetTouchEmulationEnabled{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestPageStartScreencast(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.PageStartScreencast{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.PageStartScreencast{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.PageStartScreencast{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestPageStopLoading(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.PageStopLoading{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.PageStopLoading{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.PageStopLoading{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestPageCrash(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.PageCrash{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.PageCrash{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.PageCrash{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestPageClose(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.PageClose{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.PageClose{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.PageClose{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestPageSetWebLifecycleState(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.PageSetWebLifecycleState{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.PageSetWebLifecycleState{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.PageSetWebLifecycleState{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestPageStopScreencast(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.PageStopScreencast{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.PageStopScreencast{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.PageStopScreencast{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestPageSetProduceCompilationCache(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.PageSetProduceCompilationCache{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.PageSetProduceCompilationCache{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.PageSetProduceCompilationCache{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestPageAddCompilationCache(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.PageAddCompilationCache{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.PageAddCompilationCache{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.PageAddCompilationCache{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestPageClearCompilationCache(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.PageClearCompilationCache{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.PageClearCompilationCache{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.PageClearCompilationCache{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestPageGenerateTestReport(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.PageGenerateTestReport{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.PageGenerateTestReport{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.PageGenerateTestReport{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestPageWaitForDebugger(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.PageWaitForDebugger{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.PageWaitForDebugger{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.PageWaitForDebugger{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestPageSetInterceptFileChooserDialog(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.PageSetInterceptFileChooserDialog{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.PageSetInterceptFileChooserDialog{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.PageSetInterceptFileChooserDialog{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestPageDomContentEventFired(t *testing.T) {
	e := proto.PageDomContentEventFired{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestPageFileChooserOpened(t *testing.T) {
	e := proto.PageFileChooserOpened{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestPageFrameAttached(t *testing.T) {
	e := proto.PageFrameAttached{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestPageFrameClearedScheduledNavigation(t *testing.T) {
	e := proto.PageFrameClearedScheduledNavigation{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestPageFrameDetached(t *testing.T) {
	e := proto.PageFrameDetached{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestPageFrameNavigated(t *testing.T) {
	e := proto.PageFrameNavigated{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestPageFrameResized(t *testing.T) {
	e := proto.PageFrameResized{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestPageFrameRequestedNavigation(t *testing.T) {
	e := proto.PageFrameRequestedNavigation{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestPageFrameScheduledNavigation(t *testing.T) {
	e := proto.PageFrameScheduledNavigation{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestPageFrameStartedLoading(t *testing.T) {
	e := proto.PageFrameStartedLoading{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestPageFrameStoppedLoading(t *testing.T) {
	e := proto.PageFrameStoppedLoading{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestPageDownloadWillBegin(t *testing.T) {
	e := proto.PageDownloadWillBegin{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestPageInterstitialHidden(t *testing.T) {
	e := proto.PageInterstitialHidden{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestPageInterstitialShown(t *testing.T) {
	e := proto.PageInterstitialShown{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestPageJavascriptDialogClosed(t *testing.T) {
	e := proto.PageJavascriptDialogClosed{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestPageJavascriptDialogOpening(t *testing.T) {
	e := proto.PageJavascriptDialogOpening{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestPageLifecycleEvent(t *testing.T) {
	e := proto.PageLifecycleEvent{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestPageLoadEventFired(t *testing.T) {
	e := proto.PageLoadEventFired{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestPageNavigatedWithinDocument(t *testing.T) {
	e := proto.PageNavigatedWithinDocument{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestPageScreencastFrame(t *testing.T) {
	e := proto.PageScreencastFrame{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestPageScreencastVisibilityChanged(t *testing.T) {
	e := proto.PageScreencastVisibilityChanged{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestPageWindowOpen(t *testing.T) {
	e := proto.PageWindowOpen{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestPageCompilationCacheProduced(t *testing.T) {
	e := proto.PageCompilationCacheProduced{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestPerformanceDisable(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.PerformanceDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.PerformanceDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.PerformanceDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestPerformanceEnable(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.PerformanceEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.PerformanceEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.PerformanceEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestPerformanceSetTimeDomain(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.PerformanceSetTimeDomain{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.PerformanceSetTimeDomain{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.PerformanceSetTimeDomain{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestPerformanceGetMetrics(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.PerformanceGetMetrics{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.PerformanceGetMetrics{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.PerformanceGetMetrics{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestPerformanceMetrics(t *testing.T) {
	e := proto.PerformanceMetrics{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestSecurityDisable(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.SecurityDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.SecurityDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.SecurityDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestSecurityEnable(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.SecurityEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.SecurityEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.SecurityEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestSecuritySetIgnoreCertificateErrors(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.SecuritySetIgnoreCertificateErrors{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.SecuritySetIgnoreCertificateErrors{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.SecuritySetIgnoreCertificateErrors{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestSecurityHandleCertificateError(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.SecurityHandleCertificateError{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.SecurityHandleCertificateError{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.SecurityHandleCertificateError{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestSecuritySetOverrideCertificateErrors(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.SecuritySetOverrideCertificateErrors{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.SecuritySetOverrideCertificateErrors{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.SecuritySetOverrideCertificateErrors{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestSecurityCertificateError(t *testing.T) {
	e := proto.SecurityCertificateError{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestSecurityVisibleSecurityStateChanged(t *testing.T) {
	e := proto.SecurityVisibleSecurityStateChanged{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestSecuritySecurityStateChanged(t *testing.T) {
	e := proto.SecuritySecurityStateChanged{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestServiceWorkerDeliverPushMessage(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.ServiceWorkerDeliverPushMessage{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.ServiceWorkerDeliverPushMessage{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.ServiceWorkerDeliverPushMessage{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestServiceWorkerDisable(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.ServiceWorkerDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.ServiceWorkerDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.ServiceWorkerDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestServiceWorkerDispatchSyncEvent(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.ServiceWorkerDispatchSyncEvent{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.ServiceWorkerDispatchSyncEvent{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.ServiceWorkerDispatchSyncEvent{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestServiceWorkerDispatchPeriodicSyncEvent(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.ServiceWorkerDispatchPeriodicSyncEvent{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.ServiceWorkerDispatchPeriodicSyncEvent{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.ServiceWorkerDispatchPeriodicSyncEvent{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestServiceWorkerEnable(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.ServiceWorkerEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.ServiceWorkerEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.ServiceWorkerEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestServiceWorkerInspectWorker(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.ServiceWorkerInspectWorker{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.ServiceWorkerInspectWorker{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.ServiceWorkerInspectWorker{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestServiceWorkerSetForceUpdateOnPageLoad(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.ServiceWorkerSetForceUpdateOnPageLoad{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.ServiceWorkerSetForceUpdateOnPageLoad{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.ServiceWorkerSetForceUpdateOnPageLoad{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestServiceWorkerSkipWaiting(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.ServiceWorkerSkipWaiting{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.ServiceWorkerSkipWaiting{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.ServiceWorkerSkipWaiting{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestServiceWorkerStartWorker(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.ServiceWorkerStartWorker{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.ServiceWorkerStartWorker{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.ServiceWorkerStartWorker{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestServiceWorkerStopAllWorkers(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.ServiceWorkerStopAllWorkers{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.ServiceWorkerStopAllWorkers{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.ServiceWorkerStopAllWorkers{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestServiceWorkerStopWorker(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.ServiceWorkerStopWorker{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.ServiceWorkerStopWorker{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.ServiceWorkerStopWorker{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestServiceWorkerUnregister(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.ServiceWorkerUnregister{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.ServiceWorkerUnregister{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.ServiceWorkerUnregister{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestServiceWorkerUpdateRegistration(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.ServiceWorkerUpdateRegistration{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.ServiceWorkerUpdateRegistration{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.ServiceWorkerUpdateRegistration{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestServiceWorkerWorkerErrorReported(t *testing.T) {
	e := proto.ServiceWorkerWorkerErrorReported{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestServiceWorkerWorkerRegistrationUpdated(t *testing.T) {
	e := proto.ServiceWorkerWorkerRegistrationUpdated{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestServiceWorkerWorkerVersionUpdated(t *testing.T) {
	e := proto.ServiceWorkerWorkerVersionUpdated{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestStorageClearDataForOrigin(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.StorageClearDataForOrigin{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.StorageClearDataForOrigin{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.StorageClearDataForOrigin{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestStorageGetCookies(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.StorageGetCookies{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.StorageGetCookies{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.StorageGetCookies{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestStorageSetCookies(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.StorageSetCookies{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.StorageSetCookies{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.StorageSetCookies{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestStorageClearCookies(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.StorageClearCookies{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.StorageClearCookies{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.StorageClearCookies{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestStorageGetUsageAndQuota(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.StorageGetUsageAndQuota{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.StorageGetUsageAndQuota{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.StorageGetUsageAndQuota{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestStorageTrackCacheStorageForOrigin(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.StorageTrackCacheStorageForOrigin{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.StorageTrackCacheStorageForOrigin{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.StorageTrackCacheStorageForOrigin{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestStorageTrackIndexedDBForOrigin(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.StorageTrackIndexedDBForOrigin{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.StorageTrackIndexedDBForOrigin{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.StorageTrackIndexedDBForOrigin{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestStorageUntrackCacheStorageForOrigin(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.StorageUntrackCacheStorageForOrigin{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.StorageUntrackCacheStorageForOrigin{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.StorageUntrackCacheStorageForOrigin{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestStorageUntrackIndexedDBForOrigin(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.StorageUntrackIndexedDBForOrigin{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.StorageUntrackIndexedDBForOrigin{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.StorageUntrackIndexedDBForOrigin{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestStorageCacheStorageContentUpdated(t *testing.T) {
	e := proto.StorageCacheStorageContentUpdated{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestStorageCacheStorageListUpdated(t *testing.T) {
	e := proto.StorageCacheStorageListUpdated{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestStorageIndexedDBContentUpdated(t *testing.T) {
	e := proto.StorageIndexedDBContentUpdated{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestStorageIndexedDBListUpdated(t *testing.T) {
	e := proto.StorageIndexedDBListUpdated{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestSystemInfoGetInfo(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.SystemInfoGetInfo{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.SystemInfoGetInfo{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.SystemInfoGetInfo{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestSystemInfoGetProcessInfo(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.SystemInfoGetProcessInfo{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.SystemInfoGetProcessInfo{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.SystemInfoGetProcessInfo{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestTargetActivateTarget(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.TargetActivateTarget{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.TargetActivateTarget{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.TargetActivateTarget{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestTargetAttachToTarget(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.TargetAttachToTarget{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.TargetAttachToTarget{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.TargetAttachToTarget{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestTargetAttachToBrowserTarget(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.TargetAttachToBrowserTarget{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.TargetAttachToBrowserTarget{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.TargetAttachToBrowserTarget{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestTargetCloseTarget(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.TargetCloseTarget{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.TargetCloseTarget{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.TargetCloseTarget{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestTargetExposeDevToolsProtocol(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.TargetExposeDevToolsProtocol{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.TargetExposeDevToolsProtocol{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.TargetExposeDevToolsProtocol{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestTargetCreateBrowserContext(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.TargetCreateBrowserContext{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.TargetCreateBrowserContext{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.TargetCreateBrowserContext{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestTargetGetBrowserContexts(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.TargetGetBrowserContexts{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.TargetGetBrowserContexts{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.TargetGetBrowserContexts{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestTargetCreateTarget(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.TargetCreateTarget{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.TargetCreateTarget{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.TargetCreateTarget{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestTargetDetachFromTarget(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.TargetDetachFromTarget{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.TargetDetachFromTarget{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.TargetDetachFromTarget{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestTargetDisposeBrowserContext(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.TargetDisposeBrowserContext{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.TargetDisposeBrowserContext{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.TargetDisposeBrowserContext{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestTargetGetTargetInfo(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.TargetGetTargetInfo{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.TargetGetTargetInfo{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.TargetGetTargetInfo{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestTargetGetTargets(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.TargetGetTargets{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.TargetGetTargets{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.TargetGetTargets{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestTargetSendMessageToTarget(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.TargetSendMessageToTarget{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.TargetSendMessageToTarget{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.TargetSendMessageToTarget{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestTargetSetAutoAttach(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.TargetSetAutoAttach{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.TargetSetAutoAttach{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.TargetSetAutoAttach{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestTargetSetDiscoverTargets(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.TargetSetDiscoverTargets{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.TargetSetDiscoverTargets{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.TargetSetDiscoverTargets{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestTargetSetRemoteLocations(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.TargetSetRemoteLocations{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.TargetSetRemoteLocations{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.TargetSetRemoteLocations{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestTargetAttachedToTarget(t *testing.T) {
	e := proto.TargetAttachedToTarget{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestTargetDetachedFromTarget(t *testing.T) {
	e := proto.TargetDetachedFromTarget{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestTargetReceivedMessageFromTarget(t *testing.T) {
	e := proto.TargetReceivedMessageFromTarget{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestTargetTargetCreated(t *testing.T) {
	e := proto.TargetTargetCreated{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestTargetTargetDestroyed(t *testing.T) {
	e := proto.TargetTargetDestroyed{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestTargetTargetCrashed(t *testing.T) {
	e := proto.TargetTargetCrashed{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestTargetTargetInfoChanged(t *testing.T) {
	e := proto.TargetTargetInfoChanged{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestTetheringBind(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.TetheringBind{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.TetheringBind{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.TetheringBind{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestTetheringUnbind(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.TetheringUnbind{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.TetheringUnbind{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.TetheringUnbind{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestTetheringAccepted(t *testing.T) {
	e := proto.TetheringAccepted{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestTracingEnd(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.TracingEnd{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.TracingEnd{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.TracingEnd{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestTracingGetCategories(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.TracingGetCategories{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.TracingGetCategories{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.TracingGetCategories{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestTracingRecordClockSyncMarker(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.TracingRecordClockSyncMarker{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.TracingRecordClockSyncMarker{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.TracingRecordClockSyncMarker{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestTracingRequestMemoryDump(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.TracingRequestMemoryDump{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.TracingRequestMemoryDump{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.TracingRequestMemoryDump{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestTracingStart(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.TracingStart{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.TracingStart{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.TracingStart{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestTracingBufferUsage(t *testing.T) {
	e := proto.TracingBufferUsage{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestTracingDataCollected(t *testing.T) {
	e := proto.TracingDataCollected{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestTracingTracingComplete(t *testing.T) {
	e := proto.TracingTracingComplete{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestFetchDisable(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.FetchDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.FetchDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.FetchDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestFetchEnable(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.FetchEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.FetchEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.FetchEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestFetchFailRequest(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.FetchFailRequest{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.FetchFailRequest{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.FetchFailRequest{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestFetchFulfillRequest(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.FetchFulfillRequest{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.FetchFulfillRequest{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.FetchFulfillRequest{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestFetchContinueRequest(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.FetchContinueRequest{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.FetchContinueRequest{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.FetchContinueRequest{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestFetchContinueWithAuth(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.FetchContinueWithAuth{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.FetchContinueWithAuth{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.FetchContinueWithAuth{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestFetchGetResponseBody(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.FetchGetResponseBody{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.FetchGetResponseBody{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.FetchGetResponseBody{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestFetchTakeResponseBodyAsStream(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.FetchTakeResponseBodyAsStream{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.FetchTakeResponseBodyAsStream{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.FetchTakeResponseBodyAsStream{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestFetchRequestPaused(t *testing.T) {
	e := proto.FetchRequestPaused{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestFetchAuthRequired(t *testing.T) {
	e := proto.FetchAuthRequired{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestWebAudioEnable(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.WebAudioEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.WebAudioEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.WebAudioEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestWebAudioDisable(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.WebAudioDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.WebAudioDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.WebAudioDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestWebAudioGetRealtimeData(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.WebAudioGetRealtimeData{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.WebAudioGetRealtimeData{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.WebAudioGetRealtimeData{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestWebAudioContextCreated(t *testing.T) {
	e := proto.WebAudioContextCreated{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestWebAudioContextWillBeDestroyed(t *testing.T) {
	e := proto.WebAudioContextWillBeDestroyed{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestWebAudioContextChanged(t *testing.T) {
	e := proto.WebAudioContextChanged{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestWebAudioAudioListenerCreated(t *testing.T) {
	e := proto.WebAudioAudioListenerCreated{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestWebAudioAudioListenerWillBeDestroyed(t *testing.T) {
	e := proto.WebAudioAudioListenerWillBeDestroyed{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestWebAudioAudioNodeCreated(t *testing.T) {
	e := proto.WebAudioAudioNodeCreated{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestWebAudioAudioNodeWillBeDestroyed(t *testing.T) {
	e := proto.WebAudioAudioNodeWillBeDestroyed{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestWebAudioAudioParamCreated(t *testing.T) {
	e := proto.WebAudioAudioParamCreated{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestWebAudioAudioParamWillBeDestroyed(t *testing.T) {
	e := proto.WebAudioAudioParamWillBeDestroyed{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestWebAudioNodesConnected(t *testing.T) {
	e := proto.WebAudioNodesConnected{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestWebAudioNodesDisconnected(t *testing.T) {
	e := proto.WebAudioNodesDisconnected{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestWebAudioNodeParamConnected(t *testing.T) {
	e := proto.WebAudioNodeParamConnected{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestWebAudioNodeParamDisconnected(t *testing.T) {
	e := proto.WebAudioNodeParamDisconnected{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestWebAuthnEnable(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.WebAuthnEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.WebAuthnEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.WebAuthnEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestWebAuthnDisable(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.WebAuthnDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.WebAuthnDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.WebAuthnDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestWebAuthnAddVirtualAuthenticator(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.WebAuthnAddVirtualAuthenticator{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.WebAuthnAddVirtualAuthenticator{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.WebAuthnAddVirtualAuthenticator{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestWebAuthnRemoveVirtualAuthenticator(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.WebAuthnRemoveVirtualAuthenticator{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.WebAuthnRemoveVirtualAuthenticator{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.WebAuthnRemoveVirtualAuthenticator{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestWebAuthnAddCredential(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.WebAuthnAddCredential{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.WebAuthnAddCredential{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.WebAuthnAddCredential{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestWebAuthnGetCredential(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.WebAuthnGetCredential{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.WebAuthnGetCredential{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.WebAuthnGetCredential{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestWebAuthnGetCredentials(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.WebAuthnGetCredentials{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.WebAuthnGetCredentials{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.WebAuthnGetCredentials{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestWebAuthnRemoveCredential(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.WebAuthnRemoveCredential{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.WebAuthnRemoveCredential{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.WebAuthnRemoveCredential{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestWebAuthnClearCredentials(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.WebAuthnClearCredentials{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.WebAuthnClearCredentials{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.WebAuthnClearCredentials{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestWebAuthnSetUserVerified(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.WebAuthnSetUserVerified{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.WebAuthnSetUserVerified{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.WebAuthnSetUserVerified{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestMediaEnable(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.MediaEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.MediaEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.MediaEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestMediaDisable(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.MediaDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.MediaDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.MediaDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestMediaPlayerPropertiesChanged(t *testing.T) {
	e := proto.MediaPlayerPropertiesChanged{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestMediaPlayerEventsAdded(t *testing.T) {
	e := proto.MediaPlayerEventsAdded{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestMediaPlayersCreated(t *testing.T) {
	e := proto.MediaPlayersCreated{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestConsoleClearMessages(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.ConsoleClearMessages{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.ConsoleClearMessages{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.ConsoleClearMessages{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestConsoleDisable(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.ConsoleDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.ConsoleDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.ConsoleDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestConsoleEnable(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.ConsoleEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.ConsoleEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.ConsoleEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestConsoleMessageAdded(t *testing.T) {
	e := proto.ConsoleMessageAdded{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestDebuggerContinueToLocation(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DebuggerContinueToLocation{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DebuggerContinueToLocation{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DebuggerContinueToLocation{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDebuggerDisable(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DebuggerDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DebuggerDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DebuggerDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDebuggerEnable(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DebuggerEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DebuggerEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DebuggerEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDebuggerEvaluateOnCallFrame(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DebuggerEvaluateOnCallFrame{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DebuggerEvaluateOnCallFrame{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DebuggerEvaluateOnCallFrame{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDebuggerGetPossibleBreakpoints(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DebuggerGetPossibleBreakpoints{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DebuggerGetPossibleBreakpoints{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DebuggerGetPossibleBreakpoints{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDebuggerGetScriptSource(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DebuggerGetScriptSource{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DebuggerGetScriptSource{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DebuggerGetScriptSource{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDebuggerGetWasmBytecode(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DebuggerGetWasmBytecode{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DebuggerGetWasmBytecode{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DebuggerGetWasmBytecode{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDebuggerGetStackTrace(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DebuggerGetStackTrace{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DebuggerGetStackTrace{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DebuggerGetStackTrace{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDebuggerPause(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DebuggerPause{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DebuggerPause{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DebuggerPause{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDebuggerPauseOnAsyncCall(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DebuggerPauseOnAsyncCall{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DebuggerPauseOnAsyncCall{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DebuggerPauseOnAsyncCall{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDebuggerRemoveBreakpoint(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DebuggerRemoveBreakpoint{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DebuggerRemoveBreakpoint{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DebuggerRemoveBreakpoint{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDebuggerRestartFrame(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DebuggerRestartFrame{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DebuggerRestartFrame{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DebuggerRestartFrame{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDebuggerResume(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DebuggerResume{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DebuggerResume{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DebuggerResume{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDebuggerSearchInContent(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DebuggerSearchInContent{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DebuggerSearchInContent{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DebuggerSearchInContent{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDebuggerSetAsyncCallStackDepth(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DebuggerSetAsyncCallStackDepth{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DebuggerSetAsyncCallStackDepth{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DebuggerSetAsyncCallStackDepth{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDebuggerSetBlackboxPatterns(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DebuggerSetBlackboxPatterns{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DebuggerSetBlackboxPatterns{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DebuggerSetBlackboxPatterns{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDebuggerSetBlackboxedRanges(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DebuggerSetBlackboxedRanges{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DebuggerSetBlackboxedRanges{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DebuggerSetBlackboxedRanges{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDebuggerSetBreakpoint(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DebuggerSetBreakpoint{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DebuggerSetBreakpoint{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DebuggerSetBreakpoint{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDebuggerSetInstrumentationBreakpoint(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DebuggerSetInstrumentationBreakpoint{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DebuggerSetInstrumentationBreakpoint{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DebuggerSetInstrumentationBreakpoint{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDebuggerSetBreakpointByURL(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DebuggerSetBreakpointByURL{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DebuggerSetBreakpointByURL{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DebuggerSetBreakpointByURL{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDebuggerSetBreakpointOnFunctionCall(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DebuggerSetBreakpointOnFunctionCall{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DebuggerSetBreakpointOnFunctionCall{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DebuggerSetBreakpointOnFunctionCall{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDebuggerSetBreakpointsActive(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DebuggerSetBreakpointsActive{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DebuggerSetBreakpointsActive{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DebuggerSetBreakpointsActive{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDebuggerSetPauseOnExceptions(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DebuggerSetPauseOnExceptions{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DebuggerSetPauseOnExceptions{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DebuggerSetPauseOnExceptions{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDebuggerSetReturnValue(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DebuggerSetReturnValue{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DebuggerSetReturnValue{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DebuggerSetReturnValue{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDebuggerSetScriptSource(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DebuggerSetScriptSource{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DebuggerSetScriptSource{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DebuggerSetScriptSource{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDebuggerSetSkipAllPauses(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DebuggerSetSkipAllPauses{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DebuggerSetSkipAllPauses{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DebuggerSetSkipAllPauses{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDebuggerSetVariableValue(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DebuggerSetVariableValue{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DebuggerSetVariableValue{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DebuggerSetVariableValue{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDebuggerStepInto(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DebuggerStepInto{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DebuggerStepInto{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DebuggerStepInto{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDebuggerStepOut(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DebuggerStepOut{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DebuggerStepOut{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DebuggerStepOut{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDebuggerStepOver(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.DebuggerStepOver{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.DebuggerStepOver{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.DebuggerStepOver{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestDebuggerBreakpointResolved(t *testing.T) {
	e := proto.DebuggerBreakpointResolved{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestDebuggerPaused(t *testing.T) {
	e := proto.DebuggerPaused{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestDebuggerResumed(t *testing.T) {
	e := proto.DebuggerResumed{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestDebuggerScriptFailedToParse(t *testing.T) {
	e := proto.DebuggerScriptFailedToParse{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestDebuggerScriptParsed(t *testing.T) {
	e := proto.DebuggerScriptParsed{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestHeapProfilerAddInspectedHeapObject(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.HeapProfilerAddInspectedHeapObject{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.HeapProfilerAddInspectedHeapObject{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.HeapProfilerAddInspectedHeapObject{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestHeapProfilerCollectGarbage(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.HeapProfilerCollectGarbage{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.HeapProfilerCollectGarbage{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.HeapProfilerCollectGarbage{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestHeapProfilerDisable(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.HeapProfilerDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.HeapProfilerDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.HeapProfilerDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestHeapProfilerEnable(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.HeapProfilerEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.HeapProfilerEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.HeapProfilerEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestHeapProfilerGetHeapObjectID(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.HeapProfilerGetHeapObjectID{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.HeapProfilerGetHeapObjectID{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.HeapProfilerGetHeapObjectID{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestHeapProfilerGetObjectByHeapObjectID(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.HeapProfilerGetObjectByHeapObjectID{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.HeapProfilerGetObjectByHeapObjectID{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.HeapProfilerGetObjectByHeapObjectID{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestHeapProfilerGetSamplingProfile(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.HeapProfilerGetSamplingProfile{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.HeapProfilerGetSamplingProfile{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.HeapProfilerGetSamplingProfile{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestHeapProfilerStartSampling(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.HeapProfilerStartSampling{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.HeapProfilerStartSampling{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.HeapProfilerStartSampling{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestHeapProfilerStartTrackingHeapObjects(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.HeapProfilerStartTrackingHeapObjects{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.HeapProfilerStartTrackingHeapObjects{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.HeapProfilerStartTrackingHeapObjects{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestHeapProfilerStopSampling(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.HeapProfilerStopSampling{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.HeapProfilerStopSampling{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.HeapProfilerStopSampling{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestHeapProfilerStopTrackingHeapObjects(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.HeapProfilerStopTrackingHeapObjects{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.HeapProfilerStopTrackingHeapObjects{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.HeapProfilerStopTrackingHeapObjects{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestHeapProfilerTakeHeapSnapshot(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.HeapProfilerTakeHeapSnapshot{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.HeapProfilerTakeHeapSnapshot{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.HeapProfilerTakeHeapSnapshot{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestHeapProfilerAddHeapSnapshotChunk(t *testing.T) {
	e := proto.HeapProfilerAddHeapSnapshotChunk{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestHeapProfilerHeapStatsUpdate(t *testing.T) {
	e := proto.HeapProfilerHeapStatsUpdate{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestHeapProfilerLastSeenObjectID(t *testing.T) {
	e := proto.HeapProfilerLastSeenObjectID{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestHeapProfilerReportHeapSnapshotProgress(t *testing.T) {
	e := proto.HeapProfilerReportHeapSnapshotProgress{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestHeapProfilerResetProfiles(t *testing.T) {
	e := proto.HeapProfilerResetProfiles{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestProfilerDisable(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.ProfilerDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.ProfilerDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.ProfilerDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestProfilerEnable(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.ProfilerEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.ProfilerEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.ProfilerEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestProfilerGetBestEffortCoverage(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.ProfilerGetBestEffortCoverage{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.ProfilerGetBestEffortCoverage{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.ProfilerGetBestEffortCoverage{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestProfilerSetSamplingInterval(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.ProfilerSetSamplingInterval{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.ProfilerSetSamplingInterval{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.ProfilerSetSamplingInterval{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestProfilerStart(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.ProfilerStart{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.ProfilerStart{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.ProfilerStart{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestProfilerStartPreciseCoverage(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.ProfilerStartPreciseCoverage{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.ProfilerStartPreciseCoverage{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.ProfilerStartPreciseCoverage{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestProfilerStartTypeProfile(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.ProfilerStartTypeProfile{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.ProfilerStartTypeProfile{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.ProfilerStartTypeProfile{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestProfilerStop(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.ProfilerStop{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.ProfilerStop{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.ProfilerStop{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestProfilerStopPreciseCoverage(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.ProfilerStopPreciseCoverage{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.ProfilerStopPreciseCoverage{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.ProfilerStopPreciseCoverage{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestProfilerStopTypeProfile(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.ProfilerStopTypeProfile{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.ProfilerStopTypeProfile{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.ProfilerStopTypeProfile{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestProfilerTakePreciseCoverage(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.ProfilerTakePreciseCoverage{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.ProfilerTakePreciseCoverage{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.ProfilerTakePreciseCoverage{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestProfilerTakeTypeProfile(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.ProfilerTakeTypeProfile{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.ProfilerTakeTypeProfile{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.ProfilerTakeTypeProfile{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestProfilerEnableRuntimeCallStats(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.ProfilerEnableRuntimeCallStats{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.ProfilerEnableRuntimeCallStats{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.ProfilerEnableRuntimeCallStats{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestProfilerDisableRuntimeCallStats(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.ProfilerDisableRuntimeCallStats{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.ProfilerDisableRuntimeCallStats{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.ProfilerDisableRuntimeCallStats{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestProfilerGetRuntimeCallStats(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.ProfilerGetRuntimeCallStats{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.ProfilerGetRuntimeCallStats{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.ProfilerGetRuntimeCallStats{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestProfilerConsoleProfileFinished(t *testing.T) {
	e := proto.ProfilerConsoleProfileFinished{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestProfilerConsoleProfileStarted(t *testing.T) {
	e := proto.ProfilerConsoleProfileStarted{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestProfilerPreciseCoverageDeltaUpdate(t *testing.T) {
	e := proto.ProfilerPreciseCoverageDeltaUpdate{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestRuntimeAwaitPromise(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.RuntimeAwaitPromise{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.RuntimeAwaitPromise{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.RuntimeAwaitPromise{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestRuntimeCallFunctionOn(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.RuntimeCallFunctionOn{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.RuntimeCallFunctionOn{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.RuntimeCallFunctionOn{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestRuntimeCompileScript(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.RuntimeCompileScript{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.RuntimeCompileScript{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.RuntimeCompileScript{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestRuntimeDisable(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.RuntimeDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.RuntimeDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.RuntimeDisable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestRuntimeDiscardConsoleEntries(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.RuntimeDiscardConsoleEntries{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.RuntimeDiscardConsoleEntries{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.RuntimeDiscardConsoleEntries{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestRuntimeEnable(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.RuntimeEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.RuntimeEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.RuntimeEnable{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestRuntimeEvaluate(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.RuntimeEvaluate{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.RuntimeEvaluate{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.RuntimeEvaluate{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestRuntimeGetIsolateID(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.RuntimeGetIsolateID{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.RuntimeGetIsolateID{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.RuntimeGetIsolateID{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestRuntimeGetHeapUsage(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.RuntimeGetHeapUsage{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.RuntimeGetHeapUsage{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.RuntimeGetHeapUsage{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestRuntimeGetProperties(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.RuntimeGetProperties{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.RuntimeGetProperties{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.RuntimeGetProperties{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestRuntimeGlobalLexicalScopeNames(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.RuntimeGlobalLexicalScopeNames{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.RuntimeGlobalLexicalScopeNames{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.RuntimeGlobalLexicalScopeNames{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestRuntimeQueryObjects(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.RuntimeQueryObjects{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.RuntimeQueryObjects{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.RuntimeQueryObjects{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestRuntimeReleaseObject(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.RuntimeReleaseObject{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.RuntimeReleaseObject{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.RuntimeReleaseObject{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestRuntimeReleaseObjectGroup(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.RuntimeReleaseObjectGroup{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.RuntimeReleaseObjectGroup{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.RuntimeReleaseObjectGroup{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestRuntimeRunIfWaitingForDebugger(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.RuntimeRunIfWaitingForDebugger{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.RuntimeRunIfWaitingForDebugger{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.RuntimeRunIfWaitingForDebugger{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestRuntimeRunScript(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.RuntimeRunScript{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.RuntimeRunScript{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.RuntimeRunScript{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestRuntimeSetAsyncCallStackDepth(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.RuntimeSetAsyncCallStackDepth{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.RuntimeSetAsyncCallStackDepth{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.RuntimeSetAsyncCallStackDepth{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestRuntimeSetCustomObjectFormatterEnabled(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.RuntimeSetCustomObjectFormatterEnabled{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.RuntimeSetCustomObjectFormatterEnabled{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.RuntimeSetCustomObjectFormatterEnabled{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestRuntimeSetMaxCallStackSizeToCapture(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.RuntimeSetMaxCallStackSizeToCapture{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.RuntimeSetMaxCallStackSizeToCapture{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.RuntimeSetMaxCallStackSizeToCapture{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestRuntimeTerminateExecution(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.RuntimeTerminateExecution{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.RuntimeTerminateExecution{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.RuntimeTerminateExecution{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestRuntimeAddBinding(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.RuntimeAddBinding{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.RuntimeAddBinding{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.RuntimeAddBinding{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestRuntimeRemoveBinding(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.RuntimeRemoveBinding{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.RuntimeRemoveBinding{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.RuntimeRemoveBinding{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}

func TestRuntimeBindingCalled(t *testing.T) {
	e := proto.RuntimeBindingCalled{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestRuntimeConsoleAPICalled(t *testing.T) {
	e := proto.RuntimeConsoleAPICalled{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestRuntimeExceptionRevoked(t *testing.T) {
	e := proto.RuntimeExceptionRevoked{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestRuntimeExceptionThrown(t *testing.T) {
	e := proto.RuntimeExceptionThrown{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestRuntimeExecutionContextCreated(t *testing.T) {
	e := proto.RuntimeExecutionContextCreated{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestRuntimeExecutionContextDestroyed(t *testing.T) {
	e := proto.RuntimeExecutionContextDestroyed{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestRuntimeExecutionContextsCleared(t *testing.T) {
	e := proto.RuntimeExecutionContextsCleared{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestRuntimeInspectRequested(t *testing.T) {
	e := proto.RuntimeInspectRequested{}
	e.MethodName()
	e.Load([]byte("null"))
}

func TestSchemaGetDomains(t *testing.T) {
	ctx := context.Background()
	c := &Client{}
	_, err := proto.SchemaGetDomains{}.Call(&proto.Call{ctx, c, ""})
	assert.Nil(t, err)

	c = &Client{err: errors.New("err")}
	_, err = proto.SchemaGetDomains{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)

	c = &Client{ret: "err"}
	_, err = proto.SchemaGetDomains{}.Call(&proto.Call{ctx, c, ""})
	assert.Error(t, err)
}
