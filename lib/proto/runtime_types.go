// This file is generated by "./lib/proto/cmd/gen"

package proto

// RuntimeScriptID Unique script identifier.
type RuntimeScriptID string

// RuntimeRemoteObjectID Unique object identifier.
type RuntimeRemoteObjectID string

// RuntimeUnserializableValue Primitive value which cannot be JSON-stringified. Includes values `-0`, `NaN`, `Infinity`,
// `-Infinity`, and bigint literals.
type RuntimeUnserializableValue string

// RuntimeRemoteObject Mirror object referencing original JavaScript object.
type RuntimeRemoteObject struct {
	// Type Object type.
	Type string `json:"type"`

	// Subtype Object subtype hint. Specified for `object` type values only.
	Subtype string `json:"subtype,omitempty"`

	// ClassName Object class (constructor) name. Specified for `object` type values only.
	ClassName string `json:"className,omitempty"`

	// Value Remote object value in case of primitive values or JSON values (if it was requested).
	Value interface{} `json:"value,omitempty"`

	// UnserializableValue Primitive value which can not be JSON-stringified does not have `value`, but gets this
	// property.
	UnserializableValue *RuntimeUnserializableValue `json:"unserializableValue,omitempty"`

	// Description String representation of the object.
	Description string `json:"description,omitempty"`

	// ObjectID Unique object identifier (for non-primitive values).
	ObjectID *RuntimeRemoteObjectID `json:"objectId,omitempty"`

	// Preview (experimental) Preview containing abbreviated property values. Specified for `object` type values only.
	Preview *RuntimeObjectPreview `json:"preview,omitempty"`

	// CustomPreview (experimental) ...
	CustomPreview *RuntimeCustomPreview `json:"customPreview,omitempty"`
}

// RuntimeCustomPreview (experimental) ...
type RuntimeCustomPreview struct {
	// Header The JSON-stringified result of formatter.header(object, config) call.
	// It contains json ML array that represents RemoteObject.
	Header string `json:"header"`

	// BodyGetterID If formatter returns true as a result of formatter.hasBody call then bodyGetterId will
	// contain RemoteObjectId for the function that returns result of formatter.body(object, config) call.
	// The result value is json ML array.
	BodyGetterID *RuntimeRemoteObjectID `json:"bodyGetterId,omitempty"`
}

// RuntimeObjectPreview (experimental) Object containing abbreviated remote object value.
type RuntimeObjectPreview struct {
	// Type Object type.
	Type string `json:"type"`

	// Subtype Object subtype hint. Specified for `object` type values only.
	Subtype string `json:"subtype,omitempty"`

	// Description String representation of the object.
	Description string `json:"description,omitempty"`

	// Overflow True iff some of the properties or entries of the original object did not fit.
	Overflow bool `json:"overflow"`

	// Properties List of the properties.
	Properties []*RuntimePropertyPreview `json:"properties"`

	// Entries List of the entries. Specified for `map` and `set` subtype values only.
	Entries []*RuntimeEntryPreview `json:"entries,omitempty"`
}

// RuntimePropertyPreview (experimental) ...
type RuntimePropertyPreview struct {
	// Name Property name.
	Name string `json:"name"`

	// Type Object type. Accessor means that the property itself is an accessor property.
	Type string `json:"type"`

	// Value User-friendly property value string.
	Value string `json:"value,omitempty"`

	// ValuePreview Nested value preview.
	ValuePreview *RuntimeObjectPreview `json:"valuePreview,omitempty"`

	// Subtype Object subtype hint. Specified for `object` type values only.
	Subtype string `json:"subtype,omitempty"`
}

// RuntimeEntryPreview (experimental) ...
type RuntimeEntryPreview struct {
	// Key Preview of the key. Specified for map-like collection entries.
	Key *RuntimeObjectPreview `json:"key,omitempty"`

	// Value Preview of the value.
	Value *RuntimeObjectPreview `json:"value"`
}

// RuntimePropertyDescriptor Object property descriptor.
type RuntimePropertyDescriptor struct {
	// Name Property name or symbol description.
	Name string `json:"name"`

	// Value The value associated with the property.
	Value *RuntimeRemoteObject `json:"value,omitempty"`

	// Writable True if the value associated with the property may be changed (data descriptors only).
	Writable bool `json:"writable,omitempty"`

	// Get A function which serves as a getter for the property, or `undefined` if there is no getter
	// (accessor descriptors only).
	Get *RuntimeRemoteObject `json:"get,omitempty"`

	// Set A function which serves as a setter for the property, or `undefined` if there is no setter
	// (accessor descriptors only).
	Set *RuntimeRemoteObject `json:"set,omitempty"`

	// Configurable True if the type of this property descriptor may be changed and if the property may be
	// deleted from the corresponding object.
	Configurable bool `json:"configurable"`

	// Enumerable True if this property shows up during enumeration of the properties on the corresponding
	// object.
	Enumerable bool `json:"enumerable"`

	// WasThrown True if the result was thrown during the evaluation.
	WasThrown bool `json:"wasThrown,omitempty"`

	// IsOwn True if the property is owned for the object.
	IsOwn bool `json:"isOwn,omitempty"`

	// Symbol Property symbol object, if the property is of the `symbol` type.
	Symbol *RuntimeRemoteObject `json:"symbol,omitempty"`
}

// RuntimeInternalPropertyDescriptor Object internal property descriptor. This property isn't normally visible in JavaScript code.
type RuntimeInternalPropertyDescriptor struct {
	// Name Conventional property name.
	Name string `json:"name"`

	// Value The value associated with the property.
	Value *RuntimeRemoteObject `json:"value,omitempty"`
}

// RuntimePrivatePropertyDescriptor (experimental) Object private field descriptor.
type RuntimePrivatePropertyDescriptor struct {
	// Name Private property name.
	Name string `json:"name"`

	// Value The value associated with the private property.
	Value *RuntimeRemoteObject `json:"value,omitempty"`

	// Get A function which serves as a getter for the private property,
	// or `undefined` if there is no getter (accessor descriptors only).
	Get *RuntimeRemoteObject `json:"get,omitempty"`

	// Set A function which serves as a setter for the private property,
	// or `undefined` if there is no setter (accessor descriptors only).
	Set *RuntimeRemoteObject `json:"set,omitempty"`
}

// RuntimeCallArgument Represents function call argument. Either remote object id `objectId`, primitive `value`,
// unserializable primitive value or neither of (for undefined) them should be specified.
type RuntimeCallArgument struct {
	// Value Primitive value or serializable javascript object.
	Value interface{} `json:"value,omitempty"`

	// UnserializableValue Primitive value which can not be JSON-stringified.
	UnserializableValue *RuntimeUnserializableValue `json:"unserializableValue,omitempty"`

	// ObjectID Remote object handle.
	ObjectID *RuntimeRemoteObjectID `json:"objectId,omitempty"`
}

// RuntimeExecutionContextID Id of an execution context.
type RuntimeExecutionContextID int64

// RuntimeExecutionContextDescription Description of an isolated world.
type RuntimeExecutionContextDescription struct {
	// ID Unique id of the execution context. It can be used to specify in which execution context
	// script evaluation should be performed.
	ID *RuntimeExecutionContextID `json:"id"`

	// Origin Execution context origin.
	Origin string `json:"origin"`

	// Name Human readable name describing given context.
	Name string `json:"name"`

	// AuxData Embedder-specific auxiliary data.
	AuxData map[string]interface{} `json:"auxData,omitempty"`
}

// RuntimeExceptionDetails Detailed information about exception (or error) that was thrown during script compilation or
// execution.
type RuntimeExceptionDetails struct {
	// ExceptionID Exception id.
	ExceptionID int64 `json:"exceptionId"`

	// Text Exception text, which should be used together with exception object when available.
	Text string `json:"text"`

	// LineNumber Line number of the exception location (0-based).
	LineNumber int64 `json:"lineNumber"`

	// ColumnNumber Column number of the exception location (0-based).
	ColumnNumber int64 `json:"columnNumber"`

	// ScriptID Script ID of the exception location.
	ScriptID *RuntimeScriptID `json:"scriptId,omitempty"`

	// URL URL of the exception location, to be used when the script was not reported.
	URL string `json:"url,omitempty"`

	// StackTrace JavaScript stack trace if available.
	StackTrace *RuntimeStackTrace `json:"stackTrace,omitempty"`

	// Exception Exception object if available.
	Exception *RuntimeRemoteObject `json:"exception,omitempty"`

	// ExecutionContextID Identifier of the context where exception happened.
	ExecutionContextID *RuntimeExecutionContextID `json:"executionContextId,omitempty"`
}

// RuntimeTimestamp Number of milliseconds since epoch.
type RuntimeTimestamp float64

// RuntimeTimeDelta Number of milliseconds.
type RuntimeTimeDelta float64

// RuntimeCallFrame Stack entry for runtime errors and assertions.
type RuntimeCallFrame struct {
	// FunctionName JavaScript function name.
	FunctionName string `json:"functionName"`

	// ScriptID JavaScript script id.
	ScriptID *RuntimeScriptID `json:"scriptId"`

	// URL JavaScript script name or url.
	URL string `json:"url"`

	// LineNumber JavaScript script line number (0-based).
	LineNumber int64 `json:"lineNumber"`

	// ColumnNumber JavaScript script column number (0-based).
	ColumnNumber int64 `json:"columnNumber"`
}

// RuntimeStackTrace Call frames for assertions or error messages.
type RuntimeStackTrace struct {
	// Description String label of this stack trace. For async traces this may be a name of the function that
	// initiated the async call.
	Description string `json:"description,omitempty"`

	// CallFrames JavaScript function name.
	CallFrames []*RuntimeCallFrame `json:"callFrames"`

	// Parent Asynchronous JavaScript stack trace that preceded this stack, if available.
	Parent *RuntimeStackTrace `json:"parent,omitempty"`

	// ParentID (experimental) Asynchronous JavaScript stack trace that preceded this stack, if available.
	ParentID *RuntimeStackTraceID `json:"parentId,omitempty"`
}

// RuntimeUniqueDebuggerID (experimental) Unique identifier of current debugger.
type RuntimeUniqueDebuggerID string

// RuntimeStackTraceID (experimental) If `debuggerId` is set stack trace comes from another debugger and can be resolved there. This
// allows to track cross-debugger calls. See `Runtime.StackTrace` and `Debugger.paused` for usages.
type RuntimeStackTraceID struct {
	// ID ...
	ID string `json:"id"`

	// DebuggerID ...
	DebuggerID *RuntimeUniqueDebuggerID `json:"debuggerId,omitempty"`
}
