// This file is generated by "./lib/proto/cmd/gen"

package proto

import (
	"encoding/json"
)

// AuditsAuditsGetEncodedResponseEncoding Enum of possible values
type AuditsAuditsGetEncodedResponseEncoding string

const (
	// AuditsAuditsGetEncodedResponseEncodingWebp enum value
	AuditsAuditsGetEncodedResponseEncodingWebp AuditsAuditsGetEncodedResponseEncoding = "webp"

	// AuditsAuditsGetEncodedResponseEncodingJpeg enum value
	AuditsAuditsGetEncodedResponseEncodingJpeg AuditsAuditsGetEncodedResponseEncoding = "jpeg"

	// AuditsAuditsGetEncodedResponseEncodingPng enum value
	AuditsAuditsGetEncodedResponseEncodingPng AuditsAuditsGetEncodedResponseEncoding = "png"
)

// AuditsGetEncodedResponse Returns the response body and size if it were re-encoded with the specified settings. Only
// applies to images.
type AuditsGetEncodedResponse struct {
	// RequestID Identifier of the network request to get content for.
	RequestID *NetworkRequestID `json:"requestId"`

	// Encoding The encoding to use.
	Encoding AuditsAuditsGetEncodedResponseEncoding `json:"encoding"`

	// Quality The quality of the encoding (0-1). (defaults to 1)
	Quality float64 `json:"quality,omitempty"`

	// SizeOnly Whether to only return the size information (defaults to false).
	SizeOnly bool `json:"sizeOnly,omitempty"`
}

// AuditsGetEncodedResponseResult type
type AuditsGetEncodedResponseResult struct {
	// Body The encoded body as a base64 string. Omitted if sizeOnly is true.
	Body []byte `json:"body,omitempty"`

	// OriginalSize Size before re-encoding.
	OriginalSize int64 `json:"originalSize"`

	// EncodedSize Size after re-encoding.
	EncodedSize int64 `json:"encodedSize"`
}

// Call of the command, sessionID is optional.
func (m AuditsGetEncodedResponse) Call(c *Call) (*AuditsGetEncodedResponseResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "AuditsGetEncodedResponse", m)
	if err != nil {
		return nil, err
	}

	var res AuditsGetEncodedResponseResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}
