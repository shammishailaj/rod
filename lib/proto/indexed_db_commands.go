// This file is generated by "./lib/proto/cmd/gen"

package proto

import (
	"encoding/json"
)

// IndexedDBClearObjectStore Clears all entries from an object store.
type IndexedDBClearObjectStore struct {
	// SecurityOrigin Security origin.
	SecurityOrigin string `json:"securityOrigin"`

	// DatabaseName Database name.
	DatabaseName string `json:"databaseName"`

	// ObjectStoreName Object store name.
	ObjectStoreName string `json:"objectStoreName"`
}

// IndexedDBClearObjectStoreResult type
type IndexedDBClearObjectStoreResult struct {
}

// Call of the command, sessionID is optional.
func (m IndexedDBClearObjectStore) Call(c *Call) (*IndexedDBClearObjectStoreResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "IndexedDBClearObjectStore", m)
	if err != nil {
		return nil, err
	}

	var res IndexedDBClearObjectStoreResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// IndexedDBDeleteDatabase Deletes a database.
type IndexedDBDeleteDatabase struct {
	// SecurityOrigin Security origin.
	SecurityOrigin string `json:"securityOrigin"`

	// DatabaseName Database name.
	DatabaseName string `json:"databaseName"`
}

// IndexedDBDeleteDatabaseResult type
type IndexedDBDeleteDatabaseResult struct {
}

// Call of the command, sessionID is optional.
func (m IndexedDBDeleteDatabase) Call(c *Call) (*IndexedDBDeleteDatabaseResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "IndexedDBDeleteDatabase", m)
	if err != nil {
		return nil, err
	}

	var res IndexedDBDeleteDatabaseResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// IndexedDBDeleteObjectStoreEntries Delete a range of entries from an object store
type IndexedDBDeleteObjectStoreEntries struct {
	// SecurityOrigin ...
	SecurityOrigin string `json:"securityOrigin"`

	// DatabaseName ...
	DatabaseName string `json:"databaseName"`

	// ObjectStoreName ...
	ObjectStoreName string `json:"objectStoreName"`

	// KeyRange Range of entry keys to delete
	KeyRange *IndexedDBKeyRange `json:"keyRange"`
}

// IndexedDBDeleteObjectStoreEntriesResult type
type IndexedDBDeleteObjectStoreEntriesResult struct {
}

// Call of the command, sessionID is optional.
func (m IndexedDBDeleteObjectStoreEntries) Call(c *Call) (*IndexedDBDeleteObjectStoreEntriesResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "IndexedDBDeleteObjectStoreEntries", m)
	if err != nil {
		return nil, err
	}

	var res IndexedDBDeleteObjectStoreEntriesResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// IndexedDBDisable Disables events from backend.
type IndexedDBDisable struct {
}

// IndexedDBDisableResult type
type IndexedDBDisableResult struct {
}

// Call of the command, sessionID is optional.
func (m IndexedDBDisable) Call(c *Call) (*IndexedDBDisableResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "IndexedDBDisable", m)
	if err != nil {
		return nil, err
	}

	var res IndexedDBDisableResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// IndexedDBEnable Enables events from backend.
type IndexedDBEnable struct {
}

// IndexedDBEnableResult type
type IndexedDBEnableResult struct {
}

// Call of the command, sessionID is optional.
func (m IndexedDBEnable) Call(c *Call) (*IndexedDBEnableResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "IndexedDBEnable", m)
	if err != nil {
		return nil, err
	}

	var res IndexedDBEnableResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// IndexedDBRequestData Requests data from object store or index.
type IndexedDBRequestData struct {
	// SecurityOrigin Security origin.
	SecurityOrigin string `json:"securityOrigin"`

	// DatabaseName Database name.
	DatabaseName string `json:"databaseName"`

	// ObjectStoreName Object store name.
	ObjectStoreName string `json:"objectStoreName"`

	// IndexName Index name, empty string for object store data requests.
	IndexName string `json:"indexName"`

	// SkipCount Number of records to skip.
	SkipCount int64 `json:"skipCount"`

	// PageSize Number of records to fetch.
	PageSize int64 `json:"pageSize"`

	// KeyRange Key range.
	KeyRange *IndexedDBKeyRange `json:"keyRange,omitempty"`
}

// IndexedDBRequestDataResult type
type IndexedDBRequestDataResult struct {
	// ObjectStoreDataEntries Array of object store data entries.
	ObjectStoreDataEntries []*IndexedDBDataEntry `json:"objectStoreDataEntries"`

	// HasMore If true, there are more entries to fetch in the given range.
	HasMore bool `json:"hasMore"`
}

// Call of the command, sessionID is optional.
func (m IndexedDBRequestData) Call(c *Call) (*IndexedDBRequestDataResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "IndexedDBRequestData", m)
	if err != nil {
		return nil, err
	}

	var res IndexedDBRequestDataResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// IndexedDBGetMetadata Gets metadata of an object store
type IndexedDBGetMetadata struct {
	// SecurityOrigin Security origin.
	SecurityOrigin string `json:"securityOrigin"`

	// DatabaseName Database name.
	DatabaseName string `json:"databaseName"`

	// ObjectStoreName Object store name.
	ObjectStoreName string `json:"objectStoreName"`
}

// IndexedDBGetMetadataResult type
type IndexedDBGetMetadataResult struct {
	// EntriesCount the entries count
	EntriesCount float64 `json:"entriesCount"`

	// KeyGeneratorValue the current value of key generator, to become the next inserted
	// key into the object store. Valid if objectStore.autoIncrement
	// is true.
	KeyGeneratorValue float64 `json:"keyGeneratorValue"`
}

// Call of the command, sessionID is optional.
func (m IndexedDBGetMetadata) Call(c *Call) (*IndexedDBGetMetadataResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "IndexedDBGetMetadata", m)
	if err != nil {
		return nil, err
	}

	var res IndexedDBGetMetadataResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// IndexedDBRequestDatabase Requests database with given name in given frame.
type IndexedDBRequestDatabase struct {
	// SecurityOrigin Security origin.
	SecurityOrigin string `json:"securityOrigin"`

	// DatabaseName Database name.
	DatabaseName string `json:"databaseName"`
}

// IndexedDBRequestDatabaseResult type
type IndexedDBRequestDatabaseResult struct {
	// DatabaseWithObjectStores Database with an array of object stores.
	DatabaseWithObjectStores *IndexedDBDatabaseWithObjectStores `json:"databaseWithObjectStores"`
}

// Call of the command, sessionID is optional.
func (m IndexedDBRequestDatabase) Call(c *Call) (*IndexedDBRequestDatabaseResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "IndexedDBRequestDatabase", m)
	if err != nil {
		return nil, err
	}

	var res IndexedDBRequestDatabaseResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// IndexedDBRequestDatabaseNames Requests database names for given security origin.
type IndexedDBRequestDatabaseNames struct {
	// SecurityOrigin Security origin.
	SecurityOrigin string `json:"securityOrigin"`
}

// IndexedDBRequestDatabaseNamesResult type
type IndexedDBRequestDatabaseNamesResult struct {
	// DatabaseNames Database names for origin.
	DatabaseNames []string `json:"databaseNames"`
}

// Call of the command, sessionID is optional.
func (m IndexedDBRequestDatabaseNames) Call(c *Call) (*IndexedDBRequestDatabaseNamesResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "IndexedDBRequestDatabaseNames", m)
	if err != nil {
		return nil, err
	}

	var res IndexedDBRequestDatabaseNamesResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}
