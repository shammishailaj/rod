// This file is generated by "./lib/proto/cmd/gen"

package proto

import (
	"encoding/json"
)

// PerformanceDisable Disable collecting and reporting metrics.
type PerformanceDisable struct {
}

// PerformanceDisableResult type
type PerformanceDisableResult struct {
}

// Call of the command, sessionID is optional.
func (m PerformanceDisable) Call(c *Call) (*PerformanceDisableResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "PerformanceDisable", m)
	if err != nil {
		return nil, err
	}

	var res PerformanceDisableResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// PerformanceEnable Enable collecting and reporting metrics.
type PerformanceEnable struct {
}

// PerformanceEnableResult type
type PerformanceEnableResult struct {
}

// Call of the command, sessionID is optional.
func (m PerformanceEnable) Call(c *Call) (*PerformanceEnableResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "PerformanceEnable", m)
	if err != nil {
		return nil, err
	}

	var res PerformanceEnableResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// PerformancePerformanceSetTimeDomainTimeDomain Enum of possible values
type PerformancePerformanceSetTimeDomainTimeDomain string

const (
	// PerformancePerformanceSetTimeDomainTimeDomainTimeTicks enum value
	PerformancePerformanceSetTimeDomainTimeDomainTimeTicks PerformancePerformanceSetTimeDomainTimeDomain = "timeTicks"

	// PerformancePerformanceSetTimeDomainTimeDomainThreadTicks enum value
	PerformancePerformanceSetTimeDomainTimeDomainThreadTicks PerformancePerformanceSetTimeDomainTimeDomain = "threadTicks"
)

// PerformanceSetTimeDomain (experimental) Sets time domain to use for collecting and reporting duration metrics.
// Note that this must be called before enabling metrics collection. Calling
// this method while metrics collection is enabled returns an error.
type PerformanceSetTimeDomain struct {
	// TimeDomain Time domain
	TimeDomain PerformancePerformanceSetTimeDomainTimeDomain `json:"timeDomain"`
}

// PerformanceSetTimeDomainResult type
type PerformanceSetTimeDomainResult struct {
}

// Call of the command, sessionID is optional.
func (m PerformanceSetTimeDomain) Call(c *Call) (*PerformanceSetTimeDomainResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "PerformanceSetTimeDomain", m)
	if err != nil {
		return nil, err
	}

	var res PerformanceSetTimeDomainResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// PerformanceGetMetrics Retrieve current values of run-time metrics.
type PerformanceGetMetrics struct {
}

// PerformanceGetMetricsResult type
type PerformanceGetMetricsResult struct {
	// Metrics Current values for run-time metrics.
	Metrics []*PerformanceMetric `json:"metrics"`
}

// Call of the command, sessionID is optional.
func (m PerformanceGetMetrics) Call(c *Call) (*PerformanceGetMetricsResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "PerformanceGetMetrics", m)
	if err != nil {
		return nil, err
	}

	var res PerformanceGetMetricsResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}
