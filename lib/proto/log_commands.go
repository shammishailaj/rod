// This file is generated by "./lib/proto/cmd/gen"

package proto

import (
	"encoding/json"
)

// LogClear Clears the log.
type LogClear struct {
}

// LogClearResult type
type LogClearResult struct {
}

// Call of the command, sessionID is optional.
func (m LogClear) Call(c *Call) (*LogClearResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "LogClear", m)
	if err != nil {
		return nil, err
	}

	var res LogClearResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// LogDisable Disables log domain, prevents further log entries from being reported to the client.
type LogDisable struct {
}

// LogDisableResult type
type LogDisableResult struct {
}

// Call of the command, sessionID is optional.
func (m LogDisable) Call(c *Call) (*LogDisableResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "LogDisable", m)
	if err != nil {
		return nil, err
	}

	var res LogDisableResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// LogEnable Enables log domain, sends the entries collected so far to the client by means of the
// `entryAdded` notification.
type LogEnable struct {
}

// LogEnableResult type
type LogEnableResult struct {
}

// Call of the command, sessionID is optional.
func (m LogEnable) Call(c *Call) (*LogEnableResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "LogEnable", m)
	if err != nil {
		return nil, err
	}

	var res LogEnableResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// LogStartViolationsReport start violation reporting.
type LogStartViolationsReport struct {
	// Config Configuration for violations.
	Config []*LogViolationSetting `json:"config"`
}

// LogStartViolationsReportResult type
type LogStartViolationsReportResult struct {
}

// Call of the command, sessionID is optional.
func (m LogStartViolationsReport) Call(c *Call) (*LogStartViolationsReportResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "LogStartViolationsReport", m)
	if err != nil {
		return nil, err
	}

	var res LogStartViolationsReportResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// LogStopViolationsReport Stop violation reporting.
type LogStopViolationsReport struct {
}

// LogStopViolationsReportResult type
type LogStopViolationsReportResult struct {
}

// Call of the command, sessionID is optional.
func (m LogStopViolationsReport) Call(c *Call) (*LogStopViolationsReportResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "LogStopViolationsReport", m)
	if err != nil {
		return nil, err
	}

	var res LogStopViolationsReportResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}
