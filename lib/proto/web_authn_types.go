// This file is generated by "./lib/proto/cmd/gen"

package proto

// WebAuthnAuthenticatorID ...
type WebAuthnAuthenticatorID string

// WebAuthnAuthenticatorProtocol ...
type WebAuthnAuthenticatorProtocol string

const (
	// WebAuthnAuthenticatorProtocolU2f enum value
	WebAuthnAuthenticatorProtocolU2f WebAuthnAuthenticatorProtocol = "u2f"

	// WebAuthnAuthenticatorProtocolCtap2 enum value
	WebAuthnAuthenticatorProtocolCtap2 WebAuthnAuthenticatorProtocol = "ctap2"
)

// WebAuthnAuthenticatorTransport ...
type WebAuthnAuthenticatorTransport string

const (
	// WebAuthnAuthenticatorTransportUsb enum value
	WebAuthnAuthenticatorTransportUsb WebAuthnAuthenticatorTransport = "usb"

	// WebAuthnAuthenticatorTransportNfc enum value
	WebAuthnAuthenticatorTransportNfc WebAuthnAuthenticatorTransport = "nfc"

	// WebAuthnAuthenticatorTransportBle enum value
	WebAuthnAuthenticatorTransportBle WebAuthnAuthenticatorTransport = "ble"

	// WebAuthnAuthenticatorTransportCable enum value
	WebAuthnAuthenticatorTransportCable WebAuthnAuthenticatorTransport = "cable"

	// WebAuthnAuthenticatorTransportInternal enum value
	WebAuthnAuthenticatorTransportInternal WebAuthnAuthenticatorTransport = "internal"
)

// WebAuthnVirtualAuthenticatorOptions ...
type WebAuthnVirtualAuthenticatorOptions struct {
	// Protocol ...
	Protocol *WebAuthnAuthenticatorProtocol `json:"protocol"`

	// Transport ...
	Transport *WebAuthnAuthenticatorTransport `json:"transport"`

	// HasResidentKey Defaults to false.
	HasResidentKey bool `json:"hasResidentKey,omitempty"`

	// HasUserVerification Defaults to false.
	HasUserVerification bool `json:"hasUserVerification,omitempty"`

	// AutomaticPresenceSimulation If set to true, tests of user presence will succeed immediately.
	// Otherwise, they will not be resolved. Defaults to true.
	AutomaticPresenceSimulation bool `json:"automaticPresenceSimulation,omitempty"`

	// IsUserVerified Sets whether User Verification succeeds or fails for an authenticator.
	// Defaults to false.
	IsUserVerified bool `json:"isUserVerified,omitempty"`
}

// WebAuthnCredential ...
type WebAuthnCredential struct {
	// CredentialID ...
	CredentialID []byte `json:"credentialId"`

	// IsResidentCredential ...
	IsResidentCredential bool `json:"isResidentCredential"`

	// RpID Relying Party ID the credential is scoped to. Must be set when adding a
	// credential.
	RpID string `json:"rpId,omitempty"`

	// PrivateKey The ECDSA P-256 private key in PKCS#8 format.
	PrivateKey []byte `json:"privateKey"`

	// UserHandle An opaque byte sequence with a maximum size of 64 bytes mapping the
	// credential to a specific user.
	UserHandle []byte `json:"userHandle,omitempty"`

	// SignCount Signature counter. This is incremented by one for each successful
	// assertion.
	// See https://w3c.github.io/webauthn/#signature-counter
	SignCount int64 `json:"signCount"`
}
