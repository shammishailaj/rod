// This file is generated by "./lib/proto/cmd/gen"

package proto

// CSSStyleSheetID ...
type CSSStyleSheetID string

// CSSStyleSheetOrigin Stylesheet type: "injected" for stylesheets injected via extension, "user-agent" for user-agent
// stylesheets, "inspector" for stylesheets created by the inspector (i.e. those holding the "via
// inspector" rules), "regular" for regular stylesheets.
type CSSStyleSheetOrigin string

const (
	// CSSStyleSheetOriginInjected enum value
	CSSStyleSheetOriginInjected CSSStyleSheetOrigin = "injected"

	// CSSStyleSheetOriginUserAgent enum value
	CSSStyleSheetOriginUserAgent CSSStyleSheetOrigin = "user-agent"

	// CSSStyleSheetOriginInspector enum value
	CSSStyleSheetOriginInspector CSSStyleSheetOrigin = "inspector"

	// CSSStyleSheetOriginRegular enum value
	CSSStyleSheetOriginRegular CSSStyleSheetOrigin = "regular"
)

// CSSPseudoElementMatches CSS rule collection for a single pseudo style.
type CSSPseudoElementMatches struct {
	// PseudoType Pseudo element type.
	PseudoType *DOMPseudoType `json:"pseudoType"`

	// Matches Matches of CSS rules applicable to the pseudo style.
	Matches []*CSSRuleMatch `json:"matches"`
}

// CSSInheritedStyleEntry Inherited CSS rule collection from ancestor node.
type CSSInheritedStyleEntry struct {
	// InlineStyle The ancestor node's inline style, if any, in the style inheritance chain.
	InlineStyle *CSSCSSStyle `json:"inlineStyle,omitempty"`

	// MatchedCSSRules Matches of CSS rules matching the ancestor node in the style inheritance chain.
	MatchedCSSRules []*CSSRuleMatch `json:"matchedCSSRules"`
}

// CSSRuleMatch Match data for a CSS rule.
type CSSRuleMatch struct {
	// Rule CSS rule in the match.
	Rule *CSSCSSRule `json:"rule"`

	// MatchingSelectors Matching selector indices in the rule's selectorList selectors (0-based).
	MatchingSelectors []int64 `json:"matchingSelectors"`
}

// CSSValue Data for a simple selector (these are delimited by commas in a selector list).
type CSSValue struct {
	// Text Value text.
	Text string `json:"text"`

	// Range Value range in the underlying resource (if available).
	Range *CSSSourceRange `json:"range,omitempty"`
}

// CSSSelectorList Selector list data.
type CSSSelectorList struct {
	// Selectors Selectors in the list.
	Selectors []*CSSValue `json:"selectors"`

	// Text Rule selector text.
	Text string `json:"text"`
}

// CSSCSSStyleSheetHeader CSS stylesheet metainformation.
type CSSCSSStyleSheetHeader struct {
	// StyleSheetID The stylesheet identifier.
	StyleSheetID *CSSStyleSheetID `json:"styleSheetId"`

	// FrameID Owner frame identifier.
	FrameID *PageFrameID `json:"frameId"`

	// SourceURL Stylesheet resource URL.
	SourceURL string `json:"sourceURL"`

	// SourceMapURL URL of source map associated with the stylesheet (if any).
	SourceMapURL string `json:"sourceMapURL,omitempty"`

	// Origin Stylesheet origin.
	Origin *CSSStyleSheetOrigin `json:"origin"`

	// Title Stylesheet title.
	Title string `json:"title"`

	// OwnerNode The backend id for the owner node of the stylesheet.
	OwnerNode *DOMBackendNodeID `json:"ownerNode,omitempty"`

	// Disabled Denotes whether the stylesheet is disabled.
	Disabled bool `json:"disabled"`

	// HasSourceURL Whether the sourceURL field value comes from the sourceURL comment.
	HasSourceURL bool `json:"hasSourceURL,omitempty"`

	// IsInline Whether this stylesheet is created for STYLE tag by parser. This flag is not set for
	// document.written STYLE tags.
	IsInline bool `json:"isInline"`

	// StartLine Line offset of the stylesheet within the resource (zero based).
	StartLine float64 `json:"startLine"`

	// StartColumn Column offset of the stylesheet within the resource (zero based).
	StartColumn float64 `json:"startColumn"`

	// Length Size of the content (in characters).
	Length float64 `json:"length"`

	// EndLine Line offset of the end of the stylesheet within the resource (zero based).
	EndLine float64 `json:"endLine"`

	// EndColumn Column offset of the end of the stylesheet within the resource (zero based).
	EndColumn float64 `json:"endColumn"`
}

// CSSCSSRule CSS rule representation.
type CSSCSSRule struct {
	// StyleSheetID The css style sheet identifier (absent for user agent stylesheet and user-specified
	// stylesheet rules) this rule came from.
	StyleSheetID *CSSStyleSheetID `json:"styleSheetId,omitempty"`

	// SelectorList Rule selector data.
	SelectorList *CSSSelectorList `json:"selectorList"`

	// Origin Parent stylesheet's origin.
	Origin *CSSStyleSheetOrigin `json:"origin"`

	// Style Associated style declaration.
	Style *CSSCSSStyle `json:"style"`

	// Media Media list array (for rules involving media queries). The array enumerates media queries
	// starting with the innermost one, going outwards.
	Media []*CSSCSSMedia `json:"media,omitempty"`
}

// CSSRuleUsage CSS coverage information.
type CSSRuleUsage struct {
	// StyleSheetID The css style sheet identifier (absent for user agent stylesheet and user-specified
	// stylesheet rules) this rule came from.
	StyleSheetID *CSSStyleSheetID `json:"styleSheetId"`

	// StartOffset Offset of the start of the rule (including selector) from the beginning of the stylesheet.
	StartOffset float64 `json:"startOffset"`

	// EndOffset Offset of the end of the rule body from the beginning of the stylesheet.
	EndOffset float64 `json:"endOffset"`

	// Used Indicates whether the rule was actually used by some element in the page.
	Used bool `json:"used"`
}

// CSSSourceRange Text range within a resource. All numbers are zero-based.
type CSSSourceRange struct {
	// StartLine Start line of range.
	StartLine int64 `json:"startLine"`

	// StartColumn Start column of range (inclusive).
	StartColumn int64 `json:"startColumn"`

	// EndLine End line of range
	EndLine int64 `json:"endLine"`

	// EndColumn End column of range (exclusive).
	EndColumn int64 `json:"endColumn"`
}

// CSSShorthandEntry ...
type CSSShorthandEntry struct {
	// Name Shorthand name.
	Name string `json:"name"`

	// Value Shorthand value.
	Value string `json:"value"`

	// Important Whether the property has "!important" annotation (implies `false` if absent).
	Important bool `json:"important,omitempty"`
}

// CSSCSSComputedStyleProperty ...
type CSSCSSComputedStyleProperty struct {
	// Name Computed style property name.
	Name string `json:"name"`

	// Value Computed style property value.
	Value string `json:"value"`
}

// CSSCSSStyle CSS style representation.
type CSSCSSStyle struct {
	// StyleSheetID The css style sheet identifier (absent for user agent stylesheet and user-specified
	// stylesheet rules) this rule came from.
	StyleSheetID *CSSStyleSheetID `json:"styleSheetId,omitempty"`

	// CSSProperties CSS properties in the style.
	CSSProperties []*CSSCSSProperty `json:"cssProperties"`

	// ShorthandEntries Computed values for all shorthands found in the style.
	ShorthandEntries []*CSSShorthandEntry `json:"shorthandEntries"`

	// CSSText Style declaration text (if available).
	CSSText string `json:"cssText,omitempty"`

	// Range Style declaration range in the enclosing stylesheet (if available).
	Range *CSSSourceRange `json:"range,omitempty"`
}

// CSSCSSProperty CSS property declaration data.
type CSSCSSProperty struct {
	// Name The property name.
	Name string `json:"name"`

	// Value The property value.
	Value string `json:"value"`

	// Important Whether the property has "!important" annotation (implies `false` if absent).
	Important bool `json:"important,omitempty"`

	// Implicit Whether the property is implicit (implies `false` if absent).
	Implicit bool `json:"implicit,omitempty"`

	// Text The full property text as specified in the style.
	Text string `json:"text,omitempty"`

	// ParsedOk Whether the property is understood by the browser (implies `true` if absent).
	ParsedOk bool `json:"parsedOk,omitempty"`

	// Disabled Whether the property is disabled by the user (present for source-based properties only).
	Disabled bool `json:"disabled,omitempty"`

	// Range The entire property range in the enclosing style declaration (if available).
	Range *CSSSourceRange `json:"range,omitempty"`
}

// CSSCSSMedia CSS media rule descriptor.
type CSSCSSMedia struct {
	// Text Media query text.
	Text string `json:"text"`

	// Source Source of the media query: "mediaRule" if specified by a @media rule, "importRule" if
	// specified by an @import rule, "linkedSheet" if specified by a "media" attribute in a linked
	// stylesheet's LINK tag, "inlineSheet" if specified by a "media" attribute in an inline
	// stylesheet's STYLE tag.
	Source string `json:"source"`

	// SourceURL URL of the document containing the media query description.
	SourceURL string `json:"sourceURL,omitempty"`

	// Range The associated rule (@media or @import) header range in the enclosing stylesheet (if
	// available).
	Range *CSSSourceRange `json:"range,omitempty"`

	// StyleSheetID Identifier of the stylesheet containing this object (if exists).
	StyleSheetID *CSSStyleSheetID `json:"styleSheetId,omitempty"`

	// MediaList Array of media queries.
	MediaList []*CSSMediaQuery `json:"mediaList,omitempty"`
}

// CSSMediaQuery Media query descriptor.
type CSSMediaQuery struct {
	// Expressions Array of media query expressions.
	Expressions []*CSSMediaQueryExpression `json:"expressions"`

	// Active Whether the media query condition is satisfied.
	Active bool `json:"active"`
}

// CSSMediaQueryExpression Media query expression descriptor.
type CSSMediaQueryExpression struct {
	// Value Media query expression value.
	Value float64 `json:"value"`

	// Unit Media query expression units.
	Unit string `json:"unit"`

	// Feature Media query expression feature.
	Feature string `json:"feature"`

	// ValueRange The associated range of the value text in the enclosing stylesheet (if available).
	ValueRange *CSSSourceRange `json:"valueRange,omitempty"`

	// ComputedLength Computed length of media query expression (if applicable).
	ComputedLength float64 `json:"computedLength,omitempty"`
}

// CSSPlatformFontUsage Information about amount of glyphs that were rendered with given font.
type CSSPlatformFontUsage struct {
	// FamilyName Font's family name reported by platform.
	FamilyName string `json:"familyName"`

	// IsCustomFont Indicates if the font was downloaded or resolved locally.
	IsCustomFont bool `json:"isCustomFont"`

	// GlyphCount Amount of glyphs that were rendered with this font.
	GlyphCount float64 `json:"glyphCount"`
}

// CSSFontFace Properties of a web font: https://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#font-descriptions
type CSSFontFace struct {
	// FontFamily The font-family.
	FontFamily string `json:"fontFamily"`

	// FontStyle The font-style.
	FontStyle string `json:"fontStyle"`

	// FontVariant The font-variant.
	FontVariant string `json:"fontVariant"`

	// FontWeight The font-weight.
	FontWeight string `json:"fontWeight"`

	// FontStretch The font-stretch.
	FontStretch string `json:"fontStretch"`

	// UnicodeRange The unicode-range.
	UnicodeRange string `json:"unicodeRange"`

	// Src The src.
	Src string `json:"src"`

	// PlatformFontFamily The resolved platform font family
	PlatformFontFamily string `json:"platformFontFamily"`
}

// CSSCSSKeyframesRule CSS keyframes rule representation.
type CSSCSSKeyframesRule struct {
	// AnimationName Animation name.
	AnimationName *CSSValue `json:"animationName"`

	// Keyframes List of keyframes.
	Keyframes []*CSSCSSKeyframeRule `json:"keyframes"`
}

// CSSCSSKeyframeRule CSS keyframe rule representation.
type CSSCSSKeyframeRule struct {
	// StyleSheetID The css style sheet identifier (absent for user agent stylesheet and user-specified
	// stylesheet rules) this rule came from.
	StyleSheetID *CSSStyleSheetID `json:"styleSheetId,omitempty"`

	// Origin Parent stylesheet's origin.
	Origin *CSSStyleSheetOrigin `json:"origin"`

	// KeyText Associated key text.
	KeyText *CSSValue `json:"keyText"`

	// Style Associated style declaration.
	Style *CSSCSSStyle `json:"style"`
}

// CSSStyleDeclarationEdit A descriptor of operation to mutate style declaration text.
type CSSStyleDeclarationEdit struct {
	// StyleSheetID The css style sheet identifier.
	StyleSheetID *CSSStyleSheetID `json:"styleSheetId"`

	// Range The range of the style text in the enclosing stylesheet.
	Range *CSSSourceRange `json:"range"`

	// Text New style text.
	Text string `json:"text"`
}
