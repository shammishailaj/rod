// This file is generated by "./lib/proto/cmd/gen"

package proto

import "encoding/json"

// PageDomContentEventFired ...
type PageDomContentEventFired struct {
	// Timestamp ...
	Timestamp *NetworkMonotonicTime `json:"timestamp"`
}

// MethodName interface
func (evt PageDomContentEventFired) MethodName() string {
	return "Page.domContentEventFired"
}

// Load json
func (evt PageDomContentEventFired) Load(b []byte) *PageDomContentEventFired {
	E(json.Unmarshal(b, &evt))
	return &evt
}

// PageFileChooserOpened Emitted only when `page.interceptFileChooser` is enabled.
type PageFileChooserOpened struct {
	// FrameID (experimental) Id of the frame containing input node.
	FrameID *PageFrameID `json:"frameId"`

	// BackendNodeID (experimental) Input node id.
	BackendNodeID *DOMBackendNodeID `json:"backendNodeId"`

	// Mode Input mode.
	Mode string `json:"mode"`
}

// MethodName interface
func (evt PageFileChooserOpened) MethodName() string {
	return "Page.fileChooserOpened"
}

// Load json
func (evt PageFileChooserOpened) Load(b []byte) *PageFileChooserOpened {
	E(json.Unmarshal(b, &evt))
	return &evt
}

// PageFrameAttached Fired when frame has been attached to its parent.
type PageFrameAttached struct {
	// FrameID Id of the frame that has been attached.
	FrameID *PageFrameID `json:"frameId"`

	// ParentFrameID Parent frame identifier.
	ParentFrameID *PageFrameID `json:"parentFrameId"`

	// Stack JavaScript stack trace of when frame was attached, only set if frame initiated from script.
	Stack *RuntimeStackTrace `json:"stack,omitempty"`
}

// MethodName interface
func (evt PageFrameAttached) MethodName() string {
	return "Page.frameAttached"
}

// Load json
func (evt PageFrameAttached) Load(b []byte) *PageFrameAttached {
	E(json.Unmarshal(b, &evt))
	return &evt
}

// PageFrameClearedScheduledNavigation (deprecated) Fired when frame no longer has a scheduled navigation.
type PageFrameClearedScheduledNavigation struct {
	// FrameID Id of the frame that has cleared its scheduled navigation.
	FrameID *PageFrameID `json:"frameId"`
}

// MethodName interface
func (evt PageFrameClearedScheduledNavigation) MethodName() string {
	return "Page.frameClearedScheduledNavigation"
}

// Load json
func (evt PageFrameClearedScheduledNavigation) Load(b []byte) *PageFrameClearedScheduledNavigation {
	E(json.Unmarshal(b, &evt))
	return &evt
}

// PageFrameDetached Fired when frame has been detached from its parent.
type PageFrameDetached struct {
	// FrameID Id of the frame that has been detached.
	FrameID *PageFrameID `json:"frameId"`
}

// MethodName interface
func (evt PageFrameDetached) MethodName() string {
	return "Page.frameDetached"
}

// Load json
func (evt PageFrameDetached) Load(b []byte) *PageFrameDetached {
	E(json.Unmarshal(b, &evt))
	return &evt
}

// PageFrameNavigated Fired once navigation of the frame has completed. Frame is now associated with the new loader.
type PageFrameNavigated struct {
	// Frame Frame object.
	Frame *PageFrame `json:"frame"`
}

// MethodName interface
func (evt PageFrameNavigated) MethodName() string {
	return "Page.frameNavigated"
}

// Load json
func (evt PageFrameNavigated) Load(b []byte) *PageFrameNavigated {
	E(json.Unmarshal(b, &evt))
	return &evt
}

// PageFrameResized (experimental) ...
type PageFrameResized struct {
}

// MethodName interface
func (evt PageFrameResized) MethodName() string {
	return "Page.frameResized"
}

// Load json
func (evt PageFrameResized) Load(b []byte) *PageFrameResized {
	E(json.Unmarshal(b, &evt))
	return &evt
}

// PageFrameRequestedNavigation (experimental) Fired when a renderer-initiated navigation is requested.
// Navigation may still be cancelled after the event is issued.
type PageFrameRequestedNavigation struct {
	// FrameID Id of the frame that is being navigated.
	FrameID *PageFrameID `json:"frameId"`

	// Reason The reason for the navigation.
	Reason *PageClientNavigationReason `json:"reason"`

	// URL The destination URL for the requested navigation.
	URL string `json:"url"`
}

// MethodName interface
func (evt PageFrameRequestedNavigation) MethodName() string {
	return "Page.frameRequestedNavigation"
}

// Load json
func (evt PageFrameRequestedNavigation) Load(b []byte) *PageFrameRequestedNavigation {
	E(json.Unmarshal(b, &evt))
	return &evt
}

// PageFrameScheduledNavigation (deprecated) Fired when frame schedules a potential navigation.
type PageFrameScheduledNavigation struct {
	// FrameID Id of the frame that has scheduled a navigation.
	FrameID *PageFrameID `json:"frameId"`

	// Delay Delay (in seconds) until the navigation is scheduled to begin. The navigation is not
	// guaranteed to start.
	Delay float64 `json:"delay"`

	// Reason The reason for the navigation.
	Reason *PageClientNavigationReason `json:"reason"`

	// URL The destination URL for the scheduled navigation.
	URL string `json:"url"`
}

// MethodName interface
func (evt PageFrameScheduledNavigation) MethodName() string {
	return "Page.frameScheduledNavigation"
}

// Load json
func (evt PageFrameScheduledNavigation) Load(b []byte) *PageFrameScheduledNavigation {
	E(json.Unmarshal(b, &evt))
	return &evt
}

// PageFrameStartedLoading (experimental) Fired when frame has started loading.
type PageFrameStartedLoading struct {
	// FrameID Id of the frame that has started loading.
	FrameID *PageFrameID `json:"frameId"`
}

// MethodName interface
func (evt PageFrameStartedLoading) MethodName() string {
	return "Page.frameStartedLoading"
}

// Load json
func (evt PageFrameStartedLoading) Load(b []byte) *PageFrameStartedLoading {
	E(json.Unmarshal(b, &evt))
	return &evt
}

// PageFrameStoppedLoading (experimental) Fired when frame has stopped loading.
type PageFrameStoppedLoading struct {
	// FrameID Id of the frame that has stopped loading.
	FrameID *PageFrameID `json:"frameId"`
}

// MethodName interface
func (evt PageFrameStoppedLoading) MethodName() string {
	return "Page.frameStoppedLoading"
}

// Load json
func (evt PageFrameStoppedLoading) Load(b []byte) *PageFrameStoppedLoading {
	E(json.Unmarshal(b, &evt))
	return &evt
}

// PageDownloadWillBegin (experimental) Fired when page is about to start a download.
type PageDownloadWillBegin struct {
	// FrameID Id of the frame that caused download to begin.
	FrameID *PageFrameID `json:"frameId"`

	// URL URL of the resource being downloaded.
	URL string `json:"url"`
}

// MethodName interface
func (evt PageDownloadWillBegin) MethodName() string {
	return "Page.downloadWillBegin"
}

// Load json
func (evt PageDownloadWillBegin) Load(b []byte) *PageDownloadWillBegin {
	E(json.Unmarshal(b, &evt))
	return &evt
}

// PageInterstitialHidden Fired when interstitial page was hidden
type PageInterstitialHidden struct {
}

// MethodName interface
func (evt PageInterstitialHidden) MethodName() string {
	return "Page.interstitialHidden"
}

// Load json
func (evt PageInterstitialHidden) Load(b []byte) *PageInterstitialHidden {
	E(json.Unmarshal(b, &evt))
	return &evt
}

// PageInterstitialShown Fired when interstitial page was shown
type PageInterstitialShown struct {
}

// MethodName interface
func (evt PageInterstitialShown) MethodName() string {
	return "Page.interstitialShown"
}

// Load json
func (evt PageInterstitialShown) Load(b []byte) *PageInterstitialShown {
	E(json.Unmarshal(b, &evt))
	return &evt
}

// PageJavascriptDialogClosed Fired when a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload) has been
// closed.
type PageJavascriptDialogClosed struct {
	// Result Whether dialog was confirmed.
	Result bool `json:"result"`

	// UserInput User input in case of prompt.
	UserInput string `json:"userInput"`
}

// MethodName interface
func (evt PageJavascriptDialogClosed) MethodName() string {
	return "Page.javascriptDialogClosed"
}

// Load json
func (evt PageJavascriptDialogClosed) Load(b []byte) *PageJavascriptDialogClosed {
	E(json.Unmarshal(b, &evt))
	return &evt
}

// PageJavascriptDialogOpening Fired when a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload) is about to
// open.
type PageJavascriptDialogOpening struct {
	// URL Frame url.
	URL string `json:"url"`

	// Message Message that will be displayed by the dialog.
	Message string `json:"message"`

	// Type Dialog type.
	Type *PageDialogType `json:"type"`

	// HasBrowserHandler True iff browser is capable showing or acting on the given dialog. When browser has no
	// dialog handler for given target, calling alert while Page domain is engaged will stall
	// the page execution. Execution can be resumed via calling Page.handleJavaScriptDialog.
	HasBrowserHandler bool `json:"hasBrowserHandler"`

	// DefaultPrompt Default dialog prompt.
	DefaultPrompt string `json:"defaultPrompt,omitempty"`
}

// MethodName interface
func (evt PageJavascriptDialogOpening) MethodName() string {
	return "Page.javascriptDialogOpening"
}

// Load json
func (evt PageJavascriptDialogOpening) Load(b []byte) *PageJavascriptDialogOpening {
	E(json.Unmarshal(b, &evt))
	return &evt
}

// PageLifecycleEvent Fired for top level page lifecycle events such as navigation, load, paint, etc.
type PageLifecycleEvent struct {
	// FrameID Id of the frame.
	FrameID *PageFrameID `json:"frameId"`

	// LoaderID Loader identifier. Empty string if the request is fetched from worker.
	LoaderID *NetworkLoaderID `json:"loaderId"`

	// Name ...
	Name string `json:"name"`

	// Timestamp ...
	Timestamp *NetworkMonotonicTime `json:"timestamp"`
}

// MethodName interface
func (evt PageLifecycleEvent) MethodName() string {
	return "Page.lifecycleEvent"
}

// Load json
func (evt PageLifecycleEvent) Load(b []byte) *PageLifecycleEvent {
	E(json.Unmarshal(b, &evt))
	return &evt
}

// PageLoadEventFired ...
type PageLoadEventFired struct {
	// Timestamp ...
	Timestamp *NetworkMonotonicTime `json:"timestamp"`
}

// MethodName interface
func (evt PageLoadEventFired) MethodName() string {
	return "Page.loadEventFired"
}

// Load json
func (evt PageLoadEventFired) Load(b []byte) *PageLoadEventFired {
	E(json.Unmarshal(b, &evt))
	return &evt
}

// PageNavigatedWithinDocument (experimental) Fired when same-document navigation happens, e.g. due to history API usage or anchor navigation.
type PageNavigatedWithinDocument struct {
	// FrameID Id of the frame.
	FrameID *PageFrameID `json:"frameId"`

	// URL Frame's new url.
	URL string `json:"url"`
}

// MethodName interface
func (evt PageNavigatedWithinDocument) MethodName() string {
	return "Page.navigatedWithinDocument"
}

// Load json
func (evt PageNavigatedWithinDocument) Load(b []byte) *PageNavigatedWithinDocument {
	E(json.Unmarshal(b, &evt))
	return &evt
}

// PageScreencastFrame (experimental) Compressed image data requested by the `startScreencast`.
type PageScreencastFrame struct {
	// Data Base64-encoded compressed image.
	Data []byte `json:"data"`

	// Metadata Screencast frame metadata.
	Metadata *PageScreencastFrameMetadata `json:"metadata"`

	// SessionID Frame number.
	SessionID int64 `json:"sessionId"`
}

// MethodName interface
func (evt PageScreencastFrame) MethodName() string {
	return "Page.screencastFrame"
}

// Load json
func (evt PageScreencastFrame) Load(b []byte) *PageScreencastFrame {
	E(json.Unmarshal(b, &evt))
	return &evt
}

// PageScreencastVisibilityChanged (experimental) Fired when the page with currently enabled screencast was shown or hidden `.
type PageScreencastVisibilityChanged struct {
	// Visible True if the page is visible.
	Visible bool `json:"visible"`
}

// MethodName interface
func (evt PageScreencastVisibilityChanged) MethodName() string {
	return "Page.screencastVisibilityChanged"
}

// Load json
func (evt PageScreencastVisibilityChanged) Load(b []byte) *PageScreencastVisibilityChanged {
	E(json.Unmarshal(b, &evt))
	return &evt
}

// PageWindowOpen Fired when a new window is going to be opened, via window.open(), link click, form submission,
// etc.
type PageWindowOpen struct {
	// URL The URL for the new window.
	URL string `json:"url"`

	// WindowName Window name.
	WindowName string `json:"windowName"`

	// WindowFeatures An array of enabled window features.
	WindowFeatures []string `json:"windowFeatures"`

	// UserGesture Whether or not it was triggered by user gesture.
	UserGesture bool `json:"userGesture"`
}

// MethodName interface
func (evt PageWindowOpen) MethodName() string {
	return "Page.windowOpen"
}

// Load json
func (evt PageWindowOpen) Load(b []byte) *PageWindowOpen {
	E(json.Unmarshal(b, &evt))
	return &evt
}

// PageCompilationCacheProduced (experimental) Issued for every compilation cache generated. Is only available
// if Page.setGenerateCompilationCache is enabled.
type PageCompilationCacheProduced struct {
	// URL ...
	URL string `json:"url"`

	// Data Base64-encoded data
	Data []byte `json:"data"`
}

// MethodName interface
func (evt PageCompilationCacheProduced) MethodName() string {
	return "Page.compilationCacheProduced"
}

// Load json
func (evt PageCompilationCacheProduced) Load(b []byte) *PageCompilationCacheProduced {
	E(json.Unmarshal(b, &evt))
	return &evt
}
