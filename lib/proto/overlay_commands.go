// This file is generated by "./lib/proto/cmd/gen"

package proto

import (
	"encoding/json"
)

// OverlayDisable Disables domain notifications.
type OverlayDisable struct {
}

// OverlayDisableResult type
type OverlayDisableResult struct {
}

// Call of the command, sessionID is optional.
func (m OverlayDisable) Call(c *Call) (*OverlayDisableResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "OverlayDisable", m)
	if err != nil {
		return nil, err
	}

	var res OverlayDisableResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// OverlayEnable Enables domain notifications.
type OverlayEnable struct {
}

// OverlayEnableResult type
type OverlayEnableResult struct {
}

// Call of the command, sessionID is optional.
func (m OverlayEnable) Call(c *Call) (*OverlayEnableResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "OverlayEnable", m)
	if err != nil {
		return nil, err
	}

	var res OverlayEnableResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// OverlayGetHighlightObjectForTest For testing.
type OverlayGetHighlightObjectForTest struct {
	// NodeID Id of the node to get highlight object for.
	NodeID *DOMNodeID `json:"nodeId"`

	// IncludeDistance Whether to include distance info.
	IncludeDistance bool `json:"includeDistance,omitempty"`

	// IncludeStyle Whether to include style info.
	IncludeStyle bool `json:"includeStyle,omitempty"`
}

// OverlayGetHighlightObjectForTestResult type
type OverlayGetHighlightObjectForTestResult struct {
	// Highlight Highlight data for the node.
	Highlight map[string]interface{} `json:"highlight"`
}

// Call of the command, sessionID is optional.
func (m OverlayGetHighlightObjectForTest) Call(c *Call) (*OverlayGetHighlightObjectForTestResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "OverlayGetHighlightObjectForTest", m)
	if err != nil {
		return nil, err
	}

	var res OverlayGetHighlightObjectForTestResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// OverlayHideHighlight Hides any highlight.
type OverlayHideHighlight struct {
}

// OverlayHideHighlightResult type
type OverlayHideHighlightResult struct {
}

// Call of the command, sessionID is optional.
func (m OverlayHideHighlight) Call(c *Call) (*OverlayHideHighlightResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "OverlayHideHighlight", m)
	if err != nil {
		return nil, err
	}

	var res OverlayHideHighlightResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// OverlayHighlightFrame Highlights owner element of the frame with given id.
type OverlayHighlightFrame struct {
	// FrameID Identifier of the frame to highlight.
	FrameID *PageFrameID `json:"frameId"`

	// ContentColor The content box highlight fill color (default: transparent).
	ContentColor *DOMRGBA `json:"contentColor,omitempty"`

	// ContentOutlineColor The content box highlight outline color (default: transparent).
	ContentOutlineColor *DOMRGBA `json:"contentOutlineColor,omitempty"`
}

// OverlayHighlightFrameResult type
type OverlayHighlightFrameResult struct {
}

// Call of the command, sessionID is optional.
func (m OverlayHighlightFrame) Call(c *Call) (*OverlayHighlightFrameResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "OverlayHighlightFrame", m)
	if err != nil {
		return nil, err
	}

	var res OverlayHighlightFrameResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// OverlayHighlightNode Highlights DOM node with given id or with the given JavaScript object wrapper. Either nodeId or
// objectId must be specified.
type OverlayHighlightNode struct {
	// HighlightConfig A descriptor for the highlight appearance.
	HighlightConfig *OverlayHighlightConfig `json:"highlightConfig"`

	// NodeID Identifier of the node to highlight.
	NodeID *DOMNodeID `json:"nodeId,omitempty"`

	// BackendNodeID Identifier of the backend node to highlight.
	BackendNodeID *DOMBackendNodeID `json:"backendNodeId,omitempty"`

	// ObjectID JavaScript object id of the node to be highlighted.
	ObjectID *RuntimeRemoteObjectID `json:"objectId,omitempty"`

	// Selector Selectors to highlight relevant nodes.
	Selector string `json:"selector,omitempty"`
}

// OverlayHighlightNodeResult type
type OverlayHighlightNodeResult struct {
}

// Call of the command, sessionID is optional.
func (m OverlayHighlightNode) Call(c *Call) (*OverlayHighlightNodeResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "OverlayHighlightNode", m)
	if err != nil {
		return nil, err
	}

	var res OverlayHighlightNodeResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// OverlayHighlightQuad Highlights given quad. Coordinates are absolute with respect to the main frame viewport.
type OverlayHighlightQuad struct {
	// Quad Quad to highlight
	Quad *DOMQuad `json:"quad"`

	// Color The highlight fill color (default: transparent).
	Color *DOMRGBA `json:"color,omitempty"`

	// OutlineColor The highlight outline color (default: transparent).
	OutlineColor *DOMRGBA `json:"outlineColor,omitempty"`
}

// OverlayHighlightQuadResult type
type OverlayHighlightQuadResult struct {
}

// Call of the command, sessionID is optional.
func (m OverlayHighlightQuad) Call(c *Call) (*OverlayHighlightQuadResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "OverlayHighlightQuad", m)
	if err != nil {
		return nil, err
	}

	var res OverlayHighlightQuadResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// OverlayHighlightRect Highlights given rectangle. Coordinates are absolute with respect to the main frame viewport.
type OverlayHighlightRect struct {
	// X X coordinate
	X int64 `json:"x"`

	// Y Y coordinate
	Y int64 `json:"y"`

	// Width Rectangle width
	Width int64 `json:"width"`

	// Height Rectangle height
	Height int64 `json:"height"`

	// Color The highlight fill color (default: transparent).
	Color *DOMRGBA `json:"color,omitempty"`

	// OutlineColor The highlight outline color (default: transparent).
	OutlineColor *DOMRGBA `json:"outlineColor,omitempty"`
}

// OverlayHighlightRectResult type
type OverlayHighlightRectResult struct {
}

// Call of the command, sessionID is optional.
func (m OverlayHighlightRect) Call(c *Call) (*OverlayHighlightRectResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "OverlayHighlightRect", m)
	if err != nil {
		return nil, err
	}

	var res OverlayHighlightRectResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// OverlaySetInspectMode Enters the 'inspect' mode. In this mode, elements that user is hovering over are highlighted.
// Backend then generates 'inspectNodeRequested' event upon element selection.
type OverlaySetInspectMode struct {
	// Mode Set an inspection mode.
	Mode *OverlayInspectMode `json:"mode"`

	// HighlightConfig A descriptor for the highlight appearance of hovered-over nodes. May be omitted if `enabled
	// == false`.
	HighlightConfig *OverlayHighlightConfig `json:"highlightConfig,omitempty"`
}

// OverlaySetInspectModeResult type
type OverlaySetInspectModeResult struct {
}

// Call of the command, sessionID is optional.
func (m OverlaySetInspectMode) Call(c *Call) (*OverlaySetInspectModeResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "OverlaySetInspectMode", m)
	if err != nil {
		return nil, err
	}

	var res OverlaySetInspectModeResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// OverlaySetShowAdHighlights Highlights owner element of all frames detected to be ads.
type OverlaySetShowAdHighlights struct {
	// Show True for showing ad highlights
	Show bool `json:"show"`
}

// OverlaySetShowAdHighlightsResult type
type OverlaySetShowAdHighlightsResult struct {
}

// Call of the command, sessionID is optional.
func (m OverlaySetShowAdHighlights) Call(c *Call) (*OverlaySetShowAdHighlightsResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "OverlaySetShowAdHighlights", m)
	if err != nil {
		return nil, err
	}

	var res OverlaySetShowAdHighlightsResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// OverlaySetPausedInDebuggerMessage ...
type OverlaySetPausedInDebuggerMessage struct {
	// Message The message to display, also triggers resume and step over controls.
	Message string `json:"message,omitempty"`
}

// OverlaySetPausedInDebuggerMessageResult type
type OverlaySetPausedInDebuggerMessageResult struct {
}

// Call of the command, sessionID is optional.
func (m OverlaySetPausedInDebuggerMessage) Call(c *Call) (*OverlaySetPausedInDebuggerMessageResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "OverlaySetPausedInDebuggerMessage", m)
	if err != nil {
		return nil, err
	}

	var res OverlaySetPausedInDebuggerMessageResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// OverlaySetShowDebugBorders Requests that backend shows debug borders on layers
type OverlaySetShowDebugBorders struct {
	// Show True for showing debug borders
	Show bool `json:"show"`
}

// OverlaySetShowDebugBordersResult type
type OverlaySetShowDebugBordersResult struct {
}

// Call of the command, sessionID is optional.
func (m OverlaySetShowDebugBorders) Call(c *Call) (*OverlaySetShowDebugBordersResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "OverlaySetShowDebugBorders", m)
	if err != nil {
		return nil, err
	}

	var res OverlaySetShowDebugBordersResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// OverlaySetShowFPSCounter Requests that backend shows the FPS counter
type OverlaySetShowFPSCounter struct {
	// Show True for showing the FPS counter
	Show bool `json:"show"`
}

// OverlaySetShowFPSCounterResult type
type OverlaySetShowFPSCounterResult struct {
}

// Call of the command, sessionID is optional.
func (m OverlaySetShowFPSCounter) Call(c *Call) (*OverlaySetShowFPSCounterResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "OverlaySetShowFPSCounter", m)
	if err != nil {
		return nil, err
	}

	var res OverlaySetShowFPSCounterResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// OverlaySetShowPaintRects Requests that backend shows paint rectangles
type OverlaySetShowPaintRects struct {
	// Result True for showing paint rectangles
	Result bool `json:"result"`
}

// OverlaySetShowPaintRectsResult type
type OverlaySetShowPaintRectsResult struct {
}

// Call of the command, sessionID is optional.
func (m OverlaySetShowPaintRects) Call(c *Call) (*OverlaySetShowPaintRectsResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "OverlaySetShowPaintRects", m)
	if err != nil {
		return nil, err
	}

	var res OverlaySetShowPaintRectsResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// OverlaySetShowLayoutShiftRegions Requests that backend shows layout shift regions
type OverlaySetShowLayoutShiftRegions struct {
	// Result True for showing layout shift regions
	Result bool `json:"result"`
}

// OverlaySetShowLayoutShiftRegionsResult type
type OverlaySetShowLayoutShiftRegionsResult struct {
}

// Call of the command, sessionID is optional.
func (m OverlaySetShowLayoutShiftRegions) Call(c *Call) (*OverlaySetShowLayoutShiftRegionsResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "OverlaySetShowLayoutShiftRegions", m)
	if err != nil {
		return nil, err
	}

	var res OverlaySetShowLayoutShiftRegionsResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// OverlaySetShowScrollBottleneckRects Requests that backend shows scroll bottleneck rects
type OverlaySetShowScrollBottleneckRects struct {
	// Show True for showing scroll bottleneck rects
	Show bool `json:"show"`
}

// OverlaySetShowScrollBottleneckRectsResult type
type OverlaySetShowScrollBottleneckRectsResult struct {
}

// Call of the command, sessionID is optional.
func (m OverlaySetShowScrollBottleneckRects) Call(c *Call) (*OverlaySetShowScrollBottleneckRectsResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "OverlaySetShowScrollBottleneckRects", m)
	if err != nil {
		return nil, err
	}

	var res OverlaySetShowScrollBottleneckRectsResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// OverlaySetShowHitTestBorders Requests that backend shows hit-test borders on layers
type OverlaySetShowHitTestBorders struct {
	// Show True for showing hit-test borders
	Show bool `json:"show"`
}

// OverlaySetShowHitTestBordersResult type
type OverlaySetShowHitTestBordersResult struct {
}

// Call of the command, sessionID is optional.
func (m OverlaySetShowHitTestBorders) Call(c *Call) (*OverlaySetShowHitTestBordersResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "OverlaySetShowHitTestBorders", m)
	if err != nil {
		return nil, err
	}

	var res OverlaySetShowHitTestBordersResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// OverlaySetShowViewportSizeOnResize Paints viewport size upon main frame resize.
type OverlaySetShowViewportSizeOnResize struct {
	// Show Whether to paint size or not.
	Show bool `json:"show"`
}

// OverlaySetShowViewportSizeOnResizeResult type
type OverlaySetShowViewportSizeOnResizeResult struct {
}

// Call of the command, sessionID is optional.
func (m OverlaySetShowViewportSizeOnResize) Call(c *Call) (*OverlaySetShowViewportSizeOnResizeResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "OverlaySetShowViewportSizeOnResize", m)
	if err != nil {
		return nil, err
	}

	var res OverlaySetShowViewportSizeOnResizeResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}
