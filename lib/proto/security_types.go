// This file is generated by "./lib/proto/cmd/gen"

package proto

// SecurityCertificateID An internal certificate ID value.
type SecurityCertificateID int64

// SecurityMixedContentType A description of mixed content (HTTP resources on HTTPS pages), as defined by
// https://www.w3.org/TR/mixed-content/#categories
type SecurityMixedContentType string

const (
	// SecurityMixedContentTypeBlockable enum value
	SecurityMixedContentTypeBlockable SecurityMixedContentType = "blockable"

	// SecurityMixedContentTypeOptionallyBlockable enum value
	SecurityMixedContentTypeOptionallyBlockable SecurityMixedContentType = "optionally-blockable"

	// SecurityMixedContentTypeNone enum value
	SecurityMixedContentTypeNone SecurityMixedContentType = "none"
)

// SecuritySecurityState The security level of a page or resource.
type SecuritySecurityState string

const (
	// SecuritySecurityStateUnknown enum value
	SecuritySecurityStateUnknown SecuritySecurityState = "unknown"

	// SecuritySecurityStateNeutral enum value
	SecuritySecurityStateNeutral SecuritySecurityState = "neutral"

	// SecuritySecurityStateInsecure enum value
	SecuritySecurityStateInsecure SecuritySecurityState = "insecure"

	// SecuritySecurityStateSecure enum value
	SecuritySecurityStateSecure SecuritySecurityState = "secure"

	// SecuritySecurityStateInfo enum value
	SecuritySecurityStateInfo SecuritySecurityState = "info"

	// SecuritySecurityStateInsecureBroken enum value
	SecuritySecurityStateInsecureBroken SecuritySecurityState = "insecure-broken"
)

// SecurityCertificateSecurityState (experimental) Details about the security state of the page certificate.
type SecurityCertificateSecurityState struct {
	// Protocol Protocol name (e.g. "TLS 1.2" or "QUIC").
	Protocol string `json:"protocol"`

	// KeyExchange Key Exchange used by the connection, or the empty string if not applicable.
	KeyExchange string `json:"keyExchange"`

	// KeyExchangeGroup (EC)DH group used by the connection, if applicable.
	KeyExchangeGroup string `json:"keyExchangeGroup,omitempty"`

	// Cipher Cipher name.
	Cipher string `json:"cipher"`

	// Mac TLS MAC. Note that AEAD ciphers do not have separate MACs.
	Mac string `json:"mac,omitempty"`

	// Certificate Page certificate.
	Certificate []string `json:"certificate"`

	// SubjectName Certificate subject name.
	SubjectName string `json:"subjectName"`

	// Issuer Name of the issuing CA.
	Issuer string `json:"issuer"`

	// ValidFrom Certificate valid from date.
	ValidFrom *NetworkTimeSinceEpoch `json:"validFrom"`

	// ValidTo Certificate valid to (expiration) date
	ValidTo *NetworkTimeSinceEpoch `json:"validTo"`

	// CertificateNetworkError The highest priority network error code, if the certificate has an error.
	CertificateNetworkError string `json:"certificateNetworkError,omitempty"`

	// CertificateHasWeakSignature True if the certificate uses a weak signature aglorithm.
	CertificateHasWeakSignature bool `json:"certificateHasWeakSignature"`

	// CertificateHasSha1Signature True if the certificate has a SHA1 signature in the chain.
	CertificateHasSha1Signature bool `json:"certificateHasSha1Signature"`

	// ModernSSL True if modern SSL
	ModernSSL bool `json:"modernSSL"`

	// ObsoleteSslProtocol True if the connection is using an obsolete SSL protocol.
	ObsoleteSslProtocol bool `json:"obsoleteSslProtocol"`

	// ObsoleteSslKeyExchange True if the connection is using an obsolete SSL key exchange.
	ObsoleteSslKeyExchange bool `json:"obsoleteSslKeyExchange"`

	// ObsoleteSslCipher True if the connection is using an obsolete SSL cipher.
	ObsoleteSslCipher bool `json:"obsoleteSslCipher"`

	// ObsoleteSslSignature True if the connection is using an obsolete SSL signature.
	ObsoleteSslSignature bool `json:"obsoleteSslSignature"`
}

// SecuritySafetyTipStatus (experimental) ...
type SecuritySafetyTipStatus string

const (
	// SecuritySafetyTipStatusBadReputation enum value
	SecuritySafetyTipStatusBadReputation SecuritySafetyTipStatus = "badReputation"

	// SecuritySafetyTipStatusLookalike enum value
	SecuritySafetyTipStatusLookalike SecuritySafetyTipStatus = "lookalike"
)

// SecuritySafetyTipInfo (experimental) ...
type SecuritySafetyTipInfo struct {
	// SafetyTipStatus Describes whether the page triggers any safety tips or reputation warnings. Default is unknown.
	SafetyTipStatus *SecuritySafetyTipStatus `json:"safetyTipStatus"`

	// SafeURL The URL the safety tip suggested ("Did you mean?"). Only filled in for lookalike matches.
	SafeURL string `json:"safeUrl,omitempty"`
}

// SecurityVisibleSecurityState (experimental) Security state information about the page.
type SecurityVisibleSecurityState struct {
	// SecurityState The security level of the page.
	SecurityState *SecuritySecurityState `json:"securityState"`

	// CertificateSecurityState Security state details about the page certificate.
	CertificateSecurityState *SecurityCertificateSecurityState `json:"certificateSecurityState,omitempty"`

	// SafetyTipInfo The type of Safety Tip triggered on the page. Note that this field will be set even if the Safety Tip UI was not actually shown.
	SafetyTipInfo *SecuritySafetyTipInfo `json:"safetyTipInfo,omitempty"`

	// SecurityStateIssueIds Array of security state issues ids.
	SecurityStateIssueIds []string `json:"securityStateIssueIds"`
}

// SecuritySecurityStateExplanation An explanation of an factor contributing to the security state.
type SecuritySecurityStateExplanation struct {
	// SecurityState Security state representing the severity of the factor being explained.
	SecurityState *SecuritySecurityState `json:"securityState"`

	// Title Title describing the type of factor.
	Title string `json:"title"`

	// Summary Short phrase describing the type of factor.
	Summary string `json:"summary"`

	// Description Full text explanation of the factor.
	Description string `json:"description"`

	// MixedContentType The type of mixed content described by the explanation.
	MixedContentType *SecurityMixedContentType `json:"mixedContentType"`

	// Certificate Page certificate.
	Certificate []string `json:"certificate"`

	// Recommendations Recommendations to fix any issues.
	Recommendations []string `json:"recommendations,omitempty"`
}

// SecurityInsecureContentStatus (deprecated) Information about insecure content on the page.
type SecurityInsecureContentStatus struct {
	// RanMixedContent Always false.
	RanMixedContent bool `json:"ranMixedContent"`

	// DisplayedMixedContent Always false.
	DisplayedMixedContent bool `json:"displayedMixedContent"`

	// ContainedMixedForm Always false.
	ContainedMixedForm bool `json:"containedMixedForm"`

	// RanContentWithCertErrors Always false.
	RanContentWithCertErrors bool `json:"ranContentWithCertErrors"`

	// DisplayedContentWithCertErrors Always false.
	DisplayedContentWithCertErrors bool `json:"displayedContentWithCertErrors"`

	// RanInsecureContentStyle Always set to unknown.
	RanInsecureContentStyle *SecuritySecurityState `json:"ranInsecureContentStyle"`

	// DisplayedInsecureContentStyle Always set to unknown.
	DisplayedInsecureContentStyle *SecuritySecurityState `json:"displayedInsecureContentStyle"`
}

// SecurityCertificateErrorAction The action to take when a certificate error occurs. continue will continue processing the
// request and cancel will cancel the request.
type SecurityCertificateErrorAction string

const (
	// SecurityCertificateErrorActionContinue enum value
	SecurityCertificateErrorActionContinue SecurityCertificateErrorAction = "continue"

	// SecurityCertificateErrorActionCancel enum value
	SecurityCertificateErrorActionCancel SecurityCertificateErrorAction = "cancel"
)
