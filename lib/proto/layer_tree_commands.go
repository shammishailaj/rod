// This file is generated by "./lib/proto/cmd/gen"

package proto

import (
	"encoding/json"
)

// LayerTreeCompositingReasons Provides the reasons why the given layer was composited.
type LayerTreeCompositingReasons struct {
	// LayerID The id of the layer for which we want to get the reasons it was composited.
	LayerID *LayerTreeLayerID `json:"layerId"`
}

// LayerTreeCompositingReasonsResult type
type LayerTreeCompositingReasonsResult struct {
	// CompositingReasons (deprecated) A list of strings specifying reasons for the given layer to become composited.
	CompositingReasons []string `json:"compositingReasons"`

	// CompositingReasonIds A list of strings specifying reason IDs for the given layer to become composited.
	CompositingReasonIds []string `json:"compositingReasonIds"`
}

// Call of the command, sessionID is optional.
func (m LayerTreeCompositingReasons) Call(c *Call) (*LayerTreeCompositingReasonsResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "LayerTreeCompositingReasons", m)
	if err != nil {
		return nil, err
	}

	var res LayerTreeCompositingReasonsResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// LayerTreeDisable Disables compositing tree inspection.
type LayerTreeDisable struct {
}

// LayerTreeDisableResult type
type LayerTreeDisableResult struct {
}

// Call of the command, sessionID is optional.
func (m LayerTreeDisable) Call(c *Call) (*LayerTreeDisableResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "LayerTreeDisable", m)
	if err != nil {
		return nil, err
	}

	var res LayerTreeDisableResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// LayerTreeEnable Enables compositing tree inspection.
type LayerTreeEnable struct {
}

// LayerTreeEnableResult type
type LayerTreeEnableResult struct {
}

// Call of the command, sessionID is optional.
func (m LayerTreeEnable) Call(c *Call) (*LayerTreeEnableResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "LayerTreeEnable", m)
	if err != nil {
		return nil, err
	}

	var res LayerTreeEnableResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// LayerTreeLoadSnapshot Returns the snapshot identifier.
type LayerTreeLoadSnapshot struct {
	// Tiles An array of tiles composing the snapshot.
	Tiles []*LayerTreePictureTile `json:"tiles"`
}

// LayerTreeLoadSnapshotResult type
type LayerTreeLoadSnapshotResult struct {
	// SnapshotID The id of the snapshot.
	SnapshotID *LayerTreeSnapshotID `json:"snapshotId"`
}

// Call of the command, sessionID is optional.
func (m LayerTreeLoadSnapshot) Call(c *Call) (*LayerTreeLoadSnapshotResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "LayerTreeLoadSnapshot", m)
	if err != nil {
		return nil, err
	}

	var res LayerTreeLoadSnapshotResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// LayerTreeMakeSnapshot Returns the layer snapshot identifier.
type LayerTreeMakeSnapshot struct {
	// LayerID The id of the layer.
	LayerID *LayerTreeLayerID `json:"layerId"`
}

// LayerTreeMakeSnapshotResult type
type LayerTreeMakeSnapshotResult struct {
	// SnapshotID The id of the layer snapshot.
	SnapshotID *LayerTreeSnapshotID `json:"snapshotId"`
}

// Call of the command, sessionID is optional.
func (m LayerTreeMakeSnapshot) Call(c *Call) (*LayerTreeMakeSnapshotResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "LayerTreeMakeSnapshot", m)
	if err != nil {
		return nil, err
	}

	var res LayerTreeMakeSnapshotResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// LayerTreeProfileSnapshot ...
type LayerTreeProfileSnapshot struct {
	// SnapshotID The id of the layer snapshot.
	SnapshotID *LayerTreeSnapshotID `json:"snapshotId"`

	// MinRepeatCount The maximum number of times to replay the snapshot (1, if not specified).
	MinRepeatCount int64 `json:"minRepeatCount,omitempty"`

	// MinDuration The minimum duration (in seconds) to replay the snapshot.
	MinDuration float64 `json:"minDuration,omitempty"`

	// ClipRect The clip rectangle to apply when replaying the snapshot.
	ClipRect *DOMRect `json:"clipRect,omitempty"`
}

// LayerTreeProfileSnapshotResult type
type LayerTreeProfileSnapshotResult struct {
	// Timings The array of paint profiles, one per run.
	Timings []*LayerTreePaintProfile `json:"timings"`
}

// Call of the command, sessionID is optional.
func (m LayerTreeProfileSnapshot) Call(c *Call) (*LayerTreeProfileSnapshotResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "LayerTreeProfileSnapshot", m)
	if err != nil {
		return nil, err
	}

	var res LayerTreeProfileSnapshotResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// LayerTreeReleaseSnapshot Releases layer snapshot captured by the back-end.
type LayerTreeReleaseSnapshot struct {
	// SnapshotID The id of the layer snapshot.
	SnapshotID *LayerTreeSnapshotID `json:"snapshotId"`
}

// LayerTreeReleaseSnapshotResult type
type LayerTreeReleaseSnapshotResult struct {
}

// Call of the command, sessionID is optional.
func (m LayerTreeReleaseSnapshot) Call(c *Call) (*LayerTreeReleaseSnapshotResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "LayerTreeReleaseSnapshot", m)
	if err != nil {
		return nil, err
	}

	var res LayerTreeReleaseSnapshotResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// LayerTreeReplaySnapshot Replays the layer snapshot and returns the resulting bitmap.
type LayerTreeReplaySnapshot struct {
	// SnapshotID The id of the layer snapshot.
	SnapshotID *LayerTreeSnapshotID `json:"snapshotId"`

	// FromStep The first step to replay from (replay from the very start if not specified).
	FromStep int64 `json:"fromStep,omitempty"`

	// ToStep The last step to replay to (replay till the end if not specified).
	ToStep int64 `json:"toStep,omitempty"`

	// Scale The scale to apply while replaying (defaults to 1).
	Scale float64 `json:"scale,omitempty"`
}

// LayerTreeReplaySnapshotResult type
type LayerTreeReplaySnapshotResult struct {
	// DataURL A data: URL for resulting image.
	DataURL string `json:"dataURL"`
}

// Call of the command, sessionID is optional.
func (m LayerTreeReplaySnapshot) Call(c *Call) (*LayerTreeReplaySnapshotResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "LayerTreeReplaySnapshot", m)
	if err != nil {
		return nil, err
	}

	var res LayerTreeReplaySnapshotResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// LayerTreeSnapshotCommandLog Replays the layer snapshot and returns canvas log.
type LayerTreeSnapshotCommandLog struct {
	// SnapshotID The id of the layer snapshot.
	SnapshotID *LayerTreeSnapshotID `json:"snapshotId"`
}

// LayerTreeSnapshotCommandLogResult type
type LayerTreeSnapshotCommandLogResult struct {
	// CommandLog The array of canvas function calls.
	CommandLog []map[string]interface{} `json:"commandLog"`
}

// Call of the command, sessionID is optional.
func (m LayerTreeSnapshotCommandLog) Call(c *Call) (*LayerTreeSnapshotCommandLogResult, error) {
	bin, err := c.Client.Call(c.Context, c.SessionID, "LayerTreeSnapshotCommandLog", m)
	if err != nil {
		return nil, err
	}

	var res LayerTreeSnapshotCommandLogResult
	err = json.Unmarshal(bin, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}
